
balancer_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c370  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800c510  0800c510  0000d510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb8c  0800cb8c  0000e1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb8c  0800cb8c  0000db8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb94  0800cb94  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb94  0800cb94  0000db94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cb98  0800cb98  0000db98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800cb9c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004dc  200001f0  0800cd8c  0000e1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  0800cd8c  0000e6cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f51  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029a4  00000000  00000000  00021171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  00023b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  00024c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187c2  00000000  00000000  000259ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015988  00000000  00000000  0003e1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936a1  00000000  00000000  00053b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e71d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006188  00000000  00000000  000e7218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000ed3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c4f8 	.word	0x0800c4f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800c4f8 	.word	0x0800c4f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <IMU_init>:
uint8_t raw_data[6]; //for use with the above


//function definitions for the IMU
/// Checks I2C connection, reads the WHO_AM_I register, and scans device address for verification purposes. Prints debugging messages through uart.
void IMU_init(ICM_20948*p_IMU){
 8000ff4:	b5b0      	push	{r4, r5, r7, lr}
 8000ff6:	b09a      	sub	sp, #104	@ 0x68
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(p_IMU->hi2c, ICM20948_I2C_ADDR, 1, 100); // i2c pointer & because we want the address
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	2201      	movs	r2, #1
 8001004:	21d2      	movs	r1, #210	@ 0xd2
 8001006:	f002 fdcb 	bl	8003ba0 <HAL_I2C_IsDeviceReady>
 800100a:	4603      	mov	r3, r0
 800100c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 // addrr is 11001, added 0 for the function to read
    	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 // trials: number of times to try the connection
    	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 // timout in ms
    if (ret == HAL_OK)
 8001010:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001014:	2b00      	cmp	r3, #0
 8001016:	d108      	bne.n	800102a <IMU_init+0x36>
      {
    	  HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"\r\n imu: connected ", 19, HAL_MAX_DELAY); // ensure string length is correct
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6858      	ldr	r0, [r3, #4]
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	2213      	movs	r2, #19
 8001022:	4958      	ldr	r1, [pc, #352]	@ (8001184 <IMU_init+0x190>)
 8001024:	f005 f8fc 	bl	8006220 <HAL_UART_Transmit>
 8001028:	e007      	b.n	800103a <IMU_init+0x46>
      }
      else
      {
    	  HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"\r\n imu: no connection", 21, HAL_MAX_DELAY);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6858      	ldr	r0, [r3, #4]
 800102e:	f04f 33ff 	mov.w	r3, #4294967295
 8001032:	2215      	movs	r2, #21
 8001034:	4954      	ldr	r1, [pc, #336]	@ (8001188 <IMU_init+0x194>)
 8001036:	f005 f8f3 	bl	8006220 <HAL_UART_Transmit>
    // checking the WHO_AM_I register
    uint8_t check;
    uint8_t data;

    // Check WHO_AM_I register
    HAL_I2C_Mem_Read(p_IMU->hi2c, ICM20948_I2C_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &check, 1, HAL_MAX_DELAY);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	9302      	str	r3, [sp, #8]
 8001044:	2301      	movs	r3, #1
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	2200      	movs	r2, #0
 8001052:	21d2      	movs	r1, #210	@ 0xd2
 8001054:	f002 fb72 	bl	800373c <HAL_I2C_Mem_Read>
    if (check == 0xEA) // WHO_AM_I should return 0xEA for ICM-20948
 8001058:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800105c:	2bea      	cmp	r3, #234	@ 0xea
 800105e:	d12e      	bne.n	80010be <IMU_init+0xca>
    {
    	HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"\r\n ICM-20948 found\r\n", 20, HAL_MAX_DELAY);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6858      	ldr	r0, [r3, #4]
 8001064:	f04f 33ff 	mov.w	r3, #4294967295
 8001068:	2214      	movs	r2, #20
 800106a:	4948      	ldr	r1, [pc, #288]	@ (800118c <IMU_init+0x198>)
 800106c:	f005 f8d8 	bl	8006220 <HAL_UART_Transmit>
         sprintf(msg, "WHO_AM_I reads 0x%02X\r\n", check);
 8001070:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001074:	461a      	mov	r2, r3
 8001076:	4946      	ldr	r1, [pc, #280]	@ (8001190 <IMU_init+0x19c>)
 8001078:	4846      	ldr	r0, [pc, #280]	@ (8001194 <IMU_init+0x1a0>)
 800107a:	f007 f805 	bl	8008088 <siprintf>
         HAL_UART_Transmit(p_IMU->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685c      	ldr	r4, [r3, #4]
 8001082:	4844      	ldr	r0, [pc, #272]	@ (8001194 <IMU_init+0x1a0>)
 8001084:	f7ff f8fc 	bl	8000280 <strlen>
 8001088:	4603      	mov	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	4940      	ldr	r1, [pc, #256]	@ (8001194 <IMU_init+0x1a0>)
 8001092:	4620      	mov	r0, r4
 8001094:	f005 f8c4 	bl	8006220 <HAL_UART_Transmit>
         // Wake up the sensor (clear sleep mode bit)
         data = 0x01;
 8001098:	2301      	movs	r3, #1
 800109a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
         HAL_I2C_Mem_Write(p_IMU->hi2c, ICM20948_I2C_ADDR, PWR_MGMT_1_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6818      	ldr	r0, [r3, #0]
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	9302      	str	r3, [sp, #8]
 80010a8:	2301      	movs	r3, #1
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	2206      	movs	r2, #6
 80010b6:	21d2      	movs	r1, #210	@ 0xd2
 80010b8:	f002 fa46 	bl	8003548 <HAL_I2C_Mem_Write>
 80010bc:	e007      	b.n	80010ce <IMU_init+0xda>
     }
     else
     {
    	 HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"ICM-20948 not found\r\n", 21, HAL_MAX_DELAY);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6858      	ldr	r0, [r3, #4]
 80010c2:	f04f 33ff 	mov.w	r3, #4294967295
 80010c6:	2215      	movs	r2, #21
 80010c8:	4933      	ldr	r1, [pc, #204]	@ (8001198 <IMU_init+0x1a4>)
 80010ca:	f005 f8a9 	bl	8006220 <HAL_UART_Transmit>
      }


     //I2C scanner
     char info[] = "Scanning I2C bus...\r\n";
 80010ce:	4b33      	ldr	r3, [pc, #204]	@ (800119c <IMU_init+0x1a8>)
 80010d0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80010d4:	461d      	mov	r5, r3
 80010d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010de:	6020      	str	r0, [r4, #0]
 80010e0:	3404      	adds	r4, #4
 80010e2:	8021      	strh	r1, [r4, #0]
     HAL_UART_Transmit(p_IMU->huart, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685c      	ldr	r4, [r3, #4]
 80010e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f8c7 	bl	8000280 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	4620      	mov	r0, r4
 8001100:	f005 f88e 	bl	8006220 <HAL_UART_Transmit>

     for (uint8_t addr = 1; addr < 128; addr++)
 8001104:	2301      	movs	r3, #1
 8001106:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800110a:	e031      	b.n	8001170 <IMU_init+0x17c>
     {
    	 if (HAL_I2C_IsDeviceReady(p_IMU->hi2c, addr << 1, 1, 10) == HAL_OK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001114:	b29b      	uxth	r3, r3
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	b299      	uxth	r1, r3
 800111a:	230a      	movs	r3, #10
 800111c:	2201      	movs	r2, #1
 800111e:	f002 fd3f 	bl	8003ba0 <HAL_I2C_IsDeviceReady>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d118      	bne.n	800115a <IMU_init+0x166>
         {
    		 char msg[32];
    		 sprintf(msg, "Found device at 0x%02X\r\n", addr);
 8001128:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	491b      	ldr	r1, [pc, #108]	@ (80011a0 <IMU_init+0x1ac>)
 8001132:	4618      	mov	r0, r3
 8001134:	f006 ffa8 	bl	8008088 <siprintf>
    		 HAL_UART_Transmit(p_IMU->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685c      	ldr	r4, [r3, #4]
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f89d 	bl	8000280 <strlen>
 8001146:	4603      	mov	r3, r0
 8001148:	b29a      	uxth	r2, r3
 800114a:	f107 0108 	add.w	r1, r7, #8
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	4620      	mov	r0, r4
 8001154:	f005 f864 	bl	8006220 <HAL_UART_Transmit>
 8001158:	e005      	b.n	8001166 <IMU_init+0x172>
         } else {
    		 char msg[50];
    		 sprintf(msg, "No device found\r\n");
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4911      	ldr	r1, [pc, #68]	@ (80011a4 <IMU_init+0x1b0>)
 8001160:	4618      	mov	r0, r3
 8001162:	f006 ff91 	bl	8008088 <siprintf>
     for (uint8_t addr = 1; addr < 128; addr++)
 8001166:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800116a:	3301      	adds	r3, #1
 800116c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8001170:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8001174:	2b00      	cmp	r3, #0
 8001176:	dac9      	bge.n	800110c <IMU_init+0x118>
    		 //HAL_UART_Transmit(p_IMU->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
         }
     }
}
 8001178:	bf00      	nop
 800117a:	bf00      	nop
 800117c:	3758      	adds	r7, #88	@ 0x58
 800117e:	46bd      	mov	sp, r7
 8001180:	bdb0      	pop	{r4, r5, r7, pc}
 8001182:	bf00      	nop
 8001184:	0800c510 	.word	0x0800c510
 8001188:	0800c524 	.word	0x0800c524
 800118c:	0800c53c 	.word	0x0800c53c
 8001190:	0800c554 	.word	0x0800c554
 8001194:	2000020c 	.word	0x2000020c
 8001198:	0800c56c 	.word	0x0800c56c
 800119c:	0800c5b4 	.word	0x0800c5b4
 80011a0:	0800c584 	.word	0x0800c584
 80011a4:	0800c5a0 	.word	0x0800c5a0

080011a8 <IMU_read_accel>:


AccelData IMU_read_accel(ICM_20948*p_IMU){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b090      	sub	sp, #64	@ 0x40
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	6178      	str	r0, [r7, #20]
	AccelData accel_data = {0};
 80011b0:	f107 0318 	add.w	r3, r7, #24
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]

	if (HAL_I2C_Mem_Read(p_IMU->hi2c, ICM20948_I2C_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, raw_data, 6, HAL_MAX_DELAY) == HAL_OK)
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2306      	movs	r3, #6
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	4b8b      	ldr	r3, [pc, #556]	@ (80013f8 <IMU_read_accel+0x250>)
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	2301      	movs	r3, #1
 80011d0:	222d      	movs	r2, #45	@ 0x2d
 80011d2:	21d2      	movs	r1, #210	@ 0xd2
 80011d4:	f002 fab2 	bl	800373c <HAL_I2C_Mem_Read>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 80dc 	bne.w	8001398 <IMU_read_accel+0x1f0>
	{
		accel_x_raw = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 80011e0:	4b85      	ldr	r3, [pc, #532]	@ (80013f8 <IMU_read_accel+0x250>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	4b83      	ldr	r3, [pc, #524]	@ (80013f8 <IMU_read_accel+0x250>)
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b82      	ldr	r3, [pc, #520]	@ (80013fc <IMU_read_accel+0x254>)
 80011f4:	801a      	strh	r2, [r3, #0]
	    accel_y_raw = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 80011f6:	4b80      	ldr	r3, [pc, #512]	@ (80013f8 <IMU_read_accel+0x250>)
 80011f8:	789b      	ldrb	r3, [r3, #2]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	b21a      	sxth	r2, r3
 80011fe:	4b7e      	ldr	r3, [pc, #504]	@ (80013f8 <IMU_read_accel+0x250>)
 8001200:	78db      	ldrb	r3, [r3, #3]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b7d      	ldr	r3, [pc, #500]	@ (8001400 <IMU_read_accel+0x258>)
 800120a:	801a      	strh	r2, [r3, #0]
	    accel_z_raw = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 800120c:	4b7a      	ldr	r3, [pc, #488]	@ (80013f8 <IMU_read_accel+0x250>)
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
 8001214:	4b78      	ldr	r3, [pc, #480]	@ (80013f8 <IMU_read_accel+0x250>)
 8001216:	795b      	ldrb	r3, [r3, #5]
 8001218:	b21b      	sxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b79      	ldr	r3, [pc, #484]	@ (8001404 <IMU_read_accel+0x25c>)
 8001220:	801a      	strh	r2, [r3, #0]

	    // take the raw readings, divide by sensitivity, multiply by 9.81 to get reading m/s^2 reading
	    accel_x = (float)accel_x_raw * GRAV / ACCEL_FS;
 8001222:	4b76      	ldr	r3, [pc, #472]	@ (80013fc <IMU_read_accel+0x254>)
 8001224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	ee17 0a90 	vmov	r0, s15
 8001234:	f7ff f990 	bl	8000558 <__aeabi_f2d>
 8001238:	a36d      	add	r3, pc, #436	@ (adr r3, 80013f0 <IMU_read_accel+0x248>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f9e3 	bl	8000608 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4610      	mov	r0, r2
 8001248:	4619      	mov	r1, r3
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b6e      	ldr	r3, [pc, #440]	@ (8001408 <IMU_read_accel+0x260>)
 8001250:	f7ff fb04 	bl	800085c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fccc 	bl	8000bf8 <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	4a6a      	ldr	r2, [pc, #424]	@ (800140c <IMU_read_accel+0x264>)
 8001264:	6013      	str	r3, [r2, #0]
	    accel_y = (float)accel_y_raw * GRAV / ACCEL_FS;
 8001266:	4b66      	ldr	r3, [pc, #408]	@ (8001400 <IMU_read_accel+0x258>)
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ee17 0a90 	vmov	r0, s15
 8001278:	f7ff f96e 	bl	8000558 <__aeabi_f2d>
 800127c:	a35c      	add	r3, pc, #368	@ (adr r3, 80013f0 <IMU_read_accel+0x248>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f9c1 	bl	8000608 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b5d      	ldr	r3, [pc, #372]	@ (8001408 <IMU_read_accel+0x260>)
 8001294:	f7ff fae2 	bl	800085c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fcaa 	bl	8000bf8 <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001410 <IMU_read_accel+0x268>)
 80012a8:	6013      	str	r3, [r2, #0]
	    accel_z = (float)accel_z_raw * GRAV / ACCEL_FS;
 80012aa:	4b56      	ldr	r3, [pc, #344]	@ (8001404 <IMU_read_accel+0x25c>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ee17 0a90 	vmov	r0, s15
 80012bc:	f7ff f94c 	bl	8000558 <__aeabi_f2d>
 80012c0:	a34b      	add	r3, pc, #300	@ (adr r3, 80013f0 <IMU_read_accel+0x248>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f99f 	bl	8000608 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001408 <IMU_read_accel+0x260>)
 80012d8:	f7ff fac0 	bl	800085c <__aeabi_ddiv>
 80012dc:	4602      	mov	r2, r0
 80012de:	460b      	mov	r3, r1
 80012e0:	4610      	mov	r0, r2
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fc88 	bl	8000bf8 <__aeabi_d2f>
 80012e8:	4603      	mov	r3, r0
 80012ea:	4a4a      	ldr	r2, [pc, #296]	@ (8001414 <IMU_read_accel+0x26c>)
 80012ec:	6013      	str	r3, [r2, #0]

	    accel_data.accel_x = accel_x_raw * GRAV / ACCEL_FS;
 80012ee:	4b43      	ldr	r3, [pc, #268]	@ (80013fc <IMU_read_accel+0x254>)
 80012f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f91d 	bl	8000534 <__aeabi_i2d>
 80012fa:	a33d      	add	r3, pc, #244	@ (adr r3, 80013f0 <IMU_read_accel+0x248>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7ff f982 	bl	8000608 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b3d      	ldr	r3, [pc, #244]	@ (8001408 <IMU_read_accel+0x260>)
 8001312:	f7ff faa3 	bl	800085c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc6b 	bl	8000bf8 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	61bb      	str	r3, [r7, #24]
	    accel_data.accel_y = accel_y_raw * GRAV / ACCEL_FS;
 8001326:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <IMU_read_accel+0x258>)
 8001328:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f901 	bl	8000534 <__aeabi_i2d>
 8001332:	a32f      	add	r3, pc, #188	@ (adr r3, 80013f0 <IMU_read_accel+0x248>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff f966 	bl	8000608 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <IMU_read_accel+0x260>)
 800134a:	f7ff fa87 	bl	800085c <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fc4f 	bl	8000bf8 <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
 800135c:	61fb      	str	r3, [r7, #28]
	    accel_data.accel_z = accel_z_raw * GRAV / ACCEL_FS;
 800135e:	4b29      	ldr	r3, [pc, #164]	@ (8001404 <IMU_read_accel+0x25c>)
 8001360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f8e5 	bl	8000534 <__aeabi_i2d>
 800136a:	a321      	add	r3, pc, #132	@ (adr r3, 80013f0 <IMU_read_accel+0x248>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff f94a 	bl	8000608 <__aeabi_dmul>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <IMU_read_accel+0x260>)
 8001382:	f7ff fa6b 	bl	800085c <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fc33 	bl	8000bf8 <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	e010      	b.n	80013ba <IMU_read_accel+0x212>
	    //HAL_UART_Transmit(p_IMU->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	}
	else
	{
		HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"Error reading accel data\r\n", 26, HAL_MAX_DELAY);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	6858      	ldr	r0, [r3, #4]
 800139c:	f04f 33ff 	mov.w	r3, #4294967295
 80013a0:	221a      	movs	r2, #26
 80013a2:	491d      	ldr	r1, [pc, #116]	@ (8001418 <IMU_read_accel+0x270>)
 80013a4:	f004 ff3c 	bl	8006220 <HAL_UART_Transmit>
	    accel_data.accel_x = 0;
 80013a8:	f04f 0300 	mov.w	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
	    accel_data.accel_y = 0;
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
	    accel_data.accel_z = 0;
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
	}

	return accel_data;
 80013ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013be:	f107 0218 	add.w	r2, r7, #24
 80013c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80013c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ce:	ee06 1a90 	vmov	s13, r1
 80013d2:	ee07 2a10 	vmov	s14, r2
 80013d6:	ee07 3a90 	vmov	s15, r3
}
 80013da:	eeb0 0a66 	vmov.f32	s0, s13
 80013de:	eef0 0a47 	vmov.f32	s1, s14
 80013e2:	eeb0 1a67 	vmov.f32	s2, s15
 80013e6:	3730      	adds	r7, #48	@ 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	f3af 8000 	nop.w
 80013f0:	51eb851f 	.word	0x51eb851f
 80013f4:	40239eb8 	.word	0x40239eb8
 80013f8:	20000264 	.word	0x20000264
 80013fc:	2000023e 	.word	0x2000023e
 8001400:	20000240 	.word	0x20000240
 8001404:	20000242 	.word	0x20000242
 8001408:	40d00000 	.word	0x40d00000
 800140c:	20000244 	.word	0x20000244
 8001410:	20000248 	.word	0x20000248
 8001414:	2000024c 	.word	0x2000024c
 8001418:	0800c5cc 	.word	0x0800c5cc

0800141c <IMU_read_gyro>:


GyroData IMU_read_gyro(ICM_20948*p_IMU){
 800141c:	b580      	push	{r7, lr}
 800141e:	b090      	sub	sp, #64	@ 0x40
 8001420:	af04      	add	r7, sp, #16
 8001422:	6178      	str	r0, [r7, #20]
	GyroData gyro_data = {0};
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]

	if (HAL_I2C_Mem_Read(p_IMU->hi2c, ICM20948_I2C_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, raw_data, 6, HAL_MAX_DELAY) == HAL_OK)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	6818      	ldr	r0, [r3, #0]
 8001434:	f04f 33ff 	mov.w	r3, #4294967295
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2306      	movs	r3, #6
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	4b58      	ldr	r3, [pc, #352]	@ (80015a0 <IMU_read_gyro+0x184>)
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	2233      	movs	r2, #51	@ 0x33
 8001446:	21d2      	movs	r1, #210	@ 0xd2
 8001448:	f002 f978 	bl	800373c <HAL_I2C_Mem_Read>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d17b      	bne.n	800154a <IMU_read_gyro+0x12e>
	{

		gyro_x_raw = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 8001452:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <IMU_read_gyro+0x184>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b51      	ldr	r3, [pc, #324]	@ (80015a0 <IMU_read_gyro+0x184>)
 800145c:	785b      	ldrb	r3, [r3, #1]
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b21a      	sxth	r2, r3
 8001464:	4b4f      	ldr	r3, [pc, #316]	@ (80015a4 <IMU_read_gyro+0x188>)
 8001466:	801a      	strh	r2, [r3, #0]
	    gyro_y_raw = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 8001468:	4b4d      	ldr	r3, [pc, #308]	@ (80015a0 <IMU_read_gyro+0x184>)
 800146a:	789b      	ldrb	r3, [r3, #2]
 800146c:	021b      	lsls	r3, r3, #8
 800146e:	b21a      	sxth	r2, r3
 8001470:	4b4b      	ldr	r3, [pc, #300]	@ (80015a0 <IMU_read_gyro+0x184>)
 8001472:	78db      	ldrb	r3, [r3, #3]
 8001474:	b21b      	sxth	r3, r3
 8001476:	4313      	orrs	r3, r2
 8001478:	b21a      	sxth	r2, r3
 800147a:	4b4b      	ldr	r3, [pc, #300]	@ (80015a8 <IMU_read_gyro+0x18c>)
 800147c:	801a      	strh	r2, [r3, #0]
	    gyro_z_raw = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 800147e:	4b48      	ldr	r3, [pc, #288]	@ (80015a0 <IMU_read_gyro+0x184>)
 8001480:	791b      	ldrb	r3, [r3, #4]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	4b46      	ldr	r3, [pc, #280]	@ (80015a0 <IMU_read_gyro+0x184>)
 8001488:	795b      	ldrb	r3, [r3, #5]
 800148a:	b21b      	sxth	r3, r3
 800148c:	4313      	orrs	r3, r2
 800148e:	b21a      	sxth	r2, r3
 8001490:	4b46      	ldr	r3, [pc, #280]	@ (80015ac <IMU_read_gyro+0x190>)
 8001492:	801a      	strh	r2, [r3, #0]

	    // take the raw readings, divide by sensitivity. data in deg/s
	    gyro_x = (float)gyro_x_raw / GYRO_FS_SEL;
 8001494:	4b43      	ldr	r3, [pc, #268]	@ (80015a4 <IMU_read_gyro+0x188>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014a2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80015b0 <IMU_read_gyro+0x194>
 80014a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014aa:	4b42      	ldr	r3, [pc, #264]	@ (80015b4 <IMU_read_gyro+0x198>)
 80014ac:	edc3 7a00 	vstr	s15, [r3]
	    gyro_y = (float)gyro_y_raw / GYRO_FS_SEL;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <IMU_read_gyro+0x18c>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014be:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80015b0 <IMU_read_gyro+0x194>
 80014c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014c6:	4b3c      	ldr	r3, [pc, #240]	@ (80015b8 <IMU_read_gyro+0x19c>)
 80014c8:	edc3 7a00 	vstr	s15, [r3]
	    gyro_z = (float)gyro_z_raw / GYRO_FS_SEL;
 80014cc:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <IMU_read_gyro+0x190>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014da:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80015b0 <IMU_read_gyro+0x194>
 80014de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e2:	4b36      	ldr	r3, [pc, #216]	@ (80015bc <IMU_read_gyro+0x1a0>)
 80014e4:	edc3 7a00 	vstr	s15, [r3]

	    gyro_data.gyro_x = gyro_x_raw / GYRO_FS_SEL;
 80014e8:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <IMU_read_gyro+0x188>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	4a34      	ldr	r2, [pc, #208]	@ (80015c0 <IMU_read_gyro+0x1a4>)
 80014f0:	fb82 1203 	smull	r1, r2, r2, r3
 80014f4:	1152      	asrs	r2, r2, #5
 80014f6:	17db      	asrs	r3, r3, #31
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	b21b      	sxth	r3, r3
 80014fc:	ee07 3a90 	vmov	s15, r3
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	edc7 7a06 	vstr	s15, [r7, #24]
	    gyro_data.gyro_y = gyro_y_raw / GYRO_FS_SEL;
 8001508:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <IMU_read_gyro+0x18c>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	4a2c      	ldr	r2, [pc, #176]	@ (80015c0 <IMU_read_gyro+0x1a4>)
 8001510:	fb82 1203 	smull	r1, r2, r2, r3
 8001514:	1152      	asrs	r2, r2, #5
 8001516:	17db      	asrs	r3, r3, #31
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b21b      	sxth	r3, r3
 800151c:	ee07 3a90 	vmov	s15, r3
 8001520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001524:	edc7 7a07 	vstr	s15, [r7, #28]
	    gyro_data.gyro_z = gyro_z_raw / GYRO_FS_SEL;
 8001528:	4b20      	ldr	r3, [pc, #128]	@ (80015ac <IMU_read_gyro+0x190>)
 800152a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152e:	4a24      	ldr	r2, [pc, #144]	@ (80015c0 <IMU_read_gyro+0x1a4>)
 8001530:	fb82 1203 	smull	r1, r2, r2, r3
 8001534:	1152      	asrs	r2, r2, #5
 8001536:	17db      	asrs	r3, r3, #31
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	b21b      	sxth	r3, r3
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001544:	edc7 7a08 	vstr	s15, [r7, #32]
 8001548:	e010      	b.n	800156c <IMU_read_gyro+0x150>
	    //HAL_UART_Transmit(p_IMU->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

	}
	else
	{
		HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"Error reading gyro data\r\n", 25, HAL_MAX_DELAY);
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	6858      	ldr	r0, [r3, #4]
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	2219      	movs	r2, #25
 8001554:	491b      	ldr	r1, [pc, #108]	@ (80015c4 <IMU_read_gyro+0x1a8>)
 8001556:	f004 fe63 	bl	8006220 <HAL_UART_Transmit>
	    gyro_data.gyro_x = 0;
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
	    gyro_data.gyro_y = 0;
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
	    gyro_data.gyro_z = 0;
 8001566:	f04f 0300 	mov.w	r3, #0
 800156a:	623b      	str	r3, [r7, #32]
	}

	return gyro_data;
 800156c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001570:	f107 0218 	add.w	r2, r7, #24
 8001574:	ca07      	ldmia	r2, {r0, r1, r2}
 8001576:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800157a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800157c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001580:	ee06 1a90 	vmov	s13, r1
 8001584:	ee07 2a10 	vmov	s14, r2
 8001588:	ee07 3a90 	vmov	s15, r3
}
 800158c:	eeb0 0a66 	vmov.f32	s0, s13
 8001590:	eef0 0a47 	vmov.f32	s1, s14
 8001594:	eeb0 1a67 	vmov.f32	s2, s15
 8001598:	3730      	adds	r7, #48	@ 0x30
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000264 	.word	0x20000264
 80015a4:	20000250 	.word	0x20000250
 80015a8:	20000252 	.word	0x20000252
 80015ac:	20000254 	.word	0x20000254
 80015b0:	43030000 	.word	0x43030000
 80015b4:	20000258 	.word	0x20000258
 80015b8:	2000025c 	.word	0x2000025c
 80015bc:	20000260 	.word	0x20000260
 80015c0:	3e88cb3d 	.word	0x3e88cb3d
 80015c4:	0800c5e8 	.word	0x0800c5e8

080015c8 <update_control>:
// system variables. assume x to be the axis running vertically through the IMU
float angle_z = 0.0f;
float angular_velocity = 0.0f;

void update_control(odrive_t *p_odrive, float angle, float angular_velocity, float motor_curr_speed)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80015d8:	ed87 1a00 	vstr	s2, [r7]
	x[0] = angle;
 80015dc:	4a32      	ldr	r2, [pc, #200]	@ (80016a8 <update_control+0xe0>)
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	6013      	str	r3, [r2, #0]
	x[1] = angular_velocity;
 80015e2:	4a31      	ldr	r2, [pc, #196]	@ (80016a8 <update_control+0xe0>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6053      	str	r3, [r2, #4]
	x[2] = motor_curr_speed;
 80015e8:	4a2f      	ldr	r2, [pc, #188]	@ (80016a8 <update_control+0xe0>)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6093      	str	r3, [r2, #8]

	u = -(K[0]*x[0] + K[1]*x[1] + K[2]*x[2]);
 80015ee:	4b2f      	ldr	r3, [pc, #188]	@ (80016ac <update_control+0xe4>)
 80015f0:	ed93 7a00 	vldr	s14, [r3]
 80015f4:	4b2c      	ldr	r3, [pc, #176]	@ (80016a8 <update_control+0xe0>)
 80015f6:	edd3 7a00 	vldr	s15, [r3]
 80015fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fe:	4b2b      	ldr	r3, [pc, #172]	@ (80016ac <update_control+0xe4>)
 8001600:	edd3 6a01 	vldr	s13, [r3, #4]
 8001604:	4b28      	ldr	r3, [pc, #160]	@ (80016a8 <update_control+0xe0>)
 8001606:	edd3 7a01 	vldr	s15, [r3, #4]
 800160a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001612:	4b26      	ldr	r3, [pc, #152]	@ (80016ac <update_control+0xe4>)
 8001614:	edd3 6a02 	vldr	s13, [r3, #8]
 8001618:	4b23      	ldr	r3, [pc, #140]	@ (80016a8 <update_control+0xe0>)
 800161a:	edd3 7a02 	vldr	s15, [r3, #8]
 800161e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	eef1 7a67 	vneg.f32	s15, s15
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <update_control+0xe8>)
 800162c:	edc3 7a00 	vstr	s15, [r3]

	u = u / (2*M_PI);
 8001630:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <update_control+0xe8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff8f 	bl	8000558 <__aeabi_f2d>
 800163a:	a319      	add	r3, pc, #100	@ (adr r3, 80016a0 <update_control+0xd8>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7ff f90c 	bl	800085c <__aeabi_ddiv>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4610      	mov	r0, r2
 800164a:	4619      	mov	r1, r3
 800164c:	f7ff fad4 	bl	8000bf8 <__aeabi_d2f>
 8001650:	4603      	mov	r3, r0
 8001652:	4a17      	ldr	r2, [pc, #92]	@ (80016b0 <update_control+0xe8>)
 8001654:	6013      	str	r3, [r2, #0]

	u = fmaxf(fminf(u,10),-10); // limiting requested motor speed
 8001656:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <update_control+0xe8>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	f00a fd93 	bl	800c18e <fminf>
 8001668:	eef0 7a40 	vmov.f32	s15, s0
 800166c:	eefa 0a04 	vmov.f32	s1, #164	@ 0xc1200000 -10.0
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f00a fd6e 	bl	800c154 <fmaxf>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <update_control+0xe8>)
 800167e:	edc3 7a00 	vstr	s15, [r3]

	ODRIVE_SetVelocity(p_odrive, 0, u);
 8001682:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <update_control+0xe8>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	eeb0 0a67 	vmov.f32	s0, s15
 800168c:	2100      	movs	r1, #0
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 fda6 	bl	80021e0 <ODRIVE_SetVelocity>
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	f3af 8000 	nop.w
 80016a0:	54442d18 	.word	0x54442d18
 80016a4:	401921fb 	.word	0x401921fb
 80016a8:	2000026c 	.word	0x2000026c
 80016ac:	20000000 	.word	0x20000000
 80016b0:	20000278 	.word	0x20000278
 80016b4:	00000000 	.word	0x00000000

080016b8 <calculate_IMU_Angle>:


// reads IMU data and calculates angle of the system
pos_spd calculate_IMU_Angle(ICM_20948 *p_IMU)
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b098      	sub	sp, #96	@ 0x60
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
	float gyro_angle;
	float accel_angle_z;
	static float previous_angle_z= 0.0000;

	// read both of the sensors
	AccelData accel = IMU_read_accel(p_IMU);	// m/s^2
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7ff fd71 	bl	80011a8 <IMU_read_accel>
 80016c6:	eef0 6a40 	vmov.f32	s13, s0
 80016ca:	eeb0 7a60 	vmov.f32	s14, s1
 80016ce:	eef0 7a41 	vmov.f32	s15, s2
 80016d2:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 80016d6:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 80016da:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	ax = accel.accel_x;
 80016de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e0:	65bb      	str	r3, [r7, #88]	@ 0x58
	ay = accel.accel_y;
 80016e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016e4:	657b      	str	r3, [r7, #84]	@ 0x54
	az = accel.accel_z;
 80016e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016e8:	653b      	str	r3, [r7, #80]	@ 0x50

	GyroData gyro = IMU_read_gyro(p_IMU);
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f7ff fe96 	bl	800141c <IMU_read_gyro>
 80016f0:	eef0 6a40 	vmov.f32	s13, s0
 80016f4:	eeb0 7a60 	vmov.f32	s14, s1
 80016f8:	eef0 7a41 	vmov.f32	s15, s2
 80016fc:	edc7 6a07 	vstr	s13, [r7, #28]
 8001700:	ed87 7a08 	vstr	s14, [r7, #32]
 8001704:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	gx = gyro.gyro_x;
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	gy = gyro.gyro_y;
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	64bb      	str	r3, [r7, #72]	@ 0x48
	gz = gyro.gyro_z;
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	647b      	str	r3, [r7, #68]	@ 0x44

	gyro_angle = angle_z + gz*DT;
 8001714:	4b70      	ldr	r3, [pc, #448]	@ (80018d8 <calculate_IMU_Angle+0x220>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f7fe ff1d 	bl	8000558 <__aeabi_f2d>
 800171e:	4604      	mov	r4, r0
 8001720:	460d      	mov	r5, r1
 8001722:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001724:	f7fe ff18 	bl	8000558 <__aeabi_f2d>
 8001728:	a35d      	add	r3, pc, #372	@ (adr r3, 80018a0 <calculate_IMU_Angle+0x1e8>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe ff6b 	bl	8000608 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4620      	mov	r0, r4
 8001738:	4629      	mov	r1, r5
 800173a:	f7fe fdaf 	bl	800029c <__adddf3>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4610      	mov	r0, r2
 8001744:	4619      	mov	r1, r3
 8001746:	f7ff fa57 	bl	8000bf8 <__aeabi_d2f>
 800174a:	4603      	mov	r3, r0
 800174c:	643b      	str	r3, [r7, #64]	@ 0x40

	accel_angle_z = atan2f(ax,ay);
 800174e:	edd7 0a15 	vldr	s1, [r7, #84]	@ 0x54
 8001752:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 8001756:	f00a fcfb 	bl	800c150 <atan2f>
 800175a:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c

    if (accel_angle_z > M_PI) accel_angle_z -= 2 * M_PI;
 800175e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001760:	f7fe fefa 	bl	8000558 <__aeabi_f2d>
 8001764:	a350      	add	r3, pc, #320	@ (adr r3, 80018a8 <calculate_IMU_Angle+0x1f0>)
 8001766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176a:	f7ff f9dd 	bl	8000b28 <__aeabi_dcmpgt>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d010      	beq.n	8001796 <calculate_IMU_Angle+0xde>
 8001774:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001776:	f7fe feef 	bl	8000558 <__aeabi_f2d>
 800177a:	a34d      	add	r3, pc, #308	@ (adr r3, 80018b0 <calculate_IMU_Angle+0x1f8>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe fd8a 	bl	8000298 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff fa34 	bl	8000bf8 <__aeabi_d2f>
 8001790:	4603      	mov	r3, r0
 8001792:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001794:	e01a      	b.n	80017cc <calculate_IMU_Angle+0x114>
    else if (accel_angle_z < -M_PI) accel_angle_z += 2 * M_PI;
 8001796:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001798:	f7fe fede 	bl	8000558 <__aeabi_f2d>
 800179c:	a346      	add	r3, pc, #280	@ (adr r3, 80018b8 <calculate_IMU_Angle+0x200>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7ff f9a3 	bl	8000aec <__aeabi_dcmplt>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d00f      	beq.n	80017cc <calculate_IMU_Angle+0x114>
 80017ac:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80017ae:	f7fe fed3 	bl	8000558 <__aeabi_f2d>
 80017b2:	a33f      	add	r3, pc, #252	@ (adr r3, 80018b0 <calculate_IMU_Angle+0x1f8>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe fd70 	bl	800029c <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff fa18 	bl	8000bf8 <__aeabi_d2f>
 80017c8:	4603      	mov	r3, r0
 80017ca:	65fb      	str	r3, [r7, #92]	@ 0x5c

    accel_angle_z = accel_angle_z  * (180.0 / M_PI);
 80017cc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80017ce:	f7fe fec3 	bl	8000558 <__aeabi_f2d>
 80017d2:	a33b      	add	r3, pc, #236	@ (adr r3, 80018c0 <calculate_IMU_Angle+0x208>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe ff16 	bl	8000608 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff fa08 	bl	8000bf8 <__aeabi_d2f>
 80017e8:	4603      	mov	r3, r0
 80017ea:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // complementary filter
	angle_z = ALPHA * gyro_angle  +  (1 - ALPHA) * accel_angle_z;
 80017ec:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80017ee:	f7fe feb3 	bl	8000558 <__aeabi_f2d>
 80017f2:	a335      	add	r3, pc, #212	@ (adr r3, 80018c8 <calculate_IMU_Angle+0x210>)
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	f7fe ff06 	bl	8000608 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4614      	mov	r4, r2
 8001802:	461d      	mov	r5, r3
 8001804:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001806:	f7fe fea7 	bl	8000558 <__aeabi_f2d>
 800180a:	a331      	add	r3, pc, #196	@ (adr r3, 80018d0 <calculate_IMU_Angle+0x218>)
 800180c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001810:	f7fe fefa 	bl	8000608 <__aeabi_dmul>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	4620      	mov	r0, r4
 800181a:	4629      	mov	r1, r5
 800181c:	f7fe fd3e 	bl	800029c <__adddf3>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f9e6 	bl	8000bf8 <__aeabi_d2f>
 800182c:	4603      	mov	r3, r0
 800182e:	4a2a      	ldr	r2, [pc, #168]	@ (80018d8 <calculate_IMU_Angle+0x220>)
 8001830:	6013      	str	r3, [r2, #0]

    // Calculate angular acceleration (alpha)
    //float alpha = at / DISPLACEMENT_DIST;

    // Update angular velocity using angular acceleration
    float angular_velocity = (angle_z-previous_angle_z) / DT;
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <calculate_IMU_Angle+0x220>)
 8001834:	ed93 7a00 	vldr	s14, [r3]
 8001838:	4b28      	ldr	r3, [pc, #160]	@ (80018dc <calculate_IMU_Angle+0x224>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001842:	ee17 0a90 	vmov	r0, s15
 8001846:	f7fe fe87 	bl	8000558 <__aeabi_f2d>
 800184a:	a315      	add	r3, pc, #84	@ (adr r3, 80018a0 <calculate_IMU_Angle+0x1e8>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	f7ff f804 	bl	800085c <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4610      	mov	r0, r2
 800185a:	4619      	mov	r1, r3
 800185c:	f7ff f9cc 	bl	8000bf8 <__aeabi_d2f>
 8001860:	4603      	mov	r3, r0
 8001862:	63fb      	str	r3, [r7, #60]	@ 0x3c
    previous_angle_z = angle_z;
 8001864:	4b1c      	ldr	r3, [pc, #112]	@ (80018d8 <calculate_IMU_Angle+0x220>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <calculate_IMU_Angle+0x224>)
 800186a:	6013      	str	r3, [r2, #0]

    pos_spd output = {angle_z, angular_velocity};
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <calculate_IMU_Angle+0x220>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001874:	61bb      	str	r3, [r7, #24]

	return output;
 8001876:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800187a:	f107 0214 	add.w	r2, r7, #20
 800187e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001882:	e883 0003 	stmia.w	r3, {r0, r1}
 8001886:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800188a:	ee07 2a10 	vmov	s14, r2
 800188e:	ee07 3a90 	vmov	s15, r3
}
 8001892:	eeb0 0a47 	vmov.f32	s0, s14
 8001896:	eef0 0a67 	vmov.f32	s1, s15
 800189a:	3760      	adds	r7, #96	@ 0x60
 800189c:	46bd      	mov	sp, r7
 800189e:	bdb0      	pop	{r4, r5, r7, pc}
 80018a0:	47ae147b 	.word	0x47ae147b
 80018a4:	3f847ae1 	.word	0x3f847ae1
 80018a8:	54442d18 	.word	0x54442d18
 80018ac:	400921fb 	.word	0x400921fb
 80018b0:	54442d18 	.word	0x54442d18
 80018b4:	401921fb 	.word	0x401921fb
 80018b8:	54442d18 	.word	0x54442d18
 80018bc:	c00921fb 	.word	0xc00921fb
 80018c0:	1a63c1f8 	.word	0x1a63c1f8
 80018c4:	404ca5dc 	.word	0x404ca5dc
 80018c8:	f5c28f5c 	.word	0xf5c28f5c
 80018cc:	3fef5c28 	.word	0x3fef5c28
 80018d0:	47ae1480 	.word	0x47ae1480
 80018d4:	3f947ae1 	.word	0x3f947ae1
 80018d8:	2000027c 	.word	0x2000027c
 80018dc:	20000280 	.word	0x20000280

080018e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b093      	sub	sp, #76	@ 0x4c
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e6:	f001 f8f9 	bl	8002adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ea:	f000 f8d9 	bl	8001aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ee:	f000 fb8f 	bl	8002010 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018f2:	f000 f93d 	bl	8001b70 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80018f6:	f000 fb37 	bl	8001f68 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80018fa:	f000 f9e7 	bl	8001ccc <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80018fe:	f000 fb5d 	bl	8001fbc <MX_USART6_UART_Init>
  MX_TIM11_Init();
 8001902:	f000 fae9 	bl	8001ed8 <MX_TIM11_Init>
  MX_TIM1_Init();
 8001906:	f000 f961 	bl	8001bcc <MX_TIM1_Init>
  MX_TIM5_Init();
 800190a:	f000 fa8f 	bl	8001e2c <MX_TIM5_Init>
  MX_TIM4_Init();
 800190e:	f000 fa37 	bl	8001d80 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // start interrupts for timing tasks
  HAL_TIM_Base_Start_IT(&htim1);
 8001912:	4852      	ldr	r0, [pc, #328]	@ (8001a5c <main+0x17c>)
 8001914:	f003 fbfe 	bl	8005114 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001918:	4851      	ldr	r0, [pc, #324]	@ (8001a60 <main+0x180>)
 800191a:	f003 fbfb 	bl	8005114 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800191e:	4851      	ldr	r0, [pc, #324]	@ (8001a64 <main+0x184>)
 8001920:	f003 fbf8 	bl	8005114 <HAL_TIM_Base_Start_IT>

  // start receiving
  start_receive_string(&odrive);
 8001924:	4850      	ldr	r0, [pc, #320]	@ (8001a68 <main+0x188>)
 8001926:	f000 fccf 	bl	80022c8 <start_receive_string>

  HAL_UART_Transmit(&huart2, (uint8_t*)"\033c", strlen("\033c"), HAL_MAX_DELAY);
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	2202      	movs	r2, #2
 8001930:	494e      	ldr	r1, [pc, #312]	@ (8001a6c <main+0x18c>)
 8001932:	484f      	ldr	r0, [pc, #316]	@ (8001a70 <main+0x190>)
 8001934:	f004 fc74 	bl	8006220 <HAL_UART_Transmit>

  ODRIVE_Reboot(&odrive);
 8001938:	484b      	ldr	r0, [pc, #300]	@ (8001a68 <main+0x188>)
 800193a:	f000 fc19 	bl	8002170 <ODRIVE_Reboot>
  HAL_Delay(10000);
 800193e:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001942:	f001 f93d 	bl	8002bc0 <HAL_Delay>

  ODRIVE_ClearErrors(&odrive);
 8001946:	4848      	ldr	r0, [pc, #288]	@ (8001a68 <main+0x188>)
 8001948:	f000 fc2e 	bl	80021a8 <ODRIVE_ClearErrors>

  IMU_init(&IMU);
 800194c:	4849      	ldr	r0, [pc, #292]	@ (8001a74 <main+0x194>)
 800194e:	f7ff fb51 	bl	8000ff4 <IMU_init>

	//IMU_read_accel(&IMU);
	//IMU_read_gyro(&IMU);

	// LED task
	if (LED_rdy_flag == 1) {
 8001952:	4b49      	ldr	r3, [pc, #292]	@ (8001a78 <main+0x198>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d107      	bne.n	800196c <main+0x8c>
		LED_rdy_flag = 0;
 800195c:	4b46      	ldr	r3, [pc, #280]	@ (8001a78 <main+0x198>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8001962:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001966:	4845      	ldr	r0, [pc, #276]	@ (8001a7c <main+0x19c>)
 8001968:	f001 fc8f 	bl	800328a <HAL_GPIO_TogglePin>

	}


	// IMU read task
    if (IMU_rdy_flag ==  1) {
 800196c:	4b44      	ldr	r3, [pc, #272]	@ (8001a80 <main+0x1a0>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d14a      	bne.n	8001a0c <main+0x12c>
        IMU_rdy_flag = 0;
 8001976:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <main+0x1a0>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]

    	pos_spd new_IMU_out = calculate_IMU_Angle(&IMU);
 800197c:	483d      	ldr	r0, [pc, #244]	@ (8001a74 <main+0x194>)
 800197e:	f7ff fe9b 	bl	80016b8 <calculate_IMU_Angle>
 8001982:	eeb0 7a40 	vmov.f32	s14, s0
 8001986:	eef0 7a60 	vmov.f32	s15, s1
 800198a:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 800198e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    	real_pos = new_IMU_out.position - 90;
 8001992:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001996:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001a84 <main+0x1a4>
 800199a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800199e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a88 <main+0x1a8>)
 80019a0:	edc3 7a00 	vstr	s15, [r3]
    	sys_vel = new_IMU_out.speed;
 80019a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019a6:	4a39      	ldr	r2, [pc, #228]	@ (8001a8c <main+0x1ac>)
 80019a8:	6013      	str	r3, [r2, #0]

    	char ctrl_msg[50];
        sprintf(ctrl_msg, "SYS ANGLE: %.4f     ", real_pos);
 80019aa:	4b37      	ldr	r3, [pc, #220]	@ (8001a88 <main+0x1a8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdd2 	bl	8000558 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4638      	mov	r0, r7
 80019ba:	4935      	ldr	r1, [pc, #212]	@ (8001a90 <main+0x1b0>)
 80019bc:	f006 fb64 	bl	8008088 <siprintf>
        HAL_UART_Transmit(laptop.huart, (uint8_t*)ctrl_msg, strlen(ctrl_msg), HAL_MAX_DELAY);
 80019c0:	4b34      	ldr	r3, [pc, #208]	@ (8001a94 <main+0x1b4>)
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	463b      	mov	r3, r7
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fc5a 	bl	8000280 <strlen>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4639      	mov	r1, r7
 80019d2:	f04f 33ff 	mov.w	r3, #4294967295
 80019d6:	4620      	mov	r0, r4
 80019d8:	f004 fc22 	bl	8006220 <HAL_UART_Transmit>

        sprintf(ctrl_msg, "ANG_VEL: %.4f     \r\n", new_IMU_out.speed);
 80019dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdba 	bl	8000558 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4638      	mov	r0, r7
 80019ea:	492b      	ldr	r1, [pc, #172]	@ (8001a98 <main+0x1b8>)
 80019ec:	f006 fb4c 	bl	8008088 <siprintf>
        HAL_UART_Transmit(laptop.huart, (uint8_t*)ctrl_msg, strlen(ctrl_msg), HAL_MAX_DELAY);
 80019f0:	4b28      	ldr	r3, [pc, #160]	@ (8001a94 <main+0x1b4>)
 80019f2:	681c      	ldr	r4, [r3, #0]
 80019f4:	463b      	mov	r3, r7
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fc42 	bl	8000280 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4639      	mov	r1, r7
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	4620      	mov	r0, r4
 8001a08:	f004 fc0a 	bl	8006220 <HAL_UART_Transmit>

    }

    // Controller task
    if (CTRL_rdy_flag == 1) {
 8001a0c:	4b23      	ldr	r3, [pc, #140]	@ (8001a9c <main+0x1bc>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d19d      	bne.n	8001952 <main+0x72>
    	CTRL_rdy_flag = 0;
 8001a16:	4b21      	ldr	r3, [pc, #132]	@ (8001a9c <main+0x1bc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]

    	uint8_t* feedback = ODRIVE_GetFeedback(&odrive, 0);
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4812      	ldr	r0, [pc, #72]	@ (8001a68 <main+0x188>)
 8001a20:	f000 fc04 	bl	800222c <ODRIVE_GetFeedback>
 8001a24:	6478      	str	r0, [r7, #68]	@ 0x44

    	float motor_pos, motor_vel;
    	extractFloats(feedback, &motor_pos, &motor_vel);
 8001a26:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8001a2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a2e:	4619      	mov	r1, r3
 8001a30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a32:	f000 fcb1 	bl	8002398 <extractFloats>

    	update_control(&odrive, real_pos, sys_vel, motor_vel);
 8001a36:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <main+0x1a8>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <main+0x1ac>)
 8001a3e:	ed93 7a00 	vldr	s14, [r3]
 8001a42:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001a46:	eeb0 1a66 	vmov.f32	s2, s13
 8001a4a:	eef0 0a47 	vmov.f32	s1, s14
 8001a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a52:	4805      	ldr	r0, [pc, #20]	@ (8001a68 <main+0x188>)
 8001a54:	f7ff fdb8 	bl	80015c8 <update_control>
	if (LED_rdy_flag == 1) {
 8001a58:	e77b      	b.n	8001952 <main+0x72>
 8001a5a:	bf00      	nop
 8001a5c:	200002d8 	.word	0x200002d8
 8001a60:	20000368 	.word	0x20000368
 8001a64:	200003b0 	.word	0x200003b0
 8001a68:	2000000c 	.word	0x2000000c
 8001a6c:	0800c604 	.word	0x0800c604
 8001a70:	20000440 	.word	0x20000440
 8001a74:	20000014 	.word	0x20000014
 8001a78:	200004d1 	.word	0x200004d1
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	200004d0 	.word	0x200004d0
 8001a84:	42b40000 	.word	0x42b40000
 8001a88:	200004d4 	.word	0x200004d4
 8001a8c:	200004d8 	.word	0x200004d8
 8001a90:	0800c608 	.word	0x0800c608
 8001a94:	20000010 	.word	0x20000010
 8001a98:	0800c620 	.word	0x0800c620
 8001a9c:	200004d2 	.word	0x200004d2

08001aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b094      	sub	sp, #80	@ 0x50
 8001aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	2230      	movs	r2, #48	@ 0x30
 8001aac:	2100      	movs	r1, #0
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f006 fb79 	bl	80081a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	4b27      	ldr	r3, [pc, #156]	@ (8001b68 <SystemClock_Config+0xc8>)
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	4a26      	ldr	r2, [pc, #152]	@ (8001b68 <SystemClock_Config+0xc8>)
 8001ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad4:	4b24      	ldr	r3, [pc, #144]	@ (8001b68 <SystemClock_Config+0xc8>)
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	4b21      	ldr	r3, [pc, #132]	@ (8001b6c <SystemClock_Config+0xcc>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <SystemClock_Config+0xcc>)
 8001aea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001aee:	6013      	str	r3, [r2, #0]
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <SystemClock_Config+0xcc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b06:	2302      	movs	r3, #2
 8001b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001b10:	2304      	movs	r3, #4
 8001b12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001b14:	2360      	movs	r3, #96	@ 0x60
 8001b16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b20:	f107 0320 	add.w	r3, r7, #32
 8001b24:	4618      	mov	r0, r3
 8001b26:	f002 fd1d 	bl	8004564 <HAL_RCC_OscConfig>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b30:	f000 fb18 	bl	8002164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b34:	230f      	movs	r3, #15
 8001b36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	2103      	movs	r1, #3
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 ff7f 	bl	8004a54 <HAL_RCC_ClockConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001b5c:	f000 fb02 	bl	8002164 <Error_Handler>
  }
}
 8001b60:	bf00      	nop
 8001b62:	3750      	adds	r7, #80	@ 0x50
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000

08001b70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b74:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b76:	4a13      	ldr	r2, [pc, #76]	@ (8001bc4 <MX_I2C1_Init+0x54>)
 8001b78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b7c:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <MX_I2C1_Init+0x58>)
 8001b7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ba0:	4b07      	ldr	r3, [pc, #28]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bac:	4804      	ldr	r0, [pc, #16]	@ (8001bc0 <MX_I2C1_Init+0x50>)
 8001bae:	f001 fb87 	bl	80032c0 <HAL_I2C_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001bb8:	f000 fad4 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000284 	.word	0x20000284
 8001bc4:	40005400 	.word	0x40005400
 8001bc8:	00061a80 	.word	0x00061a80

08001bcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b092      	sub	sp, #72	@ 0x48
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
 8001bec:	615a      	str	r2, [r3, #20]
 8001bee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f006 fad5 	bl	80081a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bfc:	4b31      	ldr	r3, [pc, #196]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001bfe:	4a32      	ldr	r2, [pc, #200]	@ (8001cc8 <MX_TIM1_Init+0xfc>)
 8001c00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15-1;
 8001c02:	4b30      	ldr	r3, [pc, #192]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c04:	220e      	movs	r2, #14
 8001c06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c10:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001c14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b2b      	ldr	r3, [pc, #172]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c22:	4b28      	ldr	r3, [pc, #160]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001c28:	4826      	ldr	r0, [pc, #152]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c2a:	f003 fad5 	bl	80051d8 <HAL_TIM_OC_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c34:	f000 fa96 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c40:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c44:	4619      	mov	r1, r3
 8001c46:	481f      	ldr	r0, [pc, #124]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c48:	f004 f9c6 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c52:	f000 fa87 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	2200      	movs	r2, #0
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4812      	ldr	r0, [pc, #72]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001c7c:	f003 fc94 	bl	80055a8 <HAL_TIM_OC_ConfigChannel>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c86:	f000 fa6d 	bl	8002164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c92:	2300      	movs	r3, #0
 8001c94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ca2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_TIM1_Init+0xf8>)
 8001cae:	f004 fa01 	bl	80060b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001cb8:	f000 fa54 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cbc:	bf00      	nop
 8001cbe:	3748      	adds	r7, #72	@ 0x48
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	200002d8 	.word	0x200002d8
 8001cc8:	40010000 	.word	0x40010000

08001ccc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd2:	f107 0320 	add.w	r3, r7, #32
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cee:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001cf0:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <MX_TIM3_Init+0xb0>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cf4:	4b20      	ldr	r3, [pc, #128]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d06:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d14:	4818      	ldr	r0, [pc, #96]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001d16:	f003 faae 	bl	8005276 <HAL_TIM_PWM_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001d20:	f000 fa20 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d2c:	f107 0320 	add.w	r3, r7, #32
 8001d30:	4619      	mov	r1, r3
 8001d32:	4811      	ldr	r0, [pc, #68]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001d34:	f004 f950 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d3e:	f000 fa11 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d42:	2360      	movs	r3, #96	@ 0x60
 8001d44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2204      	movs	r2, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4807      	ldr	r0, [pc, #28]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001d5a:	f003 fd1d 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d64:	f000 f9fe 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d68:	4803      	ldr	r0, [pc, #12]	@ (8001d78 <MX_TIM3_Init+0xac>)
 8001d6a:	f000 fc8b 	bl	8002684 <HAL_TIM_MspPostInit>

}
 8001d6e:	bf00      	nop
 8001d70:	3728      	adds	r7, #40	@ 0x28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000320 	.word	0x20000320
 8001d7c:	40000400 	.word	0x40000400

08001d80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d86:	f107 0320 	add.w	r3, r7, #32
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	611a      	str	r2, [r3, #16]
 8001d9e:	615a      	str	r2, [r3, #20]
 8001da0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001da2:	4b20      	ldr	r3, [pc, #128]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001da4:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <MX_TIM4_Init+0xa8>)
 8001da6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 75-1;
 8001da8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001daa:	224a      	movs	r2, #74	@ 0x4a
 8001dac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dae:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 64000-1;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001db6:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001dba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001dc8:	4816      	ldr	r0, [pc, #88]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001dca:	f003 fa05 	bl	80051d8 <HAL_TIM_OC_Init>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001dd4:	f000 f9c6 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001de0:	f107 0320 	add.w	r3, r7, #32
 8001de4:	4619      	mov	r1, r3
 8001de6:	480f      	ldr	r0, [pc, #60]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001de8:	f004 f8f6 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001df2:	f000 f9b7 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	2200      	movs	r2, #0
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4805      	ldr	r0, [pc, #20]	@ (8001e24 <MX_TIM4_Init+0xa4>)
 8001e0e:	f003 fbcb 	bl	80055a8 <HAL_TIM_OC_ConfigChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001e18:	f000 f9a4 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e1c:	bf00      	nop
 8001e1e:	3728      	adds	r7, #40	@ 0x28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000368 	.word	0x20000368
 8001e28:	40000800 	.word	0x40000800

08001e2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	@ 0x28
 8001e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e32:	f107 0320 	add.w	r3, r7, #32
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	615a      	str	r2, [r3, #20]
 8001e4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001e50:	4a20      	ldr	r2, [pc, #128]	@ (8001ed4 <MX_TIM5_Init+0xa8>)
 8001e52:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 150-1;
 8001e54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001e56:	2295      	movs	r2, #149	@ 0x95
 8001e58:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 64000-1;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001e62:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001e66:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e68:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001e74:	4816      	ldr	r0, [pc, #88]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001e76:	f003 f9af 	bl	80051d8 <HAL_TIM_OC_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001e80:	f000 f970 	bl	8002164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e8c:	f107 0320 	add.w	r3, r7, #32
 8001e90:	4619      	mov	r1, r3
 8001e92:	480f      	ldr	r0, [pc, #60]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001e94:	f004 f8a0 	bl	8005fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001e9e:	f000 f961 	bl	8002164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_TIM5_Init+0xa4>)
 8001eba:	f003 fb75 	bl	80055a8 <HAL_TIM_OC_ConfigChannel>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001ec4:	f000 f94e 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	@ 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	200003b0 	.word	0x200003b0
 8001ed4:	40000c00 	.word	0x40000c00

08001ed8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ede:	463b      	mov	r3, r7
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001eec:	4a1d      	ldr	r2, [pc, #116]	@ (8001f64 <MX_TIM11_Init+0x8c>)
 8001eee:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001efc:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001efe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f02:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f10:	4813      	ldr	r0, [pc, #76]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001f12:	f003 f8af 	bl	8005074 <HAL_TIM_Base_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8001f1c:	f000 f922 	bl	8002164 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8001f20:	480f      	ldr	r0, [pc, #60]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001f22:	f003 f9f7 	bl	8005314 <HAL_TIM_IC_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8001f2c:	f000 f91a 	bl	8002164 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f34:	2301      	movs	r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	@ (8001f60 <MX_TIM11_Init+0x88>)
 8001f48:	f003 fb8a 	bl	8005660 <HAL_TIM_IC_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8001f52:	f000 f907 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200003f8 	.word	0x200003f8
 8001f64:	40014800 	.word	0x40014800

08001f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	4a12      	ldr	r2, [pc, #72]	@ (8001fb8 <MX_USART2_UART_Init+0x50>)
 8001f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f80:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f86:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	220c      	movs	r2, #12
 8001f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9e:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	f004 f8ee 	bl	8006180 <HAL_UART_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001faa:	f000 f8db 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000440 	.word	0x20000440
 8001fb8:	40004400 	.word	0x40004400

08001fbc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	@ (800200c <MX_USART6_UART_Init+0x50>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001ff2:	4805      	ldr	r0, [pc, #20]	@ (8002008 <MX_USART6_UART_Init+0x4c>)
 8001ff4:	f004 f8c4 	bl	8006180 <HAL_UART_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001ffe:	f000 f8b1 	bl	8002164 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	20000488 	.word	0x20000488
 800200c:	40011400 	.word	0x40011400

08002010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08a      	sub	sp, #40	@ 0x28
 8002014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b2e      	ldr	r3, [pc, #184]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a2d      	ldr	r2, [pc, #180]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002030:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b2b      	ldr	r3, [pc, #172]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60fb      	str	r3, [r7, #12]
 8002046:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a26      	ldr	r2, [pc, #152]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b24      	ldr	r3, [pc, #144]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	60fb      	str	r3, [r7, #12]
 800205c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4a1f      	ldr	r2, [pc, #124]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002068:	f043 0302 	orr.w	r3, r3, #2
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	4a18      	ldr	r2, [pc, #96]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 8002084:	f043 0304 	orr.w	r3, r3, #4
 8002088:	6313      	str	r3, [r2, #48]	@ 0x30
 800208a:	4b16      	ldr	r3, [pc, #88]	@ (80020e4 <MX_GPIO_Init+0xd4>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002096:	2200      	movs	r2, #0
 8002098:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800209c:	4812      	ldr	r0, [pc, #72]	@ (80020e8 <MX_GPIO_Init+0xd8>)
 800209e:	f001 f8db 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a8:	2301      	movs	r3, #1
 80020aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	4619      	mov	r1, r3
 80020ba:	480b      	ldr	r0, [pc, #44]	@ (80020e8 <MX_GPIO_Init+0xd8>)
 80020bc:	f000 ff48 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020c0:	2320      	movs	r3, #32
 80020c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4804      	ldr	r0, [pc, #16]	@ (80020e8 <MX_GPIO_Init+0xd8>)
 80020d6:	f000 ff3b 	bl	8002f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020da:	bf00      	nop
 80020dc:	3728      	adds	r7, #40	@ 0x28
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020400 	.word	0x40020400

080020ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	ODRIVE_Receive_Callback(huart, &odrive);
 80020f4:	4903      	ldr	r1, [pc, #12]	@ (8002104 <HAL_UART_RxCpltCallback+0x18>)
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f906 	bl	8002308 <ODRIVE_Receive_Callback>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	2000000c 	.word	0x2000000c

08002108 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1){ // check the timer value
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a0e      	ldr	r2, [pc, #56]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <HAL_TIM_PeriodElapsedCallback+0x18>
		IMU_rdy_flag = 1;
 8002118:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
		CTRL_rdy_flag = 1;
	}
	else if (htim == &htim5){
		LED_rdy_flag = 1;
	}
}
 800211e:	e00e      	b.n	800213e <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim == &htim4){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a0c      	ldr	r2, [pc, #48]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d103      	bne.n	8002130 <HAL_TIM_PeriodElapsedCallback+0x28>
		CTRL_rdy_flag = 1;
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
}
 800212e:	e006      	b.n	800213e <HAL_TIM_PeriodElapsedCallback+0x36>
	else if (htim == &htim5){
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d102      	bne.n	800213e <HAL_TIM_PeriodElapsedCallback+0x36>
		LED_rdy_flag = 1;
 8002138:	4b09      	ldr	r3, [pc, #36]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800213a:	2201      	movs	r2, #1
 800213c:	701a      	strb	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	200002d8 	.word	0x200002d8
 8002150:	200004d0 	.word	0x200004d0
 8002154:	20000368 	.word	0x20000368
 8002158:	200004d2 	.word	0x200004d2
 800215c:	200003b0 	.word	0x200003b0
 8002160:	200004d1 	.word	0x200004d1

08002164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002168:	b672      	cpsid	i
}
 800216a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <Error_Handler+0x8>

08002170 <ODRIVE_Reboot>:
uint8_t rxIndex = 0; 				// init index at zero.
uint8_t responseFinishedFlag = 0;
uint8_t receivedData[BUFFER_SIZE];

void ODRIVE_Reboot(odrive_t *p)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b090      	sub	sp, #64	@ 0x40
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	char message[50];
    int len = sprintf(message, "sr\r\n");
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	4909      	ldr	r1, [pc, #36]	@ (80021a4 <ODRIVE_Reboot+0x34>)
 800217e:	4618      	mov	r0, r3
 8002180:	f005 ff82 	bl	8008088 <siprintf>
 8002184:	63f8      	str	r0, [r7, #60]	@ 0x3c
    HAL_UART_Transmit(p->huart, (uint8_t*)message, len, HAL_MAX_DELAY);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6818      	ldr	r0, [r3, #0]
 800218a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800218c:	b29a      	uxth	r2, r3
 800218e:	f107 0108 	add.w	r1, r7, #8
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	f004 f843 	bl	8006220 <HAL_UART_Transmit>
}
 800219a:	bf00      	nop
 800219c:	3740      	adds	r7, #64	@ 0x40
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	0800c638 	.word	0x0800c638

080021a8 <ODRIVE_ClearErrors>:


void ODRIVE_ClearErrors(odrive_t *p)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b090      	sub	sp, #64	@ 0x40
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	char message[50];
    int len = sprintf(message, "sc\r\n");
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	4909      	ldr	r1, [pc, #36]	@ (80021dc <ODRIVE_ClearErrors+0x34>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 ff66 	bl	8008088 <siprintf>
 80021bc:	63f8      	str	r0, [r7, #60]	@ 0x3c
    HAL_UART_Transmit(p->huart, (uint8_t*)message, len, HAL_MAX_DELAY);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	f107 0108 	add.w	r1, r7, #8
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	f004 f827 	bl	8006220 <HAL_UART_Transmit>
}
 80021d2:	bf00      	nop
 80021d4:	3740      	adds	r7, #64	@ 0x40
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	0800c640 	.word	0x0800c640

080021e0 <ODRIVE_SetVelocity>:
    HAL_UART_Transmit(p->huart, (uint8_t*)message, len, HAL_MAX_DELAY);
}


void ODRIVE_SetVelocity(odrive_t *p, int motor_number, float velocity)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b094      	sub	sp, #80	@ 0x50
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	ed87 0a01 	vstr	s0, [r7, #4]
	char message[50];
    int len = sprintf(message, "v %d %.3f\r\n", motor_number, velocity);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fe f9b2 	bl	8000558 <__aeabi_f2d>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	f107 0010 	add.w	r0, r7, #16
 80021fc:	e9cd 2300 	strd	r2, r3, [sp]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	4909      	ldr	r1, [pc, #36]	@ (8002228 <ODRIVE_SetVelocity+0x48>)
 8002204:	f005 ff40 	bl	8008088 <siprintf>
 8002208:	6478      	str	r0, [r7, #68]	@ 0x44
    HAL_UART_Transmit(p->huart, (uint8_t*)message, len, HAL_MAX_DELAY);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002210:	b29a      	uxth	r2, r3
 8002212:	f107 0110 	add.w	r1, r7, #16
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	f004 f801 	bl	8006220 <HAL_UART_Transmit>
}
 800221e:	bf00      	nop
 8002220:	3748      	adds	r7, #72	@ 0x48
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	0800c678 	.word	0x0800c678

0800222c <ODRIVE_GetFeedback>:
    HAL_UART_Transmit(p->huart, (uint8_t*)message, len, HAL_MAX_DELAY);
}


uint8_t* ODRIVE_GetFeedback(odrive_t *p, int motor_number)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b092      	sub	sp, #72	@ 0x48
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
	char message[50];
	int len = sprintf(message, "f %d \r\n", motor_number);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4910      	ldr	r1, [pc, #64]	@ (8002280 <ODRIVE_GetFeedback+0x54>)
 800223e:	4618      	mov	r0, r3
 8002240:	f005 ff22 	bl	8008088 <siprintf>
 8002244:	6478      	str	r0, [r7, #68]	@ 0x44
	HAL_UART_Transmit(p->huart, (uint8_t*)message, len, HAL_MAX_DELAY);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800224c:	b29a      	uxth	r2, r3
 800224e:	f107 010c 	add.w	r1, r7, #12
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	f003 ffe3 	bl	8006220 <HAL_UART_Transmit>

	uint8_t* response = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	643b      	str	r3, [r7, #64]	@ 0x40
	while((response = getReceivedString(p)) == NULL)
 800225e:	e002      	b.n	8002266 <ODRIVE_GetFeedback+0x3a>
	{
	  // wait for a response to be completed
	  HAL_Delay(1);
 8002260:	2001      	movs	r0, #1
 8002262:	f000 fcad 	bl	8002bc0 <HAL_Delay>
	while((response = getReceivedString(p)) == NULL)
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f80c 	bl	8002284 <getReceivedString>
 800226c:	6438      	str	r0, [r7, #64]	@ 0x40
 800226e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f5      	beq.n	8002260 <ODRIVE_GetFeedback+0x34>
	}
	//HAL_UART_Transmit(p->huart, (uint8_t*)response, strlen(response), HAL_MAX_DELAY);
	return response;
 8002274:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8002276:	4618      	mov	r0, r3
 8002278:	3748      	adds	r7, #72	@ 0x48
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	0800c690 	.word	0x0800c690

08002284 <getReceivedString>:
	return response;
}


uint8_t* getReceivedString(odrive_t *p)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
	static uint8_t receivedDataCopy[BUFFER_SIZE]; // create a copied variable that is returned

	if (responseFinishedFlag)
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <getReceivedString+0x38>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00d      	beq.n	80022b0 <getReceivedString+0x2c>
	{
		responseFinishedFlag = 0;
 8002294:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <getReceivedString+0x38>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
		memcpy(receivedDataCopy, receivedData, strlen((char*)receivedData));
 800229a:	4809      	ldr	r0, [pc, #36]	@ (80022c0 <getReceivedString+0x3c>)
 800229c:	f7fd fff0 	bl	8000280 <strlen>
 80022a0:	4603      	mov	r3, r0
 80022a2:	461a      	mov	r2, r3
 80022a4:	4906      	ldr	r1, [pc, #24]	@ (80022c0 <getReceivedString+0x3c>)
 80022a6:	4807      	ldr	r0, [pc, #28]	@ (80022c4 <getReceivedString+0x40>)
 80022a8:	f005 fffd 	bl	80082a6 <memcpy>
		return receivedDataCopy; // return the copied variable
 80022ac:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <getReceivedString+0x40>)
 80022ae:	e000      	b.n	80022b2 <getReceivedString+0x2e>
	}
	else
	{
		return NULL;
 80022b0:	2300      	movs	r3, #0
	}
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	2000050f 	.word	0x2000050f
 80022c0:	20000510 	.word	0x20000510
 80022c4:	20000544 	.word	0x20000544

080022c8 <start_receive_string>:


void start_receive_string(odrive_t *p)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	rxIndex = 0; // reset the buffer index
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <start_receive_string+0x38>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
    memset(rxBuffer, 0, sizeof(rxBuffer)); // Clear the received string buffer
 80022d6:	2232      	movs	r2, #50	@ 0x32
 80022d8:	2100      	movs	r1, #0
 80022da:	480a      	ldr	r0, [pc, #40]	@ (8002304 <start_receive_string+0x3c>)
 80022dc:	f005 ff63 	bl	80081a6 <memset>
    HAL_UART_Receive_IT(p->huart, &rxBuffer[rxIndex], 1); // Start receiving data
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a06      	ldr	r2, [pc, #24]	@ (8002300 <start_receive_string+0x38>)
 80022e6:	7812      	ldrb	r2, [r2, #0]
 80022e8:	4611      	mov	r1, r2
 80022ea:	4a06      	ldr	r2, [pc, #24]	@ (8002304 <start_receive_string+0x3c>)
 80022ec:	4411      	add	r1, r2
 80022ee:	2201      	movs	r2, #1
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 f820 	bl	8006336 <HAL_UART_Receive_IT>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000050e 	.word	0x2000050e
 8002304:	200004dc 	.word	0x200004dc

08002308 <ODRIVE_Receive_Callback>:


void ODRIVE_Receive_Callback (UART_HandleTypeDef *huart, odrive_t *p)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    if (huart == p->huart) {
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d131      	bne.n	8002380 <ODRIVE_Receive_Callback+0x78>
        if (rxBuffer[rxIndex] == '\n')
 800231c:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <ODRIVE_Receive_Callback+0x80>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <ODRIVE_Receive_Callback+0x84>)
 8002324:	5c9b      	ldrb	r3, [r3, r2]
 8002326:	2b0a      	cmp	r3, #10
 8002328:	d119      	bne.n	800235e <ODRIVE_Receive_Callback+0x56>
        {
            // Newline character received, null-terminate the string
            rxBuffer[rxIndex] = '\0';
 800232a:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <ODRIVE_Receive_Callback+0x80>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	4b16      	ldr	r3, [pc, #88]	@ (800238c <ODRIVE_Receive_Callback+0x84>)
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]
        	memset(receivedData, 0, sizeof(receivedData)); // clear the previous data
 8002336:	2232      	movs	r2, #50	@ 0x32
 8002338:	2100      	movs	r1, #0
 800233a:	4815      	ldr	r0, [pc, #84]	@ (8002390 <ODRIVE_Receive_Callback+0x88>)
 800233c:	f005 ff33 	bl	80081a6 <memset>
        	memcpy(receivedData, rxBuffer, rxIndex + 1); // copy the buffer to received
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <ODRIVE_Receive_Callback+0x80>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	461a      	mov	r2, r3
 8002348:	4910      	ldr	r1, [pc, #64]	@ (800238c <ODRIVE_Receive_Callback+0x84>)
 800234a:	4811      	ldr	r0, [pc, #68]	@ (8002390 <ODRIVE_Receive_Callback+0x88>)
 800234c:	f005 ffab 	bl	80082a6 <memcpy>
            responseFinishedFlag = 1;
 8002350:	4b10      	ldr	r3, [pc, #64]	@ (8002394 <ODRIVE_Receive_Callback+0x8c>)
 8002352:	2201      	movs	r2, #1
 8002354:	701a      	strb	r2, [r3, #0]
            start_receive_string(p); // Start receiving the next string
 8002356:	6838      	ldr	r0, [r7, #0]
 8002358:	f7ff ffb6 	bl	80022c8 <start_receive_string>
            return;
 800235c:	e010      	b.n	8002380 <ODRIVE_Receive_Callback+0x78>
        }
        else
        {
        	rxIndex++; //increment position in buffer
 800235e:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <ODRIVE_Receive_Callback+0x80>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b08      	ldr	r3, [pc, #32]	@ (8002388 <ODRIVE_Receive_Callback+0x80>)
 8002368:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(p->huart, &rxBuffer[rxIndex], 1); // Start receiving data
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a06      	ldr	r2, [pc, #24]	@ (8002388 <ODRIVE_Receive_Callback+0x80>)
 8002370:	7812      	ldrb	r2, [r2, #0]
 8002372:	4611      	mov	r1, r2
 8002374:	4a05      	ldr	r2, [pc, #20]	@ (800238c <ODRIVE_Receive_Callback+0x84>)
 8002376:	4411      	add	r1, r2
 8002378:	2201      	movs	r2, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f003 ffdb 	bl	8006336 <HAL_UART_Receive_IT>

    }
}
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	2000050e 	.word	0x2000050e
 800238c:	200004dc 	.word	0x200004dc
 8002390:	20000510 	.word	0x20000510
 8002394:	2000050f 	.word	0x2000050f

08002398 <extractFloats>:

// for use in decoding the feedback message
void extractFloats(uint8_t* message, float* x, float* y) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
    if (!message || !x || !y) {
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00f      	beq.n	80023ca <extractFloats+0x32>
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00c      	beq.n	80023ca <extractFloats+0x32>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <extractFloats+0x32>
    // sscanf will parse two float values from the message
    // The format string "%f %f" means:
    // - Read a float (x.xxxx), then skip any whitespace
    // - Read another float (y.yyyy)
    // The actual values replace the x's and y's in the message
    int result = sscanf(message, "%f %f", x, y);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	4906      	ldr	r1, [pc, #24]	@ (80023d4 <extractFloats+0x3c>)
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f005 fe83 	bl	80080c8 <siscanf>
 80023c2:	6178      	str	r0, [r7, #20]

    if (result != 2) {
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b02      	cmp	r3, #2
        return -1;  // Failed to extract both floats
    }

    return 0;  // Success
 80023c8:	e000      	b.n	80023cc <extractFloats+0x34>
        return -1;  // Invalid input
 80023ca:	bf00      	nop
}
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	0800c6dc 	.word	0x0800c6dc

080023d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <HAL_MspInit+0x4c>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002424 <HAL_MspInit+0x4c>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_MspInit+0x4c>)
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	603b      	str	r3, [r7, #0]
 80023fe:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_MspInit+0x4c>)
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	4a08      	ldr	r2, [pc, #32]	@ (8002424 <HAL_MspInit+0x4c>)
 8002404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002408:	6413      	str	r3, [r2, #64]	@ 0x40
 800240a:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_MspInit+0x4c>)
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002412:	603b      	str	r3, [r7, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800

08002428 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a19      	ldr	r2, [pc, #100]	@ (80024ac <HAL_I2C_MspInit+0x84>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d12b      	bne.n	80024a2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b18      	ldr	r3, [pc, #96]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002452:	4a17      	ldr	r2, [pc, #92]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	6313      	str	r3, [r2, #48]	@ 0x30
 800245a:	4b15      	ldr	r3, [pc, #84]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002466:	23c0      	movs	r3, #192	@ 0xc0
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246a:	2312      	movs	r3, #18
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002476:	2304      	movs	r3, #4
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	@ (80024b4 <HAL_I2C_MspInit+0x8c>)
 8002482:	f000 fd65 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248e:	4a08      	ldr	r2, [pc, #32]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 8002490:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002494:	6413      	str	r3, [r2, #64]	@ 0x40
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <HAL_I2C_MspInit+0x88>)
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024a2:	bf00      	nop
 80024a4:	3728      	adds	r7, #40	@ 0x28
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40005400 	.word	0x40005400
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40020400 	.word	0x40020400

080024b8 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2a      	ldr	r2, [pc, #168]	@ (8002570 <HAL_TIM_OC_MspInit+0xb8>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d116      	bne.n	80024f8 <HAL_TIM_OC_MspInit+0x40>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
 80024ce:	4b29      	ldr	r3, [pc, #164]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d2:	4a28      	ldr	r2, [pc, #160]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024da:	4b26      	ldr	r3, [pc, #152]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024e6:	2200      	movs	r2, #0
 80024e8:	2100      	movs	r1, #0
 80024ea:	2019      	movs	r0, #25
 80024ec:	f000 fc67 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024f0:	2019      	movs	r0, #25
 80024f2:	f000 fc80 	bl	8002df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80024f6:	e036      	b.n	8002566 <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM4)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002578 <HAL_TIM_OC_MspInit+0xc0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d116      	bne.n	8002530 <HAL_TIM_OC_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	4b1b      	ldr	r3, [pc, #108]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4a1a      	ldr	r2, [pc, #104]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 800250c:	f043 0304 	orr.w	r3, r3, #4
 8002510:	6413      	str	r3, [r2, #64]	@ 0x40
 8002512:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	613b      	str	r3, [r7, #16]
 800251c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	201e      	movs	r0, #30
 8002524:	f000 fc4b 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002528:	201e      	movs	r0, #30
 800252a:	f000 fc64 	bl	8002df6 <HAL_NVIC_EnableIRQ>
}
 800252e:	e01a      	b.n	8002566 <HAL_TIM_OC_MspInit+0xae>
  else if(htim_oc->Instance==TIM5)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a11      	ldr	r2, [pc, #68]	@ (800257c <HAL_TIM_OC_MspInit+0xc4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d115      	bne.n	8002566 <HAL_TIM_OC_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	4a0c      	ldr	r2, [pc, #48]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_TIM_OC_MspInit+0xbc>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	2032      	movs	r0, #50	@ 0x32
 800255c:	f000 fc2f 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002560:	2032      	movs	r0, #50	@ 0x32
 8002562:	f000 fc48 	bl	8002df6 <HAL_NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40010000 	.word	0x40010000
 8002574:	40023800 	.word	0x40023800
 8002578:	40000800 	.word	0x40000800
 800257c:	40000c00 	.word	0x40000c00

08002580 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0b      	ldr	r2, [pc, #44]	@ (80025bc <HAL_TIM_PWM_MspInit+0x3c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d10d      	bne.n	80025ae <HAL_TIM_PWM_MspInit+0x2e>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_TIM_PWM_MspInit+0x40>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	4a09      	ldr	r2, [pc, #36]	@ (80025c0 <HAL_TIM_PWM_MspInit+0x40>)
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025a2:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <HAL_TIM_PWM_MspInit+0x40>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40000400 	.word	0x40000400
 80025c0:	40023800 	.word	0x40023800

080025c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b090      	sub	sp, #64	@ 0x40
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025dc:	f107 0314 	add.w	r3, r7, #20
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	60da      	str	r2, [r3, #12]
 80025ea:	611a      	str	r2, [r3, #16]
 80025ec:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM11)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a21      	ldr	r2, [pc, #132]	@ (8002678 <HAL_TIM_Base_MspInit+0xb4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d13b      	bne.n	8002670 <HAL_TIM_Base_MspInit+0xac>

  /* USER CODE END TIM11_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80025f8:	2302      	movs	r3, #2
 80025fa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80025fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002600:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002602:	f107 0314 	add.w	r3, r7, #20
 8002606:	4618      	mov	r0, r3
 8002608:	f002 fc44 	bl	8004e94 <HAL_RCCEx_PeriphCLKConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_TIM_Base_MspInit+0x52>
    {
      Error_Handler();
 8002612:	f7ff fda7 	bl	8002164 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	4b18      	ldr	r3, [pc, #96]	@ (800267c <HAL_TIM_Base_MspInit+0xb8>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a17      	ldr	r2, [pc, #92]	@ (800267c <HAL_TIM_Base_MspInit+0xb8>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <HAL_TIM_Base_MspInit+0xb8>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	4b11      	ldr	r3, [pc, #68]	@ (800267c <HAL_TIM_Base_MspInit+0xb8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a10      	ldr	r2, [pc, #64]	@ (800267c <HAL_TIM_Base_MspInit+0xb8>)
 800263c:	f043 0302 	orr.w	r3, r3, #2
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_TIM_Base_MspInit+0xb8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800264e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002660:	2303      	movs	r3, #3
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002664:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002668:	4619      	mov	r1, r3
 800266a:	4805      	ldr	r0, [pc, #20]	@ (8002680 <HAL_TIM_Base_MspInit+0xbc>)
 800266c:	f000 fc70 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002670:	bf00      	nop
 8002672:	3740      	adds	r7, #64	@ 0x40
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40014800 	.word	0x40014800
 800267c:	40023800 	.word	0x40023800
 8002680:	40020400 	.word	0x40020400

08002684 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a12      	ldr	r2, [pc, #72]	@ (80026ec <HAL_TIM_MspPostInit+0x68>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d11d      	bne.n	80026e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	4b11      	ldr	r3, [pc, #68]	@ (80026f0 <HAL_TIM_MspPostInit+0x6c>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a10      	ldr	r2, [pc, #64]	@ (80026f0 <HAL_TIM_MspPostInit+0x6c>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <HAL_TIM_MspPostInit+0x6c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d2:	2302      	movs	r3, #2
 80026d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 030c 	add.w	r3, r7, #12
 80026da:	4619      	mov	r1, r3
 80026dc:	4805      	ldr	r0, [pc, #20]	@ (80026f4 <HAL_TIM_MspPostInit+0x70>)
 80026de:	f000 fc37 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026e2:	bf00      	nop
 80026e4:	3720      	adds	r7, #32
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40000400 	.word	0x40000400
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40020000 	.word	0x40020000

080026f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	@ 0x30
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002700:	f107 031c 	add.w	r3, r7, #28
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	609a      	str	r2, [r3, #8]
 800270c:	60da      	str	r2, [r3, #12]
 800270e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a3a      	ldr	r2, [pc, #232]	@ (8002800 <HAL_UART_MspInit+0x108>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d134      	bne.n	8002784 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	4b39      	ldr	r3, [pc, #228]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	4a38      	ldr	r2, [pc, #224]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 8002724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002728:	6413      	str	r3, [r2, #64]	@ 0x40
 800272a:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 800272c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	4b32      	ldr	r3, [pc, #200]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a31      	ldr	r2, [pc, #196]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b2f      	ldr	r3, [pc, #188]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002752:	230c      	movs	r3, #12
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275a:	2300      	movs	r3, #0
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275e:	2303      	movs	r3, #3
 8002760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002762:	2307      	movs	r3, #7
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	4826      	ldr	r0, [pc, #152]	@ (8002808 <HAL_UART_MspInit+0x110>)
 800276e:	f000 fbef 	bl	8002f50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	2026      	movs	r0, #38	@ 0x26
 8002778:	f000 fb21 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800277c:	2026      	movs	r0, #38	@ 0x26
 800277e:	f000 fb3a 	bl	8002df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002782:	e038      	b.n	80027f6 <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a20      	ldr	r2, [pc, #128]	@ (800280c <HAL_UART_MspInit+0x114>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d133      	bne.n	80027f6 <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	4b1c      	ldr	r3, [pc, #112]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002796:	4a1b      	ldr	r2, [pc, #108]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 8002798:	f043 0320 	orr.w	r3, r3, #32
 800279c:	6453      	str	r3, [r2, #68]	@ 0x44
 800279e:	4b19      	ldr	r3, [pc, #100]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a2:	f003 0320 	and.w	r3, r3, #32
 80027a6:	613b      	str	r3, [r7, #16]
 80027a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	4b15      	ldr	r3, [pc, #84]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b2:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 80027b4:	f043 0304 	orr.w	r3, r3, #4
 80027b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ba:	4b12      	ldr	r3, [pc, #72]	@ (8002804 <HAL_UART_MspInit+0x10c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027c6:	23c0      	movs	r3, #192	@ 0xc0
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80027d6:	2308      	movs	r3, #8
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4619      	mov	r1, r3
 80027e0:	480b      	ldr	r0, [pc, #44]	@ (8002810 <HAL_UART_MspInit+0x118>)
 80027e2:	f000 fbb5 	bl	8002f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2100      	movs	r1, #0
 80027ea:	2047      	movs	r0, #71	@ 0x47
 80027ec:	f000 fae7 	bl	8002dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80027f0:	2047      	movs	r0, #71	@ 0x47
 80027f2:	f000 fb00 	bl	8002df6 <HAL_NVIC_EnableIRQ>
}
 80027f6:	bf00      	nop
 80027f8:	3730      	adds	r7, #48	@ 0x30
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40004400 	.word	0x40004400
 8002804:	40023800 	.word	0x40023800
 8002808:	40020000 	.word	0x40020000
 800280c:	40011400 	.word	0x40011400
 8002810:	40020800 	.word	0x40020800

08002814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002818:	bf00      	nop
 800281a:	e7fd      	b.n	8002818 <NMI_Handler+0x4>

0800281c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002820:	bf00      	nop
 8002822:	e7fd      	b.n	8002820 <HardFault_Handler+0x4>

08002824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <MemManage_Handler+0x4>

0800282c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <BusFault_Handler+0x4>

08002834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <UsageFault_Handler+0x4>

0800283c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800284a:	b480      	push	{r7}
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800286a:	f000 f989 	bl	8002b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002878:	4802      	ldr	r0, [pc, #8]	@ (8002884 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800287a:	f002 fda4 	bl	80053c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	200002d8 	.word	0x200002d8

08002888 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800288c:	4802      	ldr	r0, [pc, #8]	@ (8002898 <TIM4_IRQHandler+0x10>)
 800288e:	f002 fd9a 	bl	80053c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000368 	.word	0x20000368

0800289c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80028a0:	4802      	ldr	r0, [pc, #8]	@ (80028ac <USART2_IRQHandler+0x10>)
 80028a2:	f003 fd6d 	bl	8006380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000440 	.word	0x20000440

080028b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80028b4:	4802      	ldr	r0, [pc, #8]	@ (80028c0 <TIM5_IRQHandler+0x10>)
 80028b6:	f002 fd86 	bl	80053c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200003b0 	.word	0x200003b0

080028c4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80028c8:	4802      	ldr	r0, [pc, #8]	@ (80028d4 <USART6_IRQHandler+0x10>)
 80028ca:	f003 fd59 	bl	8006380 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20000488 	.word	0x20000488

080028d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return 1;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <_kill>:

int _kill(int pid, int sig)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028f2:	f005 fcab 	bl	800824c <__errno>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2216      	movs	r2, #22
 80028fa:	601a      	str	r2, [r3, #0]
  return -1;
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <_exit>:

void _exit (int status)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002910:	f04f 31ff 	mov.w	r1, #4294967295
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ffe7 	bl	80028e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800291a:	bf00      	nop
 800291c:	e7fd      	b.n	800291a <_exit+0x12>

0800291e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e00a      	b.n	8002946 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002930:	f3af 8000 	nop.w
 8002934:	4601      	mov	r1, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	60ba      	str	r2, [r7, #8]
 800293c:	b2ca      	uxtb	r2, r1
 800293e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3301      	adds	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	dbf0      	blt.n	8002930 <_read+0x12>
  }

  return len;
 800294e:	687b      	ldr	r3, [r7, #4]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	e009      	b.n	800297e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	60ba      	str	r2, [r7, #8]
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3301      	adds	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	dbf1      	blt.n	800296a <_write+0x12>
  }
  return len;
 8002986:	687b      	ldr	r3, [r7, #4]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_close>:

int _close(int file)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029b8:	605a      	str	r2, [r3, #4]
  return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_isatty>:

int _isatty(int file)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029d0:	2301      	movs	r3, #1
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029de:	b480      	push	{r7}
 80029e0:	b085      	sub	sp, #20
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a00:	4a14      	ldr	r2, [pc, #80]	@ (8002a54 <_sbrk+0x5c>)
 8002a02:	4b15      	ldr	r3, [pc, #84]	@ (8002a58 <_sbrk+0x60>)
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a0c:	4b13      	ldr	r3, [pc, #76]	@ (8002a5c <_sbrk+0x64>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d102      	bne.n	8002a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a14:	4b11      	ldr	r3, [pc, #68]	@ (8002a5c <_sbrk+0x64>)
 8002a16:	4a12      	ldr	r2, [pc, #72]	@ (8002a60 <_sbrk+0x68>)
 8002a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1a:	4b10      	ldr	r3, [pc, #64]	@ (8002a5c <_sbrk+0x64>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4413      	add	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d207      	bcs.n	8002a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a28:	f005 fc10 	bl	800824c <__errno>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	220c      	movs	r2, #12
 8002a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
 8002a36:	e009      	b.n	8002a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a38:	4b08      	ldr	r3, [pc, #32]	@ (8002a5c <_sbrk+0x64>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a3e:	4b07      	ldr	r3, [pc, #28]	@ (8002a5c <_sbrk+0x64>)
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	4a05      	ldr	r2, [pc, #20]	@ (8002a5c <_sbrk+0x64>)
 8002a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3718      	adds	r7, #24
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20020000 	.word	0x20020000
 8002a58:	00000400 	.word	0x00000400
 8002a5c:	20000578 	.word	0x20000578
 8002a60:	200006d0 	.word	0x200006d0

08002a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <SystemInit+0x20>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	4a05      	ldr	r2, [pc, #20]	@ (8002a84 <SystemInit+0x20>)
 8002a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ac0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a8c:	f7ff ffea 	bl	8002a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a90:	480c      	ldr	r0, [pc, #48]	@ (8002ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a92:	490d      	ldr	r1, [pc, #52]	@ (8002ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a98:	e002      	b.n	8002aa0 <LoopCopyDataInit>

08002a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a9e:	3304      	adds	r3, #4

08002aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aa4:	d3f9      	bcc.n	8002a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002aac:	e001      	b.n	8002ab2 <LoopFillZerobss>

08002aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab0:	3204      	adds	r2, #4

08002ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ab4:	d3fb      	bcc.n	8002aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ab6:	f005 fbcf 	bl	8008258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aba:	f7fe ff11 	bl	80018e0 <main>
  bx  lr    
 8002abe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ac8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002acc:	0800cb9c 	.word	0x0800cb9c
  ldr r2, =_sbss
 8002ad0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002ad4:	200006cc 	.word	0x200006cc

08002ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ad8:	e7fe      	b.n	8002ad8 <ADC_IRQHandler>
	...

08002adc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <HAL_Init+0x40>)
 8002ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aec:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <HAL_Init+0x40>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <HAL_Init+0x40>)
 8002af2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002af6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_Init+0x40>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a07      	ldr	r2, [pc, #28]	@ (8002b1c <HAL_Init+0x40>)
 8002afe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b04:	2003      	movs	r0, #3
 8002b06:	f000 f94f 	bl	8002da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b0a:	200f      	movs	r0, #15
 8002b0c:	f000 f808 	bl	8002b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b10:	f7ff fc62 	bl	80023d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00

08002b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b28:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <HAL_InitTick+0x54>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <HAL_InitTick+0x58>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f967 	bl	8002e12 <HAL_SYSTICK_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00e      	b.n	8002b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b0f      	cmp	r3, #15
 8002b52:	d80a      	bhi.n	8002b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b54:	2200      	movs	r2, #0
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295
 8002b5c:	f000 f92f 	bl	8002dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b60:	4a06      	ldr	r2, [pc, #24]	@ (8002b7c <HAL_InitTick+0x5c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e000      	b.n	8002b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000001c 	.word	0x2000001c
 8002b78:	20000024 	.word	0x20000024
 8002b7c:	20000020 	.word	0x20000020

08002b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <HAL_IncTick+0x20>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_IncTick+0x24>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a04      	ldr	r2, [pc, #16]	@ (8002ba4 <HAL_IncTick+0x24>)
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000024 	.word	0x20000024
 8002ba4:	2000057c 	.word	0x2000057c

08002ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bac:	4b03      	ldr	r3, [pc, #12]	@ (8002bbc <HAL_GetTick+0x14>)
 8002bae:	681b      	ldr	r3, [r3, #0]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	2000057c 	.word	0x2000057c

08002bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bc8:	f7ff ffee 	bl	8002ba8 <HAL_GetTick>
 8002bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d005      	beq.n	8002be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bda:	4b0a      	ldr	r3, [pc, #40]	@ (8002c04 <HAL_Delay+0x44>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4413      	add	r3, r2
 8002be4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002be6:	bf00      	nop
 8002be8:	f7ff ffde 	bl	8002ba8 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d8f7      	bhi.n	8002be8 <HAL_Delay+0x28>
  {
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	20000024 	.word	0x20000024

08002c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c18:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c24:	4013      	ands	r3, r2
 8002c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c3a:	4a04      	ldr	r2, [pc, #16]	@ (8002c4c <__NVIC_SetPriorityGrouping+0x44>)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	60d3      	str	r3, [r2, #12]
}
 8002c40:	bf00      	nop
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <__NVIC_GetPriorityGrouping+0x18>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	f003 0307 	and.w	r3, r3, #7
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db0b      	blt.n	8002c96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	f003 021f 	and.w	r2, r3, #31
 8002c84:	4907      	ldr	r1, [pc, #28]	@ (8002ca4 <__NVIC_EnableIRQ+0x38>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	095b      	lsrs	r3, r3, #5
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c96:	bf00      	nop
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000e100 	.word	0xe000e100

08002ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	4603      	mov	r3, r0
 8002cb0:	6039      	str	r1, [r7, #0]
 8002cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	db0a      	blt.n	8002cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	490c      	ldr	r1, [pc, #48]	@ (8002cf4 <__NVIC_SetPriority+0x4c>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	0112      	lsls	r2, r2, #4
 8002cc8:	b2d2      	uxtb	r2, r2
 8002cca:	440b      	add	r3, r1
 8002ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cd0:	e00a      	b.n	8002ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4908      	ldr	r1, [pc, #32]	@ (8002cf8 <__NVIC_SetPriority+0x50>)
 8002cd8:	79fb      	ldrb	r3, [r7, #7]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	3b04      	subs	r3, #4
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	761a      	strb	r2, [r3, #24]
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000e100 	.word	0xe000e100
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	@ 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f1c3 0307 	rsb	r3, r3, #7
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	bf28      	it	cs
 8002d1a:	2304      	movcs	r3, #4
 8002d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3304      	adds	r3, #4
 8002d22:	2b06      	cmp	r3, #6
 8002d24:	d902      	bls.n	8002d2c <NVIC_EncodePriority+0x30>
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	3b03      	subs	r3, #3
 8002d2a:	e000      	b.n	8002d2e <NVIC_EncodePriority+0x32>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d30:	f04f 32ff 	mov.w	r2, #4294967295
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43da      	mvns	r2, r3
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	401a      	ands	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d44:	f04f 31ff 	mov.w	r1, #4294967295
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4e:	43d9      	mvns	r1, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d54:	4313      	orrs	r3, r2
         );
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3724      	adds	r7, #36	@ 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d74:	d301      	bcc.n	8002d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d76:	2301      	movs	r3, #1
 8002d78:	e00f      	b.n	8002d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002da4 <SysTick_Config+0x40>)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d82:	210f      	movs	r1, #15
 8002d84:	f04f 30ff 	mov.w	r0, #4294967295
 8002d88:	f7ff ff8e 	bl	8002ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d8c:	4b05      	ldr	r3, [pc, #20]	@ (8002da4 <SysTick_Config+0x40>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <SysTick_Config+0x40>)
 8002d94:	2207      	movs	r2, #7
 8002d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000e010 	.word	0xe000e010

08002da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff29 	bl	8002c08 <__NVIC_SetPriorityGrouping>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b086      	sub	sp, #24
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	60b9      	str	r1, [r7, #8]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dd0:	f7ff ff3e 	bl	8002c50 <__NVIC_GetPriorityGrouping>
 8002dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	6978      	ldr	r0, [r7, #20]
 8002ddc:	f7ff ff8e 	bl	8002cfc <NVIC_EncodePriority>
 8002de0:	4602      	mov	r2, r0
 8002de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff5d 	bl	8002ca8 <__NVIC_SetPriority>
}
 8002dee:	bf00      	nop
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7ff ff31 	bl	8002c6c <__NVIC_EnableIRQ>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffa2 	bl	8002d64 <SysTick_Config>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7ff feb6 	bl	8002ba8 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d008      	beq.n	8002e5c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2280      	movs	r2, #128	@ 0x80
 8002e4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e052      	b.n	8002f02 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0216 	bic.w	r2, r2, #22
 8002e6a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e7a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d103      	bne.n	8002e8c <HAL_DMA_Abort+0x62>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0208 	bic.w	r2, r2, #8
 8002e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eac:	e013      	b.n	8002ed6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002eae:	f7ff fe7b 	bl	8002ba8 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d90c      	bls.n	8002ed6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2203      	movs	r2, #3
 8002ec6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e015      	b.n	8002f02 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e4      	bne.n	8002eae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	223f      	movs	r2, #63	@ 0x3f
 8002eea:	409a      	lsls	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d004      	beq.n	8002f28 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2280      	movs	r2, #128	@ 0x80
 8002f22:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e00c      	b.n	8002f42 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2205      	movs	r2, #5
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	@ 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e159      	b.n	8003220 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8148 	bne.w	800321a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d005      	beq.n	8002fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d130      	bne.n	8003004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0201 	and.w	r2, r3, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b03      	cmp	r3, #3
 800300e:	d017      	beq.n	8003040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a2 	beq.w	800321a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b57      	ldr	r3, [pc, #348]	@ (8003238 <HAL_GPIO_Init+0x2e8>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	4a56      	ldr	r2, [pc, #344]	@ (8003238 <HAL_GPIO_Init+0x2e8>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80030e6:	4b54      	ldr	r3, [pc, #336]	@ (8003238 <HAL_GPIO_Init+0x2e8>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f2:	4a52      	ldr	r2, [pc, #328]	@ (800323c <HAL_GPIO_Init+0x2ec>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a49      	ldr	r2, [pc, #292]	@ (8003240 <HAL_GPIO_Init+0x2f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <HAL_GPIO_Init+0x202>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a48      	ldr	r2, [pc, #288]	@ (8003244 <HAL_GPIO_Init+0x2f4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x1fe>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a47      	ldr	r2, [pc, #284]	@ (8003248 <HAL_GPIO_Init+0x2f8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x1fa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a46      	ldr	r2, [pc, #280]	@ (800324c <HAL_GPIO_Init+0x2fc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x1f6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a45      	ldr	r2, [pc, #276]	@ (8003250 <HAL_GPIO_Init+0x300>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x1f2>
 800313e:	2304      	movs	r3, #4
 8003140:	e008      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003142:	2307      	movs	r3, #7
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003146:	2303      	movs	r3, #3
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x204>
 800314a:	2302      	movs	r3, #2
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x204>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003152:	2300      	movs	r3, #0
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003164:	4935      	ldr	r1, [pc, #212]	@ (800323c <HAL_GPIO_Init+0x2ec>)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b38      	ldr	r3, [pc, #224]	@ (8003254 <HAL_GPIO_Init+0x304>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003196:	4a2f      	ldr	r2, [pc, #188]	@ (8003254 <HAL_GPIO_Init+0x304>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319c:	4b2d      	ldr	r3, [pc, #180]	@ (8003254 <HAL_GPIO_Init+0x304>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c0:	4a24      	ldr	r2, [pc, #144]	@ (8003254 <HAL_GPIO_Init+0x304>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031c6:	4b23      	ldr	r3, [pc, #140]	@ (8003254 <HAL_GPIO_Init+0x304>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003254 <HAL_GPIO_Init+0x304>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f0:	4b18      	ldr	r3, [pc, #96]	@ (8003254 <HAL_GPIO_Init+0x304>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003214:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <HAL_GPIO_Init+0x304>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	f67f aea2 	bls.w	8002f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3724      	adds	r7, #36	@ 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40013c00 	.word	0x40013c00

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800329c:	887a      	ldrh	r2, [r7, #2]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	041a      	lsls	r2, r3, #16
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43d9      	mvns	r1, r3
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	400b      	ands	r3, r1
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	619a      	str	r2, [r3, #24]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e12b      	b.n	800352a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff f89e 	bl	8002428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	@ 0x24
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003324:	f001 fd8e 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8003328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	4a81      	ldr	r2, [pc, #516]	@ (8003534 <HAL_I2C_Init+0x274>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d807      	bhi.n	8003344 <HAL_I2C_Init+0x84>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4a80      	ldr	r2, [pc, #512]	@ (8003538 <HAL_I2C_Init+0x278>)
 8003338:	4293      	cmp	r3, r2
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e006      	b.n	8003352 <HAL_I2C_Init+0x92>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a7d      	ldr	r2, [pc, #500]	@ (800353c <HAL_I2C_Init+0x27c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	bf94      	ite	ls
 800334c:	2301      	movls	r3, #1
 800334e:	2300      	movhi	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e0e7      	b.n	800352a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a78      	ldr	r2, [pc, #480]	@ (8003540 <HAL_I2C_Init+0x280>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	0c9b      	lsrs	r3, r3, #18
 8003364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	430a      	orrs	r2, r1
 8003378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a6a      	ldr	r2, [pc, #424]	@ (8003534 <HAL_I2C_Init+0x274>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d802      	bhi.n	8003394 <HAL_I2C_Init+0xd4>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	3301      	adds	r3, #1
 8003392:	e009      	b.n	80033a8 <HAL_I2C_Init+0xe8>
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	4a69      	ldr	r2, [pc, #420]	@ (8003544 <HAL_I2C_Init+0x284>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	099b      	lsrs	r3, r3, #6
 80033a6:	3301      	adds	r3, #1
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	430b      	orrs	r3, r1
 80033ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	495c      	ldr	r1, [pc, #368]	@ (8003534 <HAL_I2C_Init+0x274>)
 80033c4:	428b      	cmp	r3, r1
 80033c6:	d819      	bhi.n	80033fc <HAL_I2C_Init+0x13c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e59      	subs	r1, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033dc:	400b      	ands	r3, r1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_I2C_Init+0x138>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1e59      	subs	r1, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f6:	e051      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e04f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d111      	bne.n	8003428 <HAL_I2C_Init+0x168>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1e58      	subs	r0, r3, #1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	440b      	add	r3, r1
 8003412:	fbb0 f3f3 	udiv	r3, r0, r3
 8003416:	3301      	adds	r3, #1
 8003418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf0c      	ite	eq
 8003420:	2301      	moveq	r3, #1
 8003422:	2300      	movne	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	e012      	b.n	800344e <HAL_I2C_Init+0x18e>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1e58      	subs	r0, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	0099      	lsls	r1, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Init+0x196>
 8003452:	2301      	movs	r3, #1
 8003454:	e022      	b.n	800349c <HAL_I2C_Init+0x1dc>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <HAL_I2C_Init+0x1bc>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1e58      	subs	r0, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6859      	ldr	r1, [r3, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	440b      	add	r3, r1
 800346c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003470:	3301      	adds	r3, #1
 8003472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003476:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800347a:	e00f      	b.n	800349c <HAL_I2C_Init+0x1dc>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e58      	subs	r0, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	0099      	lsls	r1, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003492:	3301      	adds	r3, #1
 8003494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003498:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800349c:	6879      	ldr	r1, [r7, #4]
 800349e:	6809      	ldr	r1, [r1, #0]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69da      	ldr	r2, [r3, #28]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6911      	ldr	r1, [r2, #16]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	68d2      	ldr	r2, [r2, #12]
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	430b      	orrs	r3, r1
 80034de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0201 	orr.w	r2, r2, #1
 800350a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	000186a0 	.word	0x000186a0
 8003538:	001e847f 	.word	0x001e847f
 800353c:	003d08ff 	.word	0x003d08ff
 8003540:	431bde83 	.word	0x431bde83
 8003544:	10624dd3 	.word	0x10624dd3

08003548 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	4608      	mov	r0, r1
 8003552:	4611      	mov	r1, r2
 8003554:	461a      	mov	r2, r3
 8003556:	4603      	mov	r3, r0
 8003558:	817b      	strh	r3, [r7, #10]
 800355a:	460b      	mov	r3, r1
 800355c:	813b      	strh	r3, [r7, #8]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003562:	f7ff fb21 	bl	8002ba8 <HAL_GetTick>
 8003566:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b20      	cmp	r3, #32
 8003572:	f040 80d9 	bne.w	8003728 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2319      	movs	r3, #25
 800357c:	2201      	movs	r2, #1
 800357e:	496d      	ldr	r1, [pc, #436]	@ (8003734 <HAL_I2C_Mem_Write+0x1ec>)
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fdb9 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800358c:	2302      	movs	r3, #2
 800358e:	e0cc      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_I2C_Mem_Write+0x56>
 800359a:	2302      	movs	r3, #2
 800359c:	e0c5      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d007      	beq.n	80035c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2221      	movs	r2, #33	@ 0x21
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2240      	movs	r2, #64	@ 0x40
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a3a      	ldr	r2, [r7, #32]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a4d      	ldr	r2, [pc, #308]	@ (8003738 <HAL_I2C_Mem_Write+0x1f0>)
 8003604:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003606:	88f8      	ldrh	r0, [r7, #6]
 8003608:	893a      	ldrh	r2, [r7, #8]
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	9301      	str	r3, [sp, #4]
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	4603      	mov	r3, r0
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fbf0 	bl	8003dfc <I2C_RequestMemoryWrite>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d052      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e081      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003626:	697a      	ldr	r2, [r7, #20]
 8003628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fe7e 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00d      	beq.n	8003652 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	2b04      	cmp	r3, #4
 800363c:	d107      	bne.n	800364e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800364c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e06b      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003678:	b29b      	uxth	r3, r3
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d11b      	bne.n	80036c8 <HAL_I2C_Mem_Write+0x180>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d017      	beq.n	80036c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1aa      	bne.n	8003626 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 fe71 	bl	80043bc <I2C_WaitOnBTFFlagUntilTimeout>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00d      	beq.n	80036fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d107      	bne.n	80036f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e016      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800370a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003724:	2300      	movs	r3, #0
 8003726:	e000      	b.n	800372a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
  }
}
 800372a:	4618      	mov	r0, r3
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	00100002 	.word	0x00100002
 8003738:	ffff0000 	.word	0xffff0000

0800373c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	@ 0x30
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	460b      	mov	r3, r1
 8003750:	813b      	strh	r3, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003756:	f7ff fa27 	bl	8002ba8 <HAL_GetTick>
 800375a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 8214 	bne.w	8003b92 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2319      	movs	r3, #25
 8003770:	2201      	movs	r2, #1
 8003772:	497b      	ldr	r1, [pc, #492]	@ (8003960 <HAL_I2C_Mem_Read+0x224>)
 8003774:	68f8      	ldr	r0, [r7, #12]
 8003776:	f000 fcbf 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
 8003782:	e207      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Mem_Read+0x56>
 800378e:	2302      	movs	r3, #2
 8003790:	e200      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2222      	movs	r2, #34	@ 0x22
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2240      	movs	r2, #64	@ 0x40
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003964 <HAL_I2C_Mem_Read+0x228>)
 80037f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037fa:	88f8      	ldrh	r0, [r7, #6]
 80037fc:	893a      	ldrh	r2, [r7, #8]
 80037fe:	8979      	ldrh	r1, [r7, #10]
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	4603      	mov	r3, r0
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 fb8c 	bl	8003f28 <I2C_RequestMemoryRead>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e1bc      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d113      	bne.n	800384a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	623b      	str	r3, [r7, #32]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	623b      	str	r3, [r7, #32]
 8003836:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	e190      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384e:	2b01      	cmp	r3, #1
 8003850:	d11b      	bne.n	800388a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003862:	2300      	movs	r3, #0
 8003864:	61fb      	str	r3, [r7, #28]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	61fb      	str	r3, [r7, #28]
 8003876:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e170      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388e:	2b02      	cmp	r3, #2
 8003890:	d11b      	bne.n	80038ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	61bb      	str	r3, [r7, #24]
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	e150      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038e0:	e144      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	f200 80f1 	bhi.w	8003ace <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d123      	bne.n	800393c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fda7 	bl	800444c <I2C_WaitOnRXNEFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e145      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	691a      	ldr	r2, [r3, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003912:	b2d2      	uxtb	r2, r2
 8003914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003930:	b29b      	uxth	r3, r3
 8003932:	3b01      	subs	r3, #1
 8003934:	b29a      	uxth	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800393a:	e117      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003940:	2b02      	cmp	r3, #2
 8003942:	d14e      	bne.n	80039e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394a:	2200      	movs	r2, #0
 800394c:	4906      	ldr	r1, [pc, #24]	@ (8003968 <HAL_I2C_Mem_Read+0x22c>)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fbd2 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d008      	beq.n	800396c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e11a      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
 800395e:	bf00      	nop
 8003960:	00100002 	.word	0x00100002
 8003964:	ffff0000 	.word	0xffff0000
 8003968:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800397a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691a      	ldr	r2, [r3, #16]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039e0:	e0c4      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	2200      	movs	r2, #0
 80039ea:	496c      	ldr	r1, [pc, #432]	@ (8003b9c <HAL_I2C_Mem_Read+0x460>)
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fb83 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0cb      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a44:	2200      	movs	r2, #0
 8003a46:	4955      	ldr	r1, [pc, #340]	@ (8003b9c <HAL_I2C_Mem_Read+0x460>)
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fb55 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e09d      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa4:	b2d2      	uxtb	r2, r2
 8003aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003acc:	e04e      	b.n	8003b6c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fcba 	bl	800444c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e058      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d124      	bne.n	8003b6c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d107      	bne.n	8003b3a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691a      	ldr	r2, [r3, #16]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	1c5a      	adds	r2, r3, #1
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b56:	3b01      	subs	r3, #1
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f aeb6 	bne.w	80038e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e000      	b.n	8003b94 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3728      	adds	r7, #40	@ 0x28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	00010004 	.word	0x00010004

08003ba0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08a      	sub	sp, #40	@ 0x28
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	460b      	mov	r3, r1
 8003bae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7fe fffa 	bl	8002ba8 <HAL_GetTick>
 8003bb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	f040 8111 	bne.w	8003dea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	2319      	movs	r3, #25
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4988      	ldr	r1, [pc, #544]	@ (8003df4 <HAL_I2C_IsDeviceReady+0x254>)
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 fa90 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
 8003be0:	e104      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2C_IsDeviceReady+0x50>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0fd      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x24c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d007      	beq.n	8003c16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2224      	movs	r2, #36	@ 0x24
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4a70      	ldr	r2, [pc, #448]	@ (8003df8 <HAL_I2C_IsDeviceReady+0x258>)
 8003c38:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa4e 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00d      	beq.n	8003c7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c70:	d103      	bne.n	8003c7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c78:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0b6      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c7e:	897b      	ldrh	r3, [r7, #10]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe ff8b 	bl	8002ba8 <HAL_GetTick>
 8003c92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	bf0c      	ite	eq
 8003ca2:	2301      	moveq	r3, #1
 8003ca4:	2300      	movne	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cc2:	e025      	b.n	8003d10 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cc4:	f7fe ff70 	bl	8002ba8 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d302      	bcc.n	8003cda <HAL_I2C_IsDeviceReady+0x13a>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d103      	bne.n	8003ce2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	22a0      	movs	r2, #160	@ 0xa0
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	695b      	ldr	r3, [r3, #20]
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	bf0c      	ite	eq
 8003cf0:	2301      	moveq	r3, #1
 8003cf2:	2300      	movne	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d1a:	d005      	beq.n	8003d28 <HAL_I2C_IsDeviceReady+0x188>
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <HAL_I2C_IsDeviceReady+0x188>
 8003d22:	7dbb      	ldrb	r3, [r7, #22]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0cd      	beq.n	8003cc4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d129      	bne.n	8003d92 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	613b      	str	r3, [r7, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	613b      	str	r3, [r7, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	2319      	movs	r3, #25
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4921      	ldr	r1, [pc, #132]	@ (8003df4 <HAL_I2C_IsDeviceReady+0x254>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f9c2 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e036      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e02c      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003daa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2319      	movs	r3, #25
 8003db2:	2201      	movs	r2, #1
 8003db4:	490f      	ldr	r1, [pc, #60]	@ (8003df4 <HAL_I2C_IsDeviceReady+0x254>)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f99e 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e012      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	f4ff af32 	bcc.w	8003c3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003dea:	2302      	movs	r3, #2
  }
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	00100002 	.word	0x00100002
 8003df8:	ffff0000 	.word	0xffff0000

08003dfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af02      	add	r7, sp, #8
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	817b      	strh	r3, [r7, #10]
 8003e0e:	460b      	mov	r3, r1
 8003e10:	813b      	strh	r3, [r7, #8]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f960 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e4c:	d103      	bne.n	8003e56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e05f      	b.n	8003f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e5a:	897b      	ldrh	r3, [r7, #10]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	492d      	ldr	r1, [pc, #180]	@ (8003f24 <I2C_RequestMemoryWrite+0x128>)
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 f9bb 	bl	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e04c      	b.n	8003f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	617b      	str	r3, [r7, #20]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e98:	6a39      	ldr	r1, [r7, #32]
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 fa46 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d107      	bne.n	8003ebe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ebc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e02b      	b.n	8003f1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d105      	bne.n	8003ed4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ec8:	893b      	ldrh	r3, [r7, #8]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	e021      	b.n	8003f18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	0a1b      	lsrs	r3, r3, #8
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee4:	6a39      	ldr	r1, [r7, #32]
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f000 fa20 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00d      	beq.n	8003f0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d107      	bne.n	8003f0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e005      	b.n	8003f1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f0e:	893b      	ldrh	r3, [r7, #8]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	00010002 	.word	0x00010002

08003f28 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b088      	sub	sp, #32
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	4608      	mov	r0, r1
 8003f32:	4611      	mov	r1, r2
 8003f34:	461a      	mov	r2, r3
 8003f36:	4603      	mov	r3, r0
 8003f38:	817b      	strh	r3, [r7, #10]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	813b      	strh	r3, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f50:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f60:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f8c2 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f88:	d103      	bne.n	8003f92 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f90:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e0aa      	b.n	80040ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f96:	897b      	ldrh	r3, [r7, #10]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fa4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	6a3a      	ldr	r2, [r7, #32]
 8003faa:	4952      	ldr	r1, [pc, #328]	@ (80040f4 <I2C_RequestMemoryRead+0x1cc>)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f91d 	bl	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e097      	b.n	80040ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	617b      	str	r3, [r7, #20]
 8003fd0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd4:	6a39      	ldr	r1, [r7, #32]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f9a8 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d107      	bne.n	8003ffa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e076      	b.n	80040ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ffe:	88fb      	ldrh	r3, [r7, #6]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004004:	893b      	ldrh	r3, [r7, #8]
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	611a      	str	r2, [r3, #16]
 800400e:	e021      	b.n	8004054 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004010:	893b      	ldrh	r3, [r7, #8]
 8004012:	0a1b      	lsrs	r3, r3, #8
 8004014:	b29b      	uxth	r3, r3
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800401e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004020:	6a39      	ldr	r1, [r7, #32]
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f000 f982 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00d      	beq.n	800404a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	2b04      	cmp	r3, #4
 8004034:	d107      	bne.n	8004046 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004044:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e050      	b.n	80040ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404a:	893b      	ldrh	r3, [r7, #8]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004056:	6a39      	ldr	r1, [r7, #32]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f967 	bl	800432c <I2C_WaitOnTXEFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	2b04      	cmp	r3, #4
 800406a:	d107      	bne.n	800407c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e035      	b.n	80040ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800408e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	2200      	movs	r2, #0
 8004098:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f000 f82b 	bl	80040f8 <I2C_WaitOnFlagUntilTimeout>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00d      	beq.n	80040c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040b6:	d103      	bne.n	80040c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e013      	b.n	80040ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040c4:	897b      	ldrh	r3, [r7, #10]
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	6a3a      	ldr	r2, [r7, #32]
 80040d8:	4906      	ldr	r1, [pc, #24]	@ (80040f4 <I2C_RequestMemoryRead+0x1cc>)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f886 	bl	80041ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	00010002 	.word	0x00010002

080040f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	4613      	mov	r3, r2
 8004106:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004108:	e048      	b.n	800419c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004110:	d044      	beq.n	800419c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004112:	f7fe fd49 	bl	8002ba8 <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d302      	bcc.n	8004128 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d139      	bne.n	800419c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	0c1b      	lsrs	r3, r3, #16
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10d      	bne.n	800414e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	43da      	mvns	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	e00c      	b.n	8004168 <I2C_WaitOnFlagUntilTimeout+0x70>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	43da      	mvns	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf0c      	ite	eq
 8004160:	2301      	moveq	r3, #1
 8004162:	2300      	movne	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	429a      	cmp	r2, r3
 800416c:	d116      	bne.n	800419c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	f043 0220 	orr.w	r2, r3, #32
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e023      	b.n	80041e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	0c1b      	lsrs	r3, r3, #16
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d10d      	bne.n	80041c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	43da      	mvns	r2, r3
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	4013      	ands	r3, r2
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	e00c      	b.n	80041dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	43da      	mvns	r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	4013      	ands	r3, r2
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	bf0c      	ite	eq
 80041d4:	2301      	moveq	r3, #1
 80041d6:	2300      	movne	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d093      	beq.n	800410a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041fa:	e071      	b.n	80042e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420a:	d123      	bne.n	8004254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004224:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	f043 0204 	orr.w	r2, r3, #4
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e067      	b.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425a:	d041      	beq.n	80042e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425c:	f7fe fca4 	bl	8002ba8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d136      	bne.n	80042e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10c      	bne.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	43da      	mvns	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4013      	ands	r3, r2
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	bf14      	ite	ne
 800428e:	2301      	movne	r3, #1
 8004290:	2300      	moveq	r3, #0
 8004292:	b2db      	uxtb	r3, r3
 8004294:	e00b      	b.n	80042ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	43da      	mvns	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	4013      	ands	r3, r2
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d016      	beq.n	80042e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	f043 0220 	orr.w	r2, r3, #32
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e021      	b.n	8004324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	0c1b      	lsrs	r3, r3, #16
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d10c      	bne.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	43da      	mvns	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	4013      	ands	r3, r2
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	bf14      	ite	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	2300      	moveq	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e00b      	b.n	800431c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	43da      	mvns	r2, r3
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4013      	ands	r3, r2
 8004310:	b29b      	uxth	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf14      	ite	ne
 8004316:	2301      	movne	r3, #1
 8004318:	2300      	moveq	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	f47f af6d 	bne.w	80041fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004338:	e034      	b.n	80043a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f8e3 	bl	8004506 <I2C_IsAcknowledgeFailed>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e034      	b.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d028      	beq.n	80043a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe fc29 	bl	8002ba8 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11d      	bne.n	80043a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004372:	2b80      	cmp	r3, #128	@ 0x80
 8004374:	d016      	beq.n	80043a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e007      	b.n	80043b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b80      	cmp	r3, #128	@ 0x80
 80043b0:	d1c3      	bne.n	800433a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043c8:	e034      	b.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f89b 	bl	8004506 <I2C_IsAcknowledgeFailed>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e034      	b.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e0:	d028      	beq.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fe fbe1 	bl	8002ba8 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d11d      	bne.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0304 	and.w	r3, r3, #4
 8004402:	2b04      	cmp	r3, #4
 8004404:	d016      	beq.n	8004434 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	f043 0220 	orr.w	r2, r3, #32
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e007      	b.n	8004444 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0304 	and.w	r3, r3, #4
 800443e:	2b04      	cmp	r3, #4
 8004440:	d1c3      	bne.n	80043ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004458:	e049      	b.n	80044ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d119      	bne.n	800449c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0210 	mvn.w	r2, #16
 8004470:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e030      	b.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449c:	f7fe fb84 	bl	8002ba8 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d302      	bcc.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d11d      	bne.n	80044ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044bc:	2b40      	cmp	r3, #64	@ 0x40
 80044be:	d016      	beq.n	80044ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	f043 0220 	orr.w	r2, r3, #32
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e007      	b.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d1ae      	bne.n	800445a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004506:	b480      	push	{r7}
 8004508:	b083      	sub	sp, #12
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800451c:	d11b      	bne.n	8004556 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004526:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004542:	f043 0204 	orr.w	r2, r3, #4
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e000      	b.n	8004558 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e267      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d075      	beq.n	800466e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004582:	4b88      	ldr	r3, [pc, #544]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b04      	cmp	r3, #4
 800458c:	d00c      	beq.n	80045a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800458e:	4b85      	ldr	r3, [pc, #532]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004596:	2b08      	cmp	r3, #8
 8004598:	d112      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459a:	4b82      	ldr	r3, [pc, #520]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045a6:	d10b      	bne.n	80045c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	4b7e      	ldr	r3, [pc, #504]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d05b      	beq.n	800466c <HAL_RCC_OscConfig+0x108>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d157      	bne.n	800466c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e242      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045c8:	d106      	bne.n	80045d8 <HAL_RCC_OscConfig+0x74>
 80045ca:	4b76      	ldr	r3, [pc, #472]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a75      	ldr	r2, [pc, #468]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e01d      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045e0:	d10c      	bne.n	80045fc <HAL_RCC_OscConfig+0x98>
 80045e2:	4b70      	ldr	r3, [pc, #448]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6f      	ldr	r2, [pc, #444]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	4b6d      	ldr	r3, [pc, #436]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6c      	ldr	r2, [pc, #432]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00b      	b.n	8004614 <HAL_RCC_OscConfig+0xb0>
 80045fc:	4b69      	ldr	r3, [pc, #420]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a68      	ldr	r2, [pc, #416]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b66      	ldr	r3, [pc, #408]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a65      	ldr	r2, [pc, #404]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d013      	beq.n	8004644 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800461c:	f7fe fac4 	bl	8002ba8 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004624:	f7fe fac0 	bl	8002ba8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b64      	cmp	r3, #100	@ 0x64
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e207      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004636:	4b5b      	ldr	r3, [pc, #364]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0f0      	beq.n	8004624 <HAL_RCC_OscConfig+0xc0>
 8004642:	e014      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fab0 	bl	8002ba8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464c:	f7fe faac 	bl	8002ba8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e1f3      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465e:	4b51      	ldr	r3, [pc, #324]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_OscConfig+0xe8>
 800466a:	e000      	b.n	800466e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800466c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d063      	beq.n	8004742 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800467a:	4b4a      	ldr	r3, [pc, #296]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004686:	4b47      	ldr	r3, [pc, #284]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468e:	2b08      	cmp	r3, #8
 8004690:	d11c      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004692:	4b44      	ldr	r3, [pc, #272]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d116      	bne.n	80046cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800469e:	4b41      	ldr	r3, [pc, #260]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d001      	beq.n	80046b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e1c7      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046b6:	4b3b      	ldr	r3, [pc, #236]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4937      	ldr	r1, [pc, #220]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ca:	e03a      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d020      	beq.n	8004716 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d4:	4b34      	ldr	r3, [pc, #208]	@ (80047a8 <HAL_RCC_OscConfig+0x244>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046da:	f7fe fa65 	bl	8002ba8 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e2:	f7fe fa61 	bl	8002ba8 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e1a8      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	4b2b      	ldr	r3, [pc, #172]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004700:	4b28      	ldr	r3, [pc, #160]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	4925      	ldr	r1, [pc, #148]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004710:	4313      	orrs	r3, r2
 8004712:	600b      	str	r3, [r1, #0]
 8004714:	e015      	b.n	8004742 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004716:	4b24      	ldr	r3, [pc, #144]	@ (80047a8 <HAL_RCC_OscConfig+0x244>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471c:	f7fe fa44 	bl	8002ba8 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004724:	f7fe fa40 	bl	8002ba8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e187      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004736:	4b1b      	ldr	r3, [pc, #108]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d036      	beq.n	80047bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d016      	beq.n	8004784 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b15      	ldr	r3, [pc, #84]	@ (80047ac <HAL_RCC_OscConfig+0x248>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fe fa24 	bl	8002ba8 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004764:	f7fe fa20 	bl	8002ba8 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e167      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <HAL_RCC_OscConfig+0x240>)
 8004778:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0x200>
 8004782:	e01b      	b.n	80047bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004784:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <HAL_RCC_OscConfig+0x248>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fe fa0d 	bl	8002ba8 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004790:	e00e      	b.n	80047b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004792:	f7fe fa09 	bl	8002ba8 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d907      	bls.n	80047b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e150      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80047a4:	40023800 	.word	0x40023800
 80047a8:	42470000 	.word	0x42470000
 80047ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047b0:	4b88      	ldr	r3, [pc, #544]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ea      	bne.n	8004792 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 8097 	beq.w	80048f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ce:	4b81      	ldr	r3, [pc, #516]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10f      	bne.n	80047fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b7d      	ldr	r3, [pc, #500]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e2:	4a7c      	ldr	r2, [pc, #496]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80047ea:	4b7a      	ldr	r3, [pc, #488]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047fa:	4b77      	ldr	r3, [pc, #476]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004806:	4b74      	ldr	r3, [pc, #464]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a73      	ldr	r2, [pc, #460]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004812:	f7fe f9c9 	bl	8002ba8 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800481a:	f7fe f9c5 	bl	8002ba8 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e10c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	4b6a      	ldr	r3, [pc, #424]	@ (80049d8 <HAL_RCC_OscConfig+0x474>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x2ea>
 8004840:	4b64      	ldr	r3, [pc, #400]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004844:	4a63      	ldr	r2, [pc, #396]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	6713      	str	r3, [r2, #112]	@ 0x70
 800484c:	e01c      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b05      	cmp	r3, #5
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x30c>
 8004856:	4b5f      	ldr	r3, [pc, #380]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485a:	4a5e      	ldr	r2, [pc, #376]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800485c:	f043 0304 	orr.w	r3, r3, #4
 8004860:	6713      	str	r3, [r2, #112]	@ 0x70
 8004862:	4b5c      	ldr	r3, [pc, #368]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004866:	4a5b      	ldr	r2, [pc, #364]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	6713      	str	r3, [r2, #112]	@ 0x70
 800486e:	e00b      	b.n	8004888 <HAL_RCC_OscConfig+0x324>
 8004870:	4b58      	ldr	r3, [pc, #352]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004874:	4a57      	ldr	r2, [pc, #348]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	6713      	str	r3, [r2, #112]	@ 0x70
 800487c:	4b55      	ldr	r3, [pc, #340]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800487e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004880:	4a54      	ldr	r2, [pc, #336]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004882:	f023 0304 	bic.w	r3, r3, #4
 8004886:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004890:	f7fe f98a 	bl	8002ba8 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	e00a      	b.n	80048ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004898:	f7fe f986 	bl	8002ba8 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e0cb      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ae:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d0ee      	beq.n	8004898 <HAL_RCC_OscConfig+0x334>
 80048ba:	e014      	b.n	80048e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048bc:	f7fe f974 	bl	8002ba8 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c2:	e00a      	b.n	80048da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7fe f970 	bl	8002ba8 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0b5      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048da:	4b3e      	ldr	r3, [pc, #248]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1ee      	bne.n	80048c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d105      	bne.n	80048f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ec:	4b39      	ldr	r3, [pc, #228]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	4a38      	ldr	r2, [pc, #224]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80048f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a1 	beq.w	8004a44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004902:	4b34      	ldr	r3, [pc, #208]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b08      	cmp	r3, #8
 800490c:	d05c      	beq.n	80049c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	2b02      	cmp	r3, #2
 8004914:	d141      	bne.n	800499a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b31      	ldr	r3, [pc, #196]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fe f944 	bl	8002ba8 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004924:	f7fe f940 	bl	8002ba8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e087      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004936:	4b27      	ldr	r3, [pc, #156]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69da      	ldr	r2, [r3, #28]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004950:	019b      	lsls	r3, r3, #6
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	3b01      	subs	r3, #1
 800495c:	041b      	lsls	r3, r3, #16
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	491b      	ldr	r1, [pc, #108]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800496c:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 800496e:	2201      	movs	r2, #1
 8004970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004972:	f7fe f919 	bl	8002ba8 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497a:	f7fe f915 	bl	8002ba8 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e05c      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498c:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x416>
 8004998:	e054      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499a:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <HAL_RCC_OscConfig+0x478>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fe f902 	bl	8002ba8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a8:	f7fe f8fe 	bl	8002ba8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e045      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_RCC_OscConfig+0x470>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0x444>
 80049c6:	e03d      	b.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e038      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
 80049d4:	40023800 	.word	0x40023800
 80049d8:	40007000 	.word	0x40007000
 80049dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a50 <HAL_RCC_OscConfig+0x4ec>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d028      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d121      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d11a      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a10:	4013      	ands	r3, r2
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d111      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	085b      	lsrs	r3, r3, #1
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d001      	beq.n	8004a44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800

08004a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0cc      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b68      	ldr	r3, [pc, #416]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d90c      	bls.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b65      	ldr	r3, [pc, #404]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a7e:	4b63      	ldr	r3, [pc, #396]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d001      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0b8      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0302 	and.w	r3, r3, #2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004aa8:	4b59      	ldr	r3, [pc, #356]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a58      	ldr	r2, [pc, #352]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0308 	and.w	r3, r3, #8
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d005      	beq.n	8004acc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac0:	4b53      	ldr	r3, [pc, #332]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	4a52      	ldr	r2, [pc, #328]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004aca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004acc:	4b50      	ldr	r3, [pc, #320]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	494d      	ldr	r1, [pc, #308]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d044      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af2:	4b47      	ldr	r3, [pc, #284]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b3f      	ldr	r3, [pc, #252]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e06f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e067      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b37      	ldr	r3, [pc, #220]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4934      	ldr	r1, [pc, #208]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fe f830 	bl	8002ba8 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fe f82c 	bl	8002ba8 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04f      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2b      	ldr	r3, [pc, #172]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d20c      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b22      	ldr	r3, [pc, #136]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <HAL_RCC_ClockConfig+0x1b8>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d001      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e032      	b.n	8004c02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0304 	and.w	r3, r3, #4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ba8:	4b19      	ldr	r3, [pc, #100]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4916      	ldr	r1, [pc, #88]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bc6:	4b12      	ldr	r3, [pc, #72]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	490e      	ldr	r1, [pc, #56]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bda:	f000 f821 	bl	8004c20 <HAL_RCC_GetSysClockFreq>
 8004bde:	4602      	mov	r2, r0
 8004be0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c10 <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	490a      	ldr	r1, [pc, #40]	@ (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	5ccb      	ldrb	r3, [r1, r3]
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	4a09      	ldr	r2, [pc, #36]	@ (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	@ (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fd ff90 	bl	8002b20 <HAL_InitTick>

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40023c00 	.word	0x40023c00
 8004c10:	40023800 	.word	0x40023800
 8004c14:	0800c6f0 	.word	0x0800c6f0
 8004c18:	2000001c 	.word	0x2000001c
 8004c1c:	20000020 	.word	0x20000020

08004c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c24:	b094      	sub	sp, #80	@ 0x50
 8004c26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c30:	2300      	movs	r3, #0
 8004c32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c38:	4b79      	ldr	r3, [pc, #484]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d00d      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0x40>
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	f200 80e1 	bhi.w	8004e0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0x34>
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d003      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c52:	e0db      	b.n	8004e0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b73      	ldr	r3, [pc, #460]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c56:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004c58:	e0db      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c5a:	4b73      	ldr	r3, [pc, #460]	@ (8004e28 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c5e:	e0d8      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c60:	4b6f      	ldr	r3, [pc, #444]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c68:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d063      	beq.n	8004d3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c76:	4b6a      	ldr	r3, [pc, #424]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	099b      	lsrs	r3, r3, #6
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004c92:	4622      	mov	r2, r4
 8004c94:	462b      	mov	r3, r5
 8004c96:	f04f 0000 	mov.w	r0, #0
 8004c9a:	f04f 0100 	mov.w	r1, #0
 8004c9e:	0159      	lsls	r1, r3, #5
 8004ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca4:	0150      	lsls	r0, r2, #5
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4621      	mov	r1, r4
 8004cac:	1a51      	subs	r1, r2, r1
 8004cae:	6139      	str	r1, [r7, #16]
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	018b      	lsls	r3, r1, #6
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004cce:	4651      	mov	r1, sl
 8004cd0:	018a      	lsls	r2, r1, #6
 8004cd2:	4651      	mov	r1, sl
 8004cd4:	ebb2 0801 	subs.w	r8, r2, r1
 8004cd8:	4659      	mov	r1, fp
 8004cda:	eb63 0901 	sbc.w	r9, r3, r1
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cf2:	4690      	mov	r8, r2
 8004cf4:	4699      	mov	r9, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	eb18 0303 	adds.w	r3, r8, r3
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	462b      	mov	r3, r5
 8004d00:	eb49 0303 	adc.w	r3, r9, r3
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d12:	4629      	mov	r1, r5
 8004d14:	024b      	lsls	r3, r1, #9
 8004d16:	4621      	mov	r1, r4
 8004d18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d1c:	4621      	mov	r1, r4
 8004d1e:	024a      	lsls	r2, r1, #9
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d26:	2200      	movs	r2, #0
 8004d28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d30:	f7fb ffb2 	bl	8000c98 <__aeabi_uldivmod>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4613      	mov	r3, r2
 8004d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d3c:	e058      	b.n	8004df0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3e:	4b38      	ldr	r3, [pc, #224]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	099b      	lsrs	r3, r3, #6
 8004d44:	2200      	movs	r2, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	4611      	mov	r1, r2
 8004d4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d4e:	623b      	str	r3, [r7, #32]
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	f04f 0000 	mov.w	r0, #0
 8004d60:	f04f 0100 	mov.w	r1, #0
 8004d64:	0159      	lsls	r1, r3, #5
 8004d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d6a:	0150      	lsls	r0, r2, #5
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4641      	mov	r1, r8
 8004d72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d76:	4649      	mov	r1, r9
 8004d78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d7c:	f04f 0200 	mov.w	r2, #0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d90:	ebb2 040a 	subs.w	r4, r2, sl
 8004d94:	eb63 050b 	sbc.w	r5, r3, fp
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	00eb      	lsls	r3, r5, #3
 8004da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004da6:	00e2      	lsls	r2, r4, #3
 8004da8:	4614      	mov	r4, r2
 8004daa:	461d      	mov	r5, r3
 8004dac:	4643      	mov	r3, r8
 8004dae:	18e3      	adds	r3, r4, r3
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	464b      	mov	r3, r9
 8004db4:	eb45 0303 	adc.w	r3, r5, r3
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	028b      	lsls	r3, r1, #10
 8004dca:	4621      	mov	r1, r4
 8004dcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	028a      	lsls	r2, r1, #10
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dda:	2200      	movs	r2, #0
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	61fa      	str	r2, [r7, #28]
 8004de0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004de4:	f7fb ff58 	bl	8000c98 <__aeabi_uldivmod>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4613      	mov	r3, r2
 8004dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004df0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004e00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e0a:	e002      	b.n	8004e12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b05      	ldr	r3, [pc, #20]	@ (8004e24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3750      	adds	r7, #80	@ 0x50
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800
 8004e24:	00f42400 	.word	0x00f42400
 8004e28:	007a1200 	.word	0x007a1200

08004e2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e30:	4b03      	ldr	r3, [pc, #12]	@ (8004e40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e32:	681b      	ldr	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	2000001c 	.word	0x2000001c

08004e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e48:	f7ff fff0 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	4903      	ldr	r1, [pc, #12]	@ (8004e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e5a:	5ccb      	ldrb	r3, [r1, r3]
 8004e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40023800 	.word	0x40023800
 8004e68:	0800c700 	.word	0x0800c700

08004e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e70:	f7ff ffdc 	bl	8004e2c <HAL_RCC_GetHCLKFreq>
 8004e74:	4602      	mov	r2, r0
 8004e76:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	f003 0307 	and.w	r3, r3, #7
 8004e80:	4903      	ldr	r1, [pc, #12]	@ (8004e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e82:	5ccb      	ldrb	r3, [r1, r3]
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40023800 	.word	0x40023800
 8004e90:	0800c700 	.word	0x0800c700

08004e94 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d105      	bne.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d038      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ebc:	4b68      	ldr	r3, [pc, #416]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ec2:	f7fd fe71 	bl	8002ba8 <HAL_GetTick>
 8004ec6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eca:	f7fd fe6d 	bl	8002ba8 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e0bd      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004edc:	4b61      	ldr	r3, [pc, #388]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1f0      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	019b      	lsls	r3, r3, #6
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	071b      	lsls	r3, r3, #28
 8004efa:	495a      	ldr	r1, [pc, #360]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f02:	4b57      	ldr	r3, [pc, #348]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f08:	f7fd fe4e 	bl	8002ba8 <HAL_GetTick>
 8004f0c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f10:	f7fd fe4a 	bl	8002ba8 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e09a      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f22:	4b50      	ldr	r3, [pc, #320]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f000 8083 	beq.w	8005042 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	4b48      	ldr	r3, [pc, #288]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f44:	4a47      	ldr	r2, [pc, #284]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f4c:	4b45      	ldr	r3, [pc, #276]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004f58:	4b43      	ldr	r3, [pc, #268]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a42      	ldr	r2, [pc, #264]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f62:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f64:	f7fd fe20 	bl	8002ba8 <HAL_GetTick>
 8004f68:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004f6c:	f7fd fe1c 	bl	8002ba8 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e06c      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f0      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f8a:	4b36      	ldr	r3, [pc, #216]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f92:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d02f      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d028      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa8:	4b2e      	ldr	r3, [pc, #184]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004fbe:	4a29      	ldr	r2, [pc, #164]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fc4:	4b27      	ldr	r3, [pc, #156]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d114      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fdea 	bl	8002ba8 <HAL_GetTick>
 8004fd4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd6:	e00a      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fd8:	f7fd fde6 	bl	8002ba8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e034      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fee:	4b1d      	ldr	r3, [pc, #116]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0ee      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005002:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005006:	d10d      	bne.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005008:	4b16      	ldr	r3, [pc, #88]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501c:	4911      	ldr	r1, [pc, #68]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
 8005022:	e005      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005024:	4b0f      	ldr	r3, [pc, #60]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a0e      	ldr	r2, [pc, #56]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800502e:	6093      	str	r3, [r2, #8]
 8005030:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800503c:	4909      	ldr	r1, [pc, #36]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	4313      	orrs	r3, r2
 8005040:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	7d1a      	ldrb	r2, [r3, #20]
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005054:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	42470068 	.word	0x42470068
 8005064:	40023800 	.word	0x40023800
 8005068:	40007000 	.word	0x40007000
 800506c:	42470e40 	.word	0x42470e40
 8005070:	424711e0 	.word	0x424711e0

08005074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e041      	b.n	800510a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd fa92 	bl	80025c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 fc5a 	bl	800596c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e044      	b.n	80051b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0201 	orr.w	r2, r2, #1
 8005142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1e      	ldr	r2, [pc, #120]	@ (80051c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005156:	d013      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1a      	ldr	r2, [pc, #104]	@ (80051c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a19      	ldr	r2, [pc, #100]	@ (80051cc <HAL_TIM_Base_Start_IT+0xb8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x6c>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a16      	ldr	r2, [pc, #88]	@ (80051d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d111      	bne.n	80051a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b06      	cmp	r3, #6
 8005190:	d010      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	e007      	b.n	80051b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	40000800 	.word	0x40000800
 80051d0:	40000c00 	.word	0x40000c00
 80051d4:	40014000 	.word	0x40014000

080051d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e041      	b.n	800526e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f7fd f95a 	bl	80024b8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3304      	adds	r3, #4
 8005214:	4619      	mov	r1, r3
 8005216:	4610      	mov	r0, r2
 8005218:	f000 fba8 	bl	800596c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e041      	b.n	800530c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fd f96f 	bl	8002580 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	3304      	adds	r3, #4
 80052b2:	4619      	mov	r1, r3
 80052b4:	4610      	mov	r0, r2
 80052b6:	f000 fb59 	bl	800596c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e041      	b.n	80053aa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f839 	bl	80053b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f000 fb0a 	bl	800596c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b084      	sub	sp, #16
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d020      	beq.n	800542a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d01b      	beq.n	800542a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f06f 0202 	mvn.w	r2, #2
 80053fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f003 0303 	and.w	r3, r3, #3
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa8d 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 8005416:	e005      	b.n	8005424 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fa7f 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fa90 	bl	8005944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d020      	beq.n	8005476 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d01b      	beq.n	8005476 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0204 	mvn.w	r2, #4
 8005446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005458:	2b00      	cmp	r3, #0
 800545a:	d003      	beq.n	8005464 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fa67 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 8005462:	e005      	b.n	8005470 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 fa59 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fa6a 	bl	8005944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d020      	beq.n	80054c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d01b      	beq.n	80054c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f06f 0208 	mvn.w	r2, #8
 8005492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2204      	movs	r2, #4
 8005498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69db      	ldr	r3, [r3, #28]
 80054a0:	f003 0303 	and.w	r3, r3, #3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa41 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 80054ae:	e005      	b.n	80054bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fa33 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa44 	bl	8005944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	f003 0310 	and.w	r3, r3, #16
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d020      	beq.n	800550e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 0310 	and.w	r3, r3, #16
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01b      	beq.n	800550e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f06f 0210 	mvn.w	r2, #16
 80054de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2208      	movs	r2, #8
 80054e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fa1b 	bl	8005930 <HAL_TIM_IC_CaptureCallback>
 80054fa:	e005      	b.n	8005508 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa0d 	bl	800591c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fa1e 	bl	8005944 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00c      	beq.n	8005532 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0201 	mvn.w	r2, #1
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fc fdeb 	bl	8002108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00c      	beq.n	8005556 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800554e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fe0b 	bl	800616c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00c      	beq.n	800557a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f9ef 	bl	8005958 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00c      	beq.n	800559e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f06f 0220 	mvn.w	r2, #32
 8005596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fddd 	bl	8006158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800559e:	bf00      	nop
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d101      	bne.n	80055c6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80055c2:	2302      	movs	r3, #2
 80055c4:	e048      	b.n	8005658 <HAL_TIM_OC_ConfigChannel+0xb0>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d839      	bhi.n	8005648 <HAL_TIM_OC_ConfigChannel+0xa0>
 80055d4:	a201      	add	r2, pc, #4	@ (adr r2, 80055dc <HAL_TIM_OC_ConfigChannel+0x34>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005611 	.word	0x08005611
 80055e0:	08005649 	.word	0x08005649
 80055e4:	08005649 	.word	0x08005649
 80055e8:	08005649 	.word	0x08005649
 80055ec:	0800561f 	.word	0x0800561f
 80055f0:	08005649 	.word	0x08005649
 80055f4:	08005649 	.word	0x08005649
 80055f8:	08005649 	.word	0x08005649
 80055fc:	0800562d 	.word	0x0800562d
 8005600:	08005649 	.word	0x08005649
 8005604:	08005649 	.word	0x08005649
 8005608:	08005649 	.word	0x08005649
 800560c:	0800563b 	.word	0x0800563b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fa34 	bl	8005a84 <TIM_OC1_SetConfig>
      break;
 800561c:	e017      	b.n	800564e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fa93 	bl	8005b50 <TIM_OC2_SetConfig>
      break;
 800562a:	e010      	b.n	800564e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68b9      	ldr	r1, [r7, #8]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 faf8 	bl	8005c28 <TIM_OC3_SetConfig>
      break;
 8005638:	e009      	b.n	800564e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68b9      	ldr	r1, [r7, #8]
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fb5b 	bl	8005cfc <TIM_OC4_SetConfig>
      break;
 8005646:	e002      	b.n	800564e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	75fb      	strb	r3, [r7, #23]
      break;
 800564c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800566c:	2300      	movs	r3, #0
 800566e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_TIM_IC_ConfigChannel+0x1e>
 800567a:	2302      	movs	r3, #2
 800567c:	e088      	b.n	8005790 <HAL_TIM_IC_ConfigChannel+0x130>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11b      	bne.n	80056c4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800569c:	f000 fb7e 	bl	8005d9c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699a      	ldr	r2, [r3, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 020c 	bic.w	r2, r2, #12
 80056ae:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6999      	ldr	r1, [r3, #24]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	619a      	str	r2, [r3, #24]
 80056c2:	e060      	b.n	8005786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d11c      	bne.n	8005704 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80056da:	f000 fbc7 	bl	8005e6c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80056ec:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6999      	ldr	r1, [r3, #24]
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	021a      	lsls	r2, r3, #8
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	619a      	str	r2, [r3, #24]
 8005702:	e040      	b.n	8005786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b08      	cmp	r3, #8
 8005708:	d11b      	bne.n	8005742 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800571a:	f000 fbe4 	bl	8005ee6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69da      	ldr	r2, [r3, #28]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 020c 	bic.w	r2, r2, #12
 800572c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69d9      	ldr	r1, [r3, #28]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	61da      	str	r2, [r3, #28]
 8005740:	e021      	b.n	8005786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b0c      	cmp	r3, #12
 8005746:	d11c      	bne.n	8005782 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005758:	f000 fc01 	bl	8005f5e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800576a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	69d9      	ldr	r1, [r3, #28]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	61da      	str	r2, [r3, #28]
 8005780:	e001      	b.n	8005786 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800578e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0ae      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	f200 809f 	bhi.w	8005904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057c6:	a201      	add	r2, pc, #4	@ (adr r2, 80057cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	08005801 	.word	0x08005801
 80057d0:	08005905 	.word	0x08005905
 80057d4:	08005905 	.word	0x08005905
 80057d8:	08005905 	.word	0x08005905
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005905 	.word	0x08005905
 80057e4:	08005905 	.word	0x08005905
 80057e8:	08005905 	.word	0x08005905
 80057ec:	08005883 	.word	0x08005883
 80057f0:	08005905 	.word	0x08005905
 80057f4:	08005905 	.word	0x08005905
 80057f8:	08005905 	.word	0x08005905
 80057fc:	080058c3 	.word	0x080058c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f93c 	bl	8005a84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0204 	bic.w	r2, r2, #4
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	619a      	str	r2, [r3, #24]
      break;
 800583e:	e064      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f982 	bl	8005b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	619a      	str	r2, [r3, #24]
      break;
 8005880:	e043      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 f9cd 	bl	8005c28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0204 	bic.w	r2, r2, #4
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]
      break;
 80058c0:	e023      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fa17 	bl	8005cfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	61da      	str	r2, [r3, #28]
      break;
 8005902:	e002      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
      break;
 8005908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3a      	ldr	r2, [pc, #232]	@ (8005a68 <TIM_Base_SetConfig+0xfc>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d00f      	beq.n	80059a4 <TIM_Base_SetConfig+0x38>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800598a:	d00b      	beq.n	80059a4 <TIM_Base_SetConfig+0x38>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a37      	ldr	r2, [pc, #220]	@ (8005a6c <TIM_Base_SetConfig+0x100>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d007      	beq.n	80059a4 <TIM_Base_SetConfig+0x38>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a36      	ldr	r2, [pc, #216]	@ (8005a70 <TIM_Base_SetConfig+0x104>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_Base_SetConfig+0x38>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a35      	ldr	r2, [pc, #212]	@ (8005a74 <TIM_Base_SetConfig+0x108>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d108      	bne.n	80059b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a68 <TIM_Base_SetConfig+0xfc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01b      	beq.n	80059f6 <TIM_Base_SetConfig+0x8a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c4:	d017      	beq.n	80059f6 <TIM_Base_SetConfig+0x8a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a28      	ldr	r2, [pc, #160]	@ (8005a6c <TIM_Base_SetConfig+0x100>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <TIM_Base_SetConfig+0x8a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a27      	ldr	r2, [pc, #156]	@ (8005a70 <TIM_Base_SetConfig+0x104>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d00f      	beq.n	80059f6 <TIM_Base_SetConfig+0x8a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a26      	ldr	r2, [pc, #152]	@ (8005a74 <TIM_Base_SetConfig+0x108>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00b      	beq.n	80059f6 <TIM_Base_SetConfig+0x8a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a25      	ldr	r2, [pc, #148]	@ (8005a78 <TIM_Base_SetConfig+0x10c>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d007      	beq.n	80059f6 <TIM_Base_SetConfig+0x8a>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a24      	ldr	r2, [pc, #144]	@ (8005a7c <TIM_Base_SetConfig+0x110>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d003      	beq.n	80059f6 <TIM_Base_SetConfig+0x8a>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a23      	ldr	r2, [pc, #140]	@ (8005a80 <TIM_Base_SetConfig+0x114>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d108      	bne.n	8005a08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4313      	orrs	r3, r2
 8005a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a68 <TIM_Base_SetConfig+0xfc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d103      	bne.n	8005a3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d105      	bne.n	8005a5a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	f023 0201 	bic.w	r2, r3, #1
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	611a      	str	r2, [r3, #16]
  }
}
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	40010000 	.word	0x40010000
 8005a6c:	40000400 	.word	0x40000400
 8005a70:	40000800 	.word	0x40000800
 8005a74:	40000c00 	.word	0x40000c00
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800

08005a84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f023 0201 	bic.w	r2, r3, #1
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f023 0302 	bic.w	r3, r3, #2
 8005acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1c      	ldr	r2, [pc, #112]	@ (8005b4c <TIM_OC1_SetConfig+0xc8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d10c      	bne.n	8005afa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f023 0308 	bic.w	r3, r3, #8
 8005ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 0304 	bic.w	r3, r3, #4
 8005af8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a13      	ldr	r2, [pc, #76]	@ (8005b4c <TIM_OC1_SetConfig+0xc8>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d111      	bne.n	8005b26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	621a      	str	r2, [r3, #32]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40010000 	.word	0x40010000

08005b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f023 0210 	bic.w	r2, r3, #16
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0320 	bic.w	r3, r3, #32
 8005b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	011b      	lsls	r3, r3, #4
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a1e      	ldr	r2, [pc, #120]	@ (8005c24 <TIM_OC2_SetConfig+0xd4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10d      	bne.n	8005bcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a15      	ldr	r2, [pc, #84]	@ (8005c24 <TIM_OC2_SetConfig+0xd4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d113      	bne.n	8005bfc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	40010000 	.word	0x40010000

08005c28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f023 0303 	bic.w	r3, r3, #3
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf8 <TIM_OC3_SetConfig+0xd0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d10d      	bne.n	8005ca2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a14      	ldr	r2, [pc, #80]	@ (8005cf8 <TIM_OC3_SetConfig+0xd0>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d113      	bne.n	8005cd2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	011b      	lsls	r3, r3, #4
 8005ccc:	693a      	ldr	r2, [r7, #16]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	621a      	str	r2, [r3, #32]
}
 8005cec:	bf00      	nop
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	40010000 	.word	0x40010000

08005cfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	68fa      	ldr	r2, [r7, #12]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	031b      	lsls	r3, r3, #12
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a10      	ldr	r2, [pc, #64]	@ (8005d98 <TIM_OC4_SetConfig+0x9c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d109      	bne.n	8005d70 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	019b      	lsls	r3, r3, #6
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000

08005d9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b087      	sub	sp, #28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f023 0201 	bic.w	r2, r3, #1
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a24      	ldr	r2, [pc, #144]	@ (8005e58 <TIM_TI1_SetConfig+0xbc>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d013      	beq.n	8005df2 <TIM_TI1_SetConfig+0x56>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd0:	d00f      	beq.n	8005df2 <TIM_TI1_SetConfig+0x56>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	4a21      	ldr	r2, [pc, #132]	@ (8005e5c <TIM_TI1_SetConfig+0xc0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d00b      	beq.n	8005df2 <TIM_TI1_SetConfig+0x56>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a20      	ldr	r2, [pc, #128]	@ (8005e60 <TIM_TI1_SetConfig+0xc4>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d007      	beq.n	8005df2 <TIM_TI1_SetConfig+0x56>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a1f      	ldr	r2, [pc, #124]	@ (8005e64 <TIM_TI1_SetConfig+0xc8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d003      	beq.n	8005df2 <TIM_TI1_SetConfig+0x56>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <TIM_TI1_SetConfig+0xcc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <TIM_TI1_SetConfig+0x5a>
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <TIM_TI1_SetConfig+0x5c>
 8005df6:	2300      	movs	r3, #0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d008      	beq.n	8005e0e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0303 	bic.w	r3, r3, #3
 8005e02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	617b      	str	r3, [r7, #20]
 8005e0c:	e003      	b.n	8005e16 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f023 030a 	bic.w	r3, r3, #10
 8005e30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	f003 030a 	and.w	r3, r3, #10
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	621a      	str	r2, [r3, #32]
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40010000 	.word	0x40010000
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40000800 	.word	0x40000800
 8005e64:	40000c00 	.word	0x40000c00
 8005e68:	40014000 	.word	0x40014000

08005e6c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
 8005e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	f023 0210 	bic.w	r2, r3, #16
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	021b      	lsls	r3, r3, #8
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	031b      	lsls	r3, r3, #12
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b087      	sub	sp, #28
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
 8005ef2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005f36:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	021b      	lsls	r3, r3, #8
 8005f3c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b087      	sub	sp, #28
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
 8005f6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f8a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	021b      	lsls	r3, r3, #8
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f9c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	031b      	lsls	r3, r3, #12
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	031b      	lsls	r3, r3, #12
 8005fb6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	621a      	str	r2, [r3, #32]
}
 8005fcc:	bf00      	nop
 8005fce:	371c      	adds	r7, #28
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e050      	b.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a1c      	ldr	r2, [pc, #112]	@ (80060a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603c:	d013      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a18      	ldr	r2, [pc, #96]	@ (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a15      	ldr	r2, [pc, #84]	@ (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a13      	ldr	r2, [pc, #76]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d10c      	bne.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800606c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	4313      	orrs	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	40014000 	.word	0x40014000

080060b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e03d      	b.n	800614c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4313      	orrs	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e042      	b.n	8006218 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7fc faa6 	bl	80026f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2224      	movs	r2, #36	@ 0x24
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fdbd 	bl	8006d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	691a      	ldr	r2, [r3, #16]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	695a      	ldr	r2, [r3, #20]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68da      	ldr	r2, [r3, #12]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2220      	movs	r2, #32
 8006204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	@ 0x28
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b20      	cmp	r3, #32
 800623e:	d175      	bne.n	800632c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_UART_Transmit+0x2c>
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e06e      	b.n	800632e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2221      	movs	r2, #33	@ 0x21
 800625a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800625e:	f7fc fca3 	bl	8002ba8 <HAL_GetTick>
 8006262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	88fa      	ldrh	r2, [r7, #6]
 8006268:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	88fa      	ldrh	r2, [r7, #6]
 800626e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006278:	d108      	bne.n	800628c <HAL_UART_Transmit+0x6c>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d104      	bne.n	800628c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	61bb      	str	r3, [r7, #24]
 800628a:	e003      	b.n	8006294 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006290:	2300      	movs	r3, #0
 8006292:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006294:	e02e      	b.n	80062f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	2180      	movs	r1, #128	@ 0x80
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 fb1f 	bl	80068e4 <UART_WaitOnFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d005      	beq.n	80062b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e03a      	b.n	800632e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10b      	bne.n	80062d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	3302      	adds	r3, #2
 80062d2:	61bb      	str	r3, [r7, #24]
 80062d4:	e007      	b.n	80062e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	3301      	adds	r3, #1
 80062e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1cb      	bne.n	8006296 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	2200      	movs	r2, #0
 8006306:	2140      	movs	r1, #64	@ 0x40
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 faeb 	bl	80068e4 <UART_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2220      	movs	r2, #32
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e006      	b.n	800632e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	e000      	b.n	800632e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800632c:	2302      	movs	r3, #2
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	4613      	mov	r3, r2
 8006342:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b20      	cmp	r3, #32
 800634e:	d112      	bne.n	8006376 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <HAL_UART_Receive_IT+0x26>
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e00b      	b.n	8006378 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	461a      	mov	r2, r3
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fb12 	bl	8006996 <UART_Start_Receive_IT>
 8006372:	4603      	mov	r3, r0
 8006374:	e000      	b.n	8006378 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006376:	2302      	movs	r3, #2
  }
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b0ba      	sub	sp, #232	@ 0xe8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063b6:	f003 030f 	and.w	r3, r3, #15
 80063ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80063be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10f      	bne.n	80063e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ca:	f003 0320 	and.w	r3, r3, #32
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <HAL_UART_IRQHandler+0x66>
 80063d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d6:	f003 0320 	and.w	r3, r3, #32
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fbf2 	bl	8006bc8 <UART_Receive_IT>
      return;
 80063e4:	e25b      	b.n	800689e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 80de 	beq.w	80065ac <HAL_UART_IRQHandler+0x22c>
 80063f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063f4:	f003 0301 	and.w	r3, r3, #1
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d106      	bne.n	800640a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006400:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 80d1 	beq.w	80065ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800640a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <HAL_UART_IRQHandler+0xae>
 8006416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d005      	beq.n	800642e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006426:	f043 0201 	orr.w	r2, r3, #1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006432:	f003 0304 	and.w	r3, r3, #4
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <HAL_UART_IRQHandler+0xd2>
 800643a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f043 0202 	orr.w	r2, r3, #2
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_UART_IRQHandler+0xf6>
 800645e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646e:	f043 0204 	orr.w	r2, r3, #4
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d011      	beq.n	80064a6 <HAL_UART_IRQHandler+0x126>
 8006482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b00      	cmp	r3, #0
 800648c:	d105      	bne.n	800649a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800648e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d005      	beq.n	80064a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800649e:	f043 0208 	orr.w	r2, r3, #8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 81f2 	beq.w	8006894 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064b4:	f003 0320 	and.w	r3, r3, #32
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d008      	beq.n	80064ce <HAL_UART_IRQHandler+0x14e>
 80064bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fb7d 	bl	8006bc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064d8:	2b40      	cmp	r3, #64	@ 0x40
 80064da:	bf0c      	ite	eq
 80064dc:	2301      	moveq	r3, #1
 80064de:	2300      	movne	r3, #0
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d103      	bne.n	80064fa <HAL_UART_IRQHandler+0x17a>
 80064f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d04f      	beq.n	800659a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa85 	bl	8006a0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800650a:	2b40      	cmp	r3, #64	@ 0x40
 800650c:	d141      	bne.n	8006592 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3314      	adds	r3, #20
 8006514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006518:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006524:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006528:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800652c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3314      	adds	r3, #20
 8006536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800653a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800653e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800654a:	e841 2300 	strex	r3, r2, [r1]
 800654e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1d9      	bne.n	800650e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d013      	beq.n	800658a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006566:	4a7e      	ldr	r2, [pc, #504]	@ (8006760 <HAL_UART_IRQHandler+0x3e0>)
 8006568:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656e:	4618      	mov	r0, r3
 8006570:	f7fc fccb 	bl	8002f0a <HAL_DMA_Abort_IT>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d016      	beq.n	80065a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800657e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006584:	4610      	mov	r0, r2
 8006586:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	e00e      	b.n	80065a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f994 	bl	80068b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	e00a      	b.n	80065a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f990 	bl	80068b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006598:	e006      	b.n	80065a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f98c 	bl	80068b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80065a6:	e175      	b.n	8006894 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	bf00      	nop
    return;
 80065aa:	e173      	b.n	8006894 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	f040 814f 	bne.w	8006854 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 8148 	beq.w	8006854 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8141 	beq.w	8006854 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065d2:	2300      	movs	r3, #0
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f2:	2b40      	cmp	r3, #64	@ 0x40
 80065f4:	f040 80b6 	bne.w	8006764 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006604:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 8145 	beq.w	8006898 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006616:	429a      	cmp	r2, r3
 8006618:	f080 813e 	bcs.w	8006898 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006622:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800662e:	f000 8088 	beq.w	8006742 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	330c      	adds	r3, #12
 8006638:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006648:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800664c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006650:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	330c      	adds	r3, #12
 800665a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800665e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800666a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006676:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1d9      	bne.n	8006632 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3314      	adds	r3, #20
 8006684:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800668e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006690:	f023 0301 	bic.w	r3, r3, #1
 8006694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3314      	adds	r3, #20
 800669e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066ae:	e841 2300 	strex	r3, r2, [r1]
 80066b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1e1      	bne.n	800667e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3314      	adds	r3, #20
 80066c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066c4:	e853 3f00 	ldrex	r3, [r3]
 80066c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3314      	adds	r3, #20
 80066da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80066de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80066e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80066e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80066e6:	e841 2300 	strex	r3, r2, [r1]
 80066ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80066ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d1e3      	bne.n	80066ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	330c      	adds	r3, #12
 8006706:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006708:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800670a:	e853 3f00 	ldrex	r3, [r3]
 800670e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006712:	f023 0310 	bic.w	r3, r3, #16
 8006716:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	330c      	adds	r3, #12
 8006720:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006724:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006726:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800672a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e3      	bne.n	8006700 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800673c:	4618      	mov	r0, r3
 800673e:	f7fc fb74 	bl	8002e2a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2202      	movs	r2, #2
 8006746:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006750:	b29b      	uxth	r3, r3
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	b29b      	uxth	r3, r3
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f8b7 	bl	80068cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800675e:	e09b      	b.n	8006898 <HAL_UART_IRQHandler+0x518>
 8006760:	08006ad1 	.word	0x08006ad1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800676c:	b29b      	uxth	r3, r3
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006778:	b29b      	uxth	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 808e 	beq.w	800689c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 8089 	beq.w	800689c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	330c      	adds	r3, #12
 8006790:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800679a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	330c      	adds	r3, #12
 80067aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80067ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80067b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067b6:	e841 2300 	strex	r3, r2, [r1]
 80067ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1e3      	bne.n	800678a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	3314      	adds	r3, #20
 80067c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067cc:	e853 3f00 	ldrex	r3, [r3]
 80067d0:	623b      	str	r3, [r7, #32]
   return(result);
 80067d2:	6a3b      	ldr	r3, [r7, #32]
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	3314      	adds	r3, #20
 80067e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80067e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80067e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067ee:	e841 2300 	strex	r3, r2, [r1]
 80067f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1e3      	bne.n	80067c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	60fb      	str	r3, [r7, #12]
   return(result);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	330c      	adds	r3, #12
 8006828:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800682c:	61fa      	str	r2, [r7, #28]
 800682e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006830:	69b9      	ldr	r1, [r7, #24]
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	e841 2300 	strex	r3, r2, [r1]
 8006838:	617b      	str	r3, [r7, #20]
   return(result);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1e3      	bne.n	8006808 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006846:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 f83d 	bl	80068cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006852:	e023      	b.n	800689c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800685c:	2b00      	cmp	r3, #0
 800685e:	d009      	beq.n	8006874 <HAL_UART_IRQHandler+0x4f4>
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f943 	bl	8006af8 <UART_Transmit_IT>
    return;
 8006872:	e014      	b.n	800689e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00e      	beq.n	800689e <HAL_UART_IRQHandler+0x51e>
 8006880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	d008      	beq.n	800689e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 f983 	bl	8006b98 <UART_EndTransmit_IT>
    return;
 8006892:	e004      	b.n	800689e <HAL_UART_IRQHandler+0x51e>
    return;
 8006894:	bf00      	nop
 8006896:	e002      	b.n	800689e <HAL_UART_IRQHandler+0x51e>
      return;
 8006898:	bf00      	nop
 800689a:	e000      	b.n	800689e <HAL_UART_IRQHandler+0x51e>
      return;
 800689c:	bf00      	nop
  }
}
 800689e:	37e8      	adds	r7, #232	@ 0xe8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f4:	e03b      	b.n	800696e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fc:	d037      	beq.n	800696e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068fe:	f7fc f953 	bl	8002ba8 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	6a3a      	ldr	r2, [r7, #32]
 800690a:	429a      	cmp	r2, r3
 800690c:	d302      	bcc.n	8006914 <UART_WaitOnFlagUntilTimeout+0x30>
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e03a      	b.n	800698e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	d023      	beq.n	800696e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b80      	cmp	r3, #128	@ 0x80
 800692a:	d020      	beq.n	800696e <UART_WaitOnFlagUntilTimeout+0x8a>
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2b40      	cmp	r3, #64	@ 0x40
 8006930:	d01d      	beq.n	800696e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b08      	cmp	r3, #8
 800693e:	d116      	bne.n	800696e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 f857 	bl	8006a0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2208      	movs	r2, #8
 8006960:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e00f      	b.n	800698e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4013      	ands	r3, r2
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	429a      	cmp	r2, r3
 800697c:	bf0c      	ite	eq
 800697e:	2301      	moveq	r3, #1
 8006980:	2300      	movne	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	79fb      	ldrb	r3, [r7, #7]
 8006988:	429a      	cmp	r2, r3
 800698a:	d0b4      	beq.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	60f8      	str	r0, [r7, #12]
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	4613      	mov	r3, r2
 80069a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	88fa      	ldrh	r2, [r7, #6]
 80069ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2222      	movs	r2, #34	@ 0x22
 80069c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d007      	beq.n	80069dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0201 	orr.w	r2, r2, #1
 80069ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68da      	ldr	r2, [r3, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f042 0220 	orr.w	r2, r2, #32
 80069fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b095      	sub	sp, #84	@ 0x54
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	330c      	adds	r3, #12
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a32:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e5      	bne.n	8006a12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3314      	adds	r3, #20
 8006a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3314      	adds	r3, #20
 8006a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e5      	bne.n	8006a46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d119      	bne.n	8006ab6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	330c      	adds	r3, #12
 8006a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	e853 3f00 	ldrex	r3, [r3]
 8006a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f023 0310 	bic.w	r3, r3, #16
 8006a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	330c      	adds	r3, #12
 8006aa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa2:	61ba      	str	r2, [r7, #24]
 8006aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6979      	ldr	r1, [r7, #20]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	613b      	str	r3, [r7, #16]
   return(result);
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e5      	bne.n	8006a82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006ac4:	bf00      	nop
 8006ac6:	3754      	adds	r7, #84	@ 0x54
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7ff fee4 	bl	80068b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b21      	cmp	r3, #33	@ 0x21
 8006b0a:	d13e      	bne.n	8006b8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b14:	d114      	bne.n	8006b40 <UART_Transmit_IT+0x48>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d110      	bne.n	8006b40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a1b      	ldr	r3, [r3, #32]
 8006b38:	1c9a      	adds	r2, r3, #2
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	621a      	str	r2, [r3, #32]
 8006b3e:	e008      	b.n	8006b52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	1c59      	adds	r1, r3, #1
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	6211      	str	r1, [r2, #32]
 8006b4a:	781a      	ldrb	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	4619      	mov	r1, r3
 8006b60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10f      	bne.n	8006b86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	68da      	ldr	r2, [r3, #12]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	e000      	b.n	8006b8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b8a:	2302      	movs	r3, #2
  }
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff fe73 	bl	80068a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	@ 0x30
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	2b22      	cmp	r3, #34	@ 0x22
 8006bda:	f040 80ae 	bne.w	8006d3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006be6:	d117      	bne.n	8006c18 <UART_Receive_IT+0x50>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d113      	bne.n	8006c18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c10:	1c9a      	adds	r2, r3, #2
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c16:	e026      	b.n	8006c66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c2a:	d007      	beq.n	8006c3c <UART_Receive_IT+0x74>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <UART_Receive_IT+0x82>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	e008      	b.n	8006c5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c56:	b2da      	uxtb	r2, r3
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	4619      	mov	r1, r3
 8006c74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d15d      	bne.n	8006d36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0220 	bic.w	r2, r2, #32
 8006c88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	695a      	ldr	r2, [r3, #20]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d135      	bne.n	8006d2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	330c      	adds	r3, #12
 8006ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f023 0310 	bic.w	r3, r3, #16
 8006cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce6:	623a      	str	r2, [r7, #32]
 8006ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	69f9      	ldr	r1, [r7, #28]
 8006cec:	6a3a      	ldr	r2, [r7, #32]
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e5      	bne.n	8006cc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d10a      	bne.n	8006d1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d08:	2300      	movs	r3, #0
 8006d0a:	60fb      	str	r3, [r7, #12]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	60fb      	str	r3, [r7, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fdd1 	bl	80068cc <HAL_UARTEx_RxEventCallback>
 8006d2a:	e002      	b.n	8006d32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fb f9dd 	bl	80020ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d32:	2300      	movs	r3, #0
 8006d34:	e002      	b.n	8006d3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e000      	b.n	8006d3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006d3a:	2302      	movs	r3, #2
  }
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3730      	adds	r7, #48	@ 0x30
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d48:	b0c0      	sub	sp, #256	@ 0x100
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d60:	68d9      	ldr	r1, [r3, #12]
 8006d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	ea40 0301 	orr.w	r3, r0, r1
 8006d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	431a      	orrs	r2, r3
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d9c:	f021 010c 	bic.w	r1, r1, #12
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006daa:	430b      	orrs	r3, r1
 8006dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dbe:	6999      	ldr	r1, [r3, #24]
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	ea40 0301 	orr.w	r3, r0, r1
 8006dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8007010 <UART_SetConfig+0x2cc>)
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d005      	beq.n	8006de4 <UART_SetConfig+0xa0>
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b8d      	ldr	r3, [pc, #564]	@ (8007014 <UART_SetConfig+0x2d0>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d104      	bne.n	8006dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006de4:	f7fe f842 	bl	8004e6c <HAL_RCC_GetPCLK2Freq>
 8006de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006dec:	e003      	b.n	8006df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dee:	f7fe f829 	bl	8004e44 <HAL_RCC_GetPCLK1Freq>
 8006df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfa:	69db      	ldr	r3, [r3, #28]
 8006dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e00:	f040 810c 	bne.w	800701c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e16:	4622      	mov	r2, r4
 8006e18:	462b      	mov	r3, r5
 8006e1a:	1891      	adds	r1, r2, r2
 8006e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e1e:	415b      	adcs	r3, r3
 8006e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e26:	4621      	mov	r1, r4
 8006e28:	eb12 0801 	adds.w	r8, r2, r1
 8006e2c:	4629      	mov	r1, r5
 8006e2e:	eb43 0901 	adc.w	r9, r3, r1
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e46:	4690      	mov	r8, r2
 8006e48:	4699      	mov	r9, r3
 8006e4a:	4623      	mov	r3, r4
 8006e4c:	eb18 0303 	adds.w	r3, r8, r3
 8006e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e54:	462b      	mov	r3, r5
 8006e56:	eb49 0303 	adc.w	r3, r9, r3
 8006e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e72:	460b      	mov	r3, r1
 8006e74:	18db      	adds	r3, r3, r3
 8006e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e78:	4613      	mov	r3, r2
 8006e7a:	eb42 0303 	adc.w	r3, r2, r3
 8006e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e88:	f7f9 ff06 	bl	8000c98 <__aeabi_uldivmod>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4b61      	ldr	r3, [pc, #388]	@ (8007018 <UART_SetConfig+0x2d4>)
 8006e92:	fba3 2302 	umull	r2, r3, r3, r2
 8006e96:	095b      	lsrs	r3, r3, #5
 8006e98:	011c      	lsls	r4, r3, #4
 8006e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006eac:	4642      	mov	r2, r8
 8006eae:	464b      	mov	r3, r9
 8006eb0:	1891      	adds	r1, r2, r2
 8006eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006eb4:	415b      	adcs	r3, r3
 8006eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	f04f 0300 	mov.w	r3, #0
 8006ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006edc:	4692      	mov	sl, r2
 8006ede:	469b      	mov	fp, r3
 8006ee0:	4643      	mov	r3, r8
 8006ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006eea:	464b      	mov	r3, r9
 8006eec:	eb4b 0303 	adc.w	r3, fp, r3
 8006ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	18db      	adds	r3, r3, r3
 8006f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f0e:	4613      	mov	r3, r2
 8006f10:	eb42 0303 	adc.w	r3, r2, r3
 8006f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f1e:	f7f9 febb 	bl	8000c98 <__aeabi_uldivmod>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4611      	mov	r1, r2
 8006f28:	4b3b      	ldr	r3, [pc, #236]	@ (8007018 <UART_SetConfig+0x2d4>)
 8006f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8006f2e:	095b      	lsrs	r3, r3, #5
 8006f30:	2264      	movs	r2, #100	@ 0x64
 8006f32:	fb02 f303 	mul.w	r3, r2, r3
 8006f36:	1acb      	subs	r3, r1, r3
 8006f38:	00db      	lsls	r3, r3, #3
 8006f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f3e:	4b36      	ldr	r3, [pc, #216]	@ (8007018 <UART_SetConfig+0x2d4>)
 8006f40:	fba3 2302 	umull	r2, r3, r3, r2
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f4c:	441c      	add	r4, r3
 8006f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f60:	4642      	mov	r2, r8
 8006f62:	464b      	mov	r3, r9
 8006f64:	1891      	adds	r1, r2, r2
 8006f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f68:	415b      	adcs	r3, r3
 8006f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f70:	4641      	mov	r1, r8
 8006f72:	1851      	adds	r1, r2, r1
 8006f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f76:	4649      	mov	r1, r9
 8006f78:	414b      	adcs	r3, r1
 8006f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f7c:	f04f 0200 	mov.w	r2, #0
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f88:	4659      	mov	r1, fp
 8006f8a:	00cb      	lsls	r3, r1, #3
 8006f8c:	4651      	mov	r1, sl
 8006f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f92:	4651      	mov	r1, sl
 8006f94:	00ca      	lsls	r2, r1, #3
 8006f96:	4610      	mov	r0, r2
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	4642      	mov	r2, r8
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fa4:	464b      	mov	r3, r9
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	eb42 0303 	adc.w	r3, r2, r3
 8006fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	18db      	adds	r3, r3, r3
 8006fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fca:	4613      	mov	r3, r2
 8006fcc:	eb42 0303 	adc.w	r3, r2, r3
 8006fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006fda:	f7f9 fe5d 	bl	8000c98 <__aeabi_uldivmod>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <UART_SetConfig+0x2d4>)
 8006fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	2164      	movs	r1, #100	@ 0x64
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	3332      	adds	r3, #50	@ 0x32
 8006ff6:	4a08      	ldr	r2, [pc, #32]	@ (8007018 <UART_SetConfig+0x2d4>)
 8006ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffc:	095b      	lsrs	r3, r3, #5
 8006ffe:	f003 0207 	and.w	r2, r3, #7
 8007002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4422      	add	r2, r4
 800700a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800700c:	e106      	b.n	800721c <UART_SetConfig+0x4d8>
 800700e:	bf00      	nop
 8007010:	40011000 	.word	0x40011000
 8007014:	40011400 	.word	0x40011400
 8007018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800701c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007020:	2200      	movs	r2, #0
 8007022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800702a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800702e:	4642      	mov	r2, r8
 8007030:	464b      	mov	r3, r9
 8007032:	1891      	adds	r1, r2, r2
 8007034:	6239      	str	r1, [r7, #32]
 8007036:	415b      	adcs	r3, r3
 8007038:	627b      	str	r3, [r7, #36]	@ 0x24
 800703a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800703e:	4641      	mov	r1, r8
 8007040:	1854      	adds	r4, r2, r1
 8007042:	4649      	mov	r1, r9
 8007044:	eb43 0501 	adc.w	r5, r3, r1
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	00eb      	lsls	r3, r5, #3
 8007052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007056:	00e2      	lsls	r2, r4, #3
 8007058:	4614      	mov	r4, r2
 800705a:	461d      	mov	r5, r3
 800705c:	4643      	mov	r3, r8
 800705e:	18e3      	adds	r3, r4, r3
 8007060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007064:	464b      	mov	r3, r9
 8007066:	eb45 0303 	adc.w	r3, r5, r3
 800706a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800706e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800707a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800707e:	f04f 0200 	mov.w	r2, #0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800708a:	4629      	mov	r1, r5
 800708c:	008b      	lsls	r3, r1, #2
 800708e:	4621      	mov	r1, r4
 8007090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007094:	4621      	mov	r1, r4
 8007096:	008a      	lsls	r2, r1, #2
 8007098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800709c:	f7f9 fdfc 	bl	8000c98 <__aeabi_uldivmod>
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4b60      	ldr	r3, [pc, #384]	@ (8007228 <UART_SetConfig+0x4e4>)
 80070a6:	fba3 2302 	umull	r2, r3, r3, r2
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	011c      	lsls	r4, r3, #4
 80070ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070c0:	4642      	mov	r2, r8
 80070c2:	464b      	mov	r3, r9
 80070c4:	1891      	adds	r1, r2, r2
 80070c6:	61b9      	str	r1, [r7, #24]
 80070c8:	415b      	adcs	r3, r3
 80070ca:	61fb      	str	r3, [r7, #28]
 80070cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d0:	4641      	mov	r1, r8
 80070d2:	1851      	adds	r1, r2, r1
 80070d4:	6139      	str	r1, [r7, #16]
 80070d6:	4649      	mov	r1, r9
 80070d8:	414b      	adcs	r3, r1
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070e8:	4659      	mov	r1, fp
 80070ea:	00cb      	lsls	r3, r1, #3
 80070ec:	4651      	mov	r1, sl
 80070ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f2:	4651      	mov	r1, sl
 80070f4:	00ca      	lsls	r2, r1, #3
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	4642      	mov	r2, r8
 80070fe:	189b      	adds	r3, r3, r2
 8007100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007104:	464b      	mov	r3, r9
 8007106:	460a      	mov	r2, r1
 8007108:	eb42 0303 	adc.w	r3, r2, r3
 800710c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800711a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007128:	4649      	mov	r1, r9
 800712a:	008b      	lsls	r3, r1, #2
 800712c:	4641      	mov	r1, r8
 800712e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007132:	4641      	mov	r1, r8
 8007134:	008a      	lsls	r2, r1, #2
 8007136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800713a:	f7f9 fdad 	bl	8000c98 <__aeabi_uldivmod>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4611      	mov	r1, r2
 8007144:	4b38      	ldr	r3, [pc, #224]	@ (8007228 <UART_SetConfig+0x4e4>)
 8007146:	fba3 2301 	umull	r2, r3, r3, r1
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	2264      	movs	r2, #100	@ 0x64
 800714e:	fb02 f303 	mul.w	r3, r2, r3
 8007152:	1acb      	subs	r3, r1, r3
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	3332      	adds	r3, #50	@ 0x32
 8007158:	4a33      	ldr	r2, [pc, #204]	@ (8007228 <UART_SetConfig+0x4e4>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007164:	441c      	add	r4, r3
 8007166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800716a:	2200      	movs	r2, #0
 800716c:	673b      	str	r3, [r7, #112]	@ 0x70
 800716e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007174:	4642      	mov	r2, r8
 8007176:	464b      	mov	r3, r9
 8007178:	1891      	adds	r1, r2, r2
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	415b      	adcs	r3, r3
 800717e:	60fb      	str	r3, [r7, #12]
 8007180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007184:	4641      	mov	r1, r8
 8007186:	1851      	adds	r1, r2, r1
 8007188:	6039      	str	r1, [r7, #0]
 800718a:	4649      	mov	r1, r9
 800718c:	414b      	adcs	r3, r1
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	f04f 0200 	mov.w	r2, #0
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800719c:	4659      	mov	r1, fp
 800719e:	00cb      	lsls	r3, r1, #3
 80071a0:	4651      	mov	r1, sl
 80071a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071a6:	4651      	mov	r1, sl
 80071a8:	00ca      	lsls	r2, r1, #3
 80071aa:	4610      	mov	r0, r2
 80071ac:	4619      	mov	r1, r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	4642      	mov	r2, r8
 80071b2:	189b      	adds	r3, r3, r2
 80071b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071b6:	464b      	mov	r3, r9
 80071b8:	460a      	mov	r2, r1
 80071ba:	eb42 0303 	adc.w	r3, r2, r3
 80071be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	f04f 0300 	mov.w	r3, #0
 80071d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071d8:	4649      	mov	r1, r9
 80071da:	008b      	lsls	r3, r1, #2
 80071dc:	4641      	mov	r1, r8
 80071de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071e2:	4641      	mov	r1, r8
 80071e4:	008a      	lsls	r2, r1, #2
 80071e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80071ea:	f7f9 fd55 	bl	8000c98 <__aeabi_uldivmod>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007228 <UART_SetConfig+0x4e4>)
 80071f4:	fba3 1302 	umull	r1, r3, r3, r2
 80071f8:	095b      	lsrs	r3, r3, #5
 80071fa:	2164      	movs	r1, #100	@ 0x64
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	3332      	adds	r3, #50	@ 0x32
 8007206:	4a08      	ldr	r2, [pc, #32]	@ (8007228 <UART_SetConfig+0x4e4>)
 8007208:	fba2 2303 	umull	r2, r3, r2, r3
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	f003 020f 	and.w	r2, r3, #15
 8007212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4422      	add	r2, r4
 800721a:	609a      	str	r2, [r3, #8]
}
 800721c:	bf00      	nop
 800721e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007222:	46bd      	mov	sp, r7
 8007224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007228:	51eb851f 	.word	0x51eb851f

0800722c <__cvt>:
 800722c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	ec57 6b10 	vmov	r6, r7, d0
 8007234:	2f00      	cmp	r7, #0
 8007236:	460c      	mov	r4, r1
 8007238:	4619      	mov	r1, r3
 800723a:	463b      	mov	r3, r7
 800723c:	bfbb      	ittet	lt
 800723e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007242:	461f      	movlt	r7, r3
 8007244:	2300      	movge	r3, #0
 8007246:	232d      	movlt	r3, #45	@ 0x2d
 8007248:	700b      	strb	r3, [r1, #0]
 800724a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800724c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007250:	4691      	mov	r9, r2
 8007252:	f023 0820 	bic.w	r8, r3, #32
 8007256:	bfbc      	itt	lt
 8007258:	4632      	movlt	r2, r6
 800725a:	4616      	movlt	r6, r2
 800725c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007260:	d005      	beq.n	800726e <__cvt+0x42>
 8007262:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007266:	d100      	bne.n	800726a <__cvt+0x3e>
 8007268:	3401      	adds	r4, #1
 800726a:	2102      	movs	r1, #2
 800726c:	e000      	b.n	8007270 <__cvt+0x44>
 800726e:	2103      	movs	r1, #3
 8007270:	ab03      	add	r3, sp, #12
 8007272:	9301      	str	r3, [sp, #4]
 8007274:	ab02      	add	r3, sp, #8
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	ec47 6b10 	vmov	d0, r6, r7
 800727c:	4653      	mov	r3, sl
 800727e:	4622      	mov	r2, r4
 8007280:	f001 f8ae 	bl	80083e0 <_dtoa_r>
 8007284:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007288:	4605      	mov	r5, r0
 800728a:	d119      	bne.n	80072c0 <__cvt+0x94>
 800728c:	f019 0f01 	tst.w	r9, #1
 8007290:	d00e      	beq.n	80072b0 <__cvt+0x84>
 8007292:	eb00 0904 	add.w	r9, r0, r4
 8007296:	2200      	movs	r2, #0
 8007298:	2300      	movs	r3, #0
 800729a:	4630      	mov	r0, r6
 800729c:	4639      	mov	r1, r7
 800729e:	f7f9 fc1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80072a2:	b108      	cbz	r0, 80072a8 <__cvt+0x7c>
 80072a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80072a8:	2230      	movs	r2, #48	@ 0x30
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	454b      	cmp	r3, r9
 80072ae:	d31e      	bcc.n	80072ee <__cvt+0xc2>
 80072b0:	9b03      	ldr	r3, [sp, #12]
 80072b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072b4:	1b5b      	subs	r3, r3, r5
 80072b6:	4628      	mov	r0, r5
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	b004      	add	sp, #16
 80072bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80072c4:	eb00 0904 	add.w	r9, r0, r4
 80072c8:	d1e5      	bne.n	8007296 <__cvt+0x6a>
 80072ca:	7803      	ldrb	r3, [r0, #0]
 80072cc:	2b30      	cmp	r3, #48	@ 0x30
 80072ce:	d10a      	bne.n	80072e6 <__cvt+0xba>
 80072d0:	2200      	movs	r2, #0
 80072d2:	2300      	movs	r3, #0
 80072d4:	4630      	mov	r0, r6
 80072d6:	4639      	mov	r1, r7
 80072d8:	f7f9 fbfe 	bl	8000ad8 <__aeabi_dcmpeq>
 80072dc:	b918      	cbnz	r0, 80072e6 <__cvt+0xba>
 80072de:	f1c4 0401 	rsb	r4, r4, #1
 80072e2:	f8ca 4000 	str.w	r4, [sl]
 80072e6:	f8da 3000 	ldr.w	r3, [sl]
 80072ea:	4499      	add	r9, r3
 80072ec:	e7d3      	b.n	8007296 <__cvt+0x6a>
 80072ee:	1c59      	adds	r1, r3, #1
 80072f0:	9103      	str	r1, [sp, #12]
 80072f2:	701a      	strb	r2, [r3, #0]
 80072f4:	e7d9      	b.n	80072aa <__cvt+0x7e>

080072f6 <__exponent>:
 80072f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072f8:	2900      	cmp	r1, #0
 80072fa:	bfba      	itte	lt
 80072fc:	4249      	neglt	r1, r1
 80072fe:	232d      	movlt	r3, #45	@ 0x2d
 8007300:	232b      	movge	r3, #43	@ 0x2b
 8007302:	2909      	cmp	r1, #9
 8007304:	7002      	strb	r2, [r0, #0]
 8007306:	7043      	strb	r3, [r0, #1]
 8007308:	dd29      	ble.n	800735e <__exponent+0x68>
 800730a:	f10d 0307 	add.w	r3, sp, #7
 800730e:	461d      	mov	r5, r3
 8007310:	270a      	movs	r7, #10
 8007312:	461a      	mov	r2, r3
 8007314:	fbb1 f6f7 	udiv	r6, r1, r7
 8007318:	fb07 1416 	mls	r4, r7, r6, r1
 800731c:	3430      	adds	r4, #48	@ 0x30
 800731e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007322:	460c      	mov	r4, r1
 8007324:	2c63      	cmp	r4, #99	@ 0x63
 8007326:	f103 33ff 	add.w	r3, r3, #4294967295
 800732a:	4631      	mov	r1, r6
 800732c:	dcf1      	bgt.n	8007312 <__exponent+0x1c>
 800732e:	3130      	adds	r1, #48	@ 0x30
 8007330:	1e94      	subs	r4, r2, #2
 8007332:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007336:	1c41      	adds	r1, r0, #1
 8007338:	4623      	mov	r3, r4
 800733a:	42ab      	cmp	r3, r5
 800733c:	d30a      	bcc.n	8007354 <__exponent+0x5e>
 800733e:	f10d 0309 	add.w	r3, sp, #9
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	42ac      	cmp	r4, r5
 8007346:	bf88      	it	hi
 8007348:	2300      	movhi	r3, #0
 800734a:	3302      	adds	r3, #2
 800734c:	4403      	add	r3, r0
 800734e:	1a18      	subs	r0, r3, r0
 8007350:	b003      	add	sp, #12
 8007352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007354:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007358:	f801 6f01 	strb.w	r6, [r1, #1]!
 800735c:	e7ed      	b.n	800733a <__exponent+0x44>
 800735e:	2330      	movs	r3, #48	@ 0x30
 8007360:	3130      	adds	r1, #48	@ 0x30
 8007362:	7083      	strb	r3, [r0, #2]
 8007364:	70c1      	strb	r1, [r0, #3]
 8007366:	1d03      	adds	r3, r0, #4
 8007368:	e7f1      	b.n	800734e <__exponent+0x58>
	...

0800736c <_printf_float>:
 800736c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007370:	b08d      	sub	sp, #52	@ 0x34
 8007372:	460c      	mov	r4, r1
 8007374:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007378:	4616      	mov	r6, r2
 800737a:	461f      	mov	r7, r3
 800737c:	4605      	mov	r5, r0
 800737e:	f000 ff1b 	bl	80081b8 <_localeconv_r>
 8007382:	6803      	ldr	r3, [r0, #0]
 8007384:	9304      	str	r3, [sp, #16]
 8007386:	4618      	mov	r0, r3
 8007388:	f7f8 ff7a 	bl	8000280 <strlen>
 800738c:	2300      	movs	r3, #0
 800738e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007390:	f8d8 3000 	ldr.w	r3, [r8]
 8007394:	9005      	str	r0, [sp, #20]
 8007396:	3307      	adds	r3, #7
 8007398:	f023 0307 	bic.w	r3, r3, #7
 800739c:	f103 0208 	add.w	r2, r3, #8
 80073a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80073a4:	f8d4 b000 	ldr.w	fp, [r4]
 80073a8:	f8c8 2000 	str.w	r2, [r8]
 80073ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80073b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80073b4:	9307      	str	r3, [sp, #28]
 80073b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80073ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80073be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073c2:	4b9c      	ldr	r3, [pc, #624]	@ (8007634 <_printf_float+0x2c8>)
 80073c4:	f04f 32ff 	mov.w	r2, #4294967295
 80073c8:	f7f9 fbb8 	bl	8000b3c <__aeabi_dcmpun>
 80073cc:	bb70      	cbnz	r0, 800742c <_printf_float+0xc0>
 80073ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073d2:	4b98      	ldr	r3, [pc, #608]	@ (8007634 <_printf_float+0x2c8>)
 80073d4:	f04f 32ff 	mov.w	r2, #4294967295
 80073d8:	f7f9 fb92 	bl	8000b00 <__aeabi_dcmple>
 80073dc:	bb30      	cbnz	r0, 800742c <_printf_float+0xc0>
 80073de:	2200      	movs	r2, #0
 80073e0:	2300      	movs	r3, #0
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	f7f9 fb81 	bl	8000aec <__aeabi_dcmplt>
 80073ea:	b110      	cbz	r0, 80073f2 <_printf_float+0x86>
 80073ec:	232d      	movs	r3, #45	@ 0x2d
 80073ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80073f2:	4a91      	ldr	r2, [pc, #580]	@ (8007638 <_printf_float+0x2cc>)
 80073f4:	4b91      	ldr	r3, [pc, #580]	@ (800763c <_printf_float+0x2d0>)
 80073f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80073fa:	bf94      	ite	ls
 80073fc:	4690      	movls	r8, r2
 80073fe:	4698      	movhi	r8, r3
 8007400:	2303      	movs	r3, #3
 8007402:	6123      	str	r3, [r4, #16]
 8007404:	f02b 0304 	bic.w	r3, fp, #4
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	f04f 0900 	mov.w	r9, #0
 800740e:	9700      	str	r7, [sp, #0]
 8007410:	4633      	mov	r3, r6
 8007412:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007414:	4621      	mov	r1, r4
 8007416:	4628      	mov	r0, r5
 8007418:	f000 f9d2 	bl	80077c0 <_printf_common>
 800741c:	3001      	adds	r0, #1
 800741e:	f040 808d 	bne.w	800753c <_printf_float+0x1d0>
 8007422:	f04f 30ff 	mov.w	r0, #4294967295
 8007426:	b00d      	add	sp, #52	@ 0x34
 8007428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742c:	4642      	mov	r2, r8
 800742e:	464b      	mov	r3, r9
 8007430:	4640      	mov	r0, r8
 8007432:	4649      	mov	r1, r9
 8007434:	f7f9 fb82 	bl	8000b3c <__aeabi_dcmpun>
 8007438:	b140      	cbz	r0, 800744c <_printf_float+0xe0>
 800743a:	464b      	mov	r3, r9
 800743c:	2b00      	cmp	r3, #0
 800743e:	bfbc      	itt	lt
 8007440:	232d      	movlt	r3, #45	@ 0x2d
 8007442:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007446:	4a7e      	ldr	r2, [pc, #504]	@ (8007640 <_printf_float+0x2d4>)
 8007448:	4b7e      	ldr	r3, [pc, #504]	@ (8007644 <_printf_float+0x2d8>)
 800744a:	e7d4      	b.n	80073f6 <_printf_float+0x8a>
 800744c:	6863      	ldr	r3, [r4, #4]
 800744e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007452:	9206      	str	r2, [sp, #24]
 8007454:	1c5a      	adds	r2, r3, #1
 8007456:	d13b      	bne.n	80074d0 <_printf_float+0x164>
 8007458:	2306      	movs	r3, #6
 800745a:	6063      	str	r3, [r4, #4]
 800745c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007460:	2300      	movs	r3, #0
 8007462:	6022      	str	r2, [r4, #0]
 8007464:	9303      	str	r3, [sp, #12]
 8007466:	ab0a      	add	r3, sp, #40	@ 0x28
 8007468:	e9cd a301 	strd	sl, r3, [sp, #4]
 800746c:	ab09      	add	r3, sp, #36	@ 0x24
 800746e:	9300      	str	r3, [sp, #0]
 8007470:	6861      	ldr	r1, [r4, #4]
 8007472:	ec49 8b10 	vmov	d0, r8, r9
 8007476:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800747a:	4628      	mov	r0, r5
 800747c:	f7ff fed6 	bl	800722c <__cvt>
 8007480:	9b06      	ldr	r3, [sp, #24]
 8007482:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007484:	2b47      	cmp	r3, #71	@ 0x47
 8007486:	4680      	mov	r8, r0
 8007488:	d129      	bne.n	80074de <_printf_float+0x172>
 800748a:	1cc8      	adds	r0, r1, #3
 800748c:	db02      	blt.n	8007494 <_printf_float+0x128>
 800748e:	6863      	ldr	r3, [r4, #4]
 8007490:	4299      	cmp	r1, r3
 8007492:	dd41      	ble.n	8007518 <_printf_float+0x1ac>
 8007494:	f1aa 0a02 	sub.w	sl, sl, #2
 8007498:	fa5f fa8a 	uxtb.w	sl, sl
 800749c:	3901      	subs	r1, #1
 800749e:	4652      	mov	r2, sl
 80074a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80074a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80074a6:	f7ff ff26 	bl	80072f6 <__exponent>
 80074aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074ac:	1813      	adds	r3, r2, r0
 80074ae:	2a01      	cmp	r2, #1
 80074b0:	4681      	mov	r9, r0
 80074b2:	6123      	str	r3, [r4, #16]
 80074b4:	dc02      	bgt.n	80074bc <_printf_float+0x150>
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	07d2      	lsls	r2, r2, #31
 80074ba:	d501      	bpl.n	80074c0 <_printf_float+0x154>
 80074bc:	3301      	adds	r3, #1
 80074be:	6123      	str	r3, [r4, #16]
 80074c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0a2      	beq.n	800740e <_printf_float+0xa2>
 80074c8:	232d      	movs	r3, #45	@ 0x2d
 80074ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ce:	e79e      	b.n	800740e <_printf_float+0xa2>
 80074d0:	9a06      	ldr	r2, [sp, #24]
 80074d2:	2a47      	cmp	r2, #71	@ 0x47
 80074d4:	d1c2      	bne.n	800745c <_printf_float+0xf0>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1c0      	bne.n	800745c <_printf_float+0xf0>
 80074da:	2301      	movs	r3, #1
 80074dc:	e7bd      	b.n	800745a <_printf_float+0xee>
 80074de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074e2:	d9db      	bls.n	800749c <_printf_float+0x130>
 80074e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80074e8:	d118      	bne.n	800751c <_printf_float+0x1b0>
 80074ea:	2900      	cmp	r1, #0
 80074ec:	6863      	ldr	r3, [r4, #4]
 80074ee:	dd0b      	ble.n	8007508 <_printf_float+0x19c>
 80074f0:	6121      	str	r1, [r4, #16]
 80074f2:	b913      	cbnz	r3, 80074fa <_printf_float+0x18e>
 80074f4:	6822      	ldr	r2, [r4, #0]
 80074f6:	07d0      	lsls	r0, r2, #31
 80074f8:	d502      	bpl.n	8007500 <_printf_float+0x194>
 80074fa:	3301      	adds	r3, #1
 80074fc:	440b      	add	r3, r1
 80074fe:	6123      	str	r3, [r4, #16]
 8007500:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007502:	f04f 0900 	mov.w	r9, #0
 8007506:	e7db      	b.n	80074c0 <_printf_float+0x154>
 8007508:	b913      	cbnz	r3, 8007510 <_printf_float+0x1a4>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	07d2      	lsls	r2, r2, #31
 800750e:	d501      	bpl.n	8007514 <_printf_float+0x1a8>
 8007510:	3302      	adds	r3, #2
 8007512:	e7f4      	b.n	80074fe <_printf_float+0x192>
 8007514:	2301      	movs	r3, #1
 8007516:	e7f2      	b.n	80074fe <_printf_float+0x192>
 8007518:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800751c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800751e:	4299      	cmp	r1, r3
 8007520:	db05      	blt.n	800752e <_printf_float+0x1c2>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	6121      	str	r1, [r4, #16]
 8007526:	07d8      	lsls	r0, r3, #31
 8007528:	d5ea      	bpl.n	8007500 <_printf_float+0x194>
 800752a:	1c4b      	adds	r3, r1, #1
 800752c:	e7e7      	b.n	80074fe <_printf_float+0x192>
 800752e:	2900      	cmp	r1, #0
 8007530:	bfd4      	ite	le
 8007532:	f1c1 0202 	rsble	r2, r1, #2
 8007536:	2201      	movgt	r2, #1
 8007538:	4413      	add	r3, r2
 800753a:	e7e0      	b.n	80074fe <_printf_float+0x192>
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	055a      	lsls	r2, r3, #21
 8007540:	d407      	bmi.n	8007552 <_printf_float+0x1e6>
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	4642      	mov	r2, r8
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	47b8      	blx	r7
 800754c:	3001      	adds	r0, #1
 800754e:	d12b      	bne.n	80075a8 <_printf_float+0x23c>
 8007550:	e767      	b.n	8007422 <_printf_float+0xb6>
 8007552:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007556:	f240 80dd 	bls.w	8007714 <_printf_float+0x3a8>
 800755a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800755e:	2200      	movs	r2, #0
 8007560:	2300      	movs	r3, #0
 8007562:	f7f9 fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 8007566:	2800      	cmp	r0, #0
 8007568:	d033      	beq.n	80075d2 <_printf_float+0x266>
 800756a:	4a37      	ldr	r2, [pc, #220]	@ (8007648 <_printf_float+0x2dc>)
 800756c:	2301      	movs	r3, #1
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	f43f af54 	beq.w	8007422 <_printf_float+0xb6>
 800757a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800757e:	4543      	cmp	r3, r8
 8007580:	db02      	blt.n	8007588 <_printf_float+0x21c>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	07d8      	lsls	r0, r3, #31
 8007586:	d50f      	bpl.n	80075a8 <_printf_float+0x23c>
 8007588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800758c:	4631      	mov	r1, r6
 800758e:	4628      	mov	r0, r5
 8007590:	47b8      	blx	r7
 8007592:	3001      	adds	r0, #1
 8007594:	f43f af45 	beq.w	8007422 <_printf_float+0xb6>
 8007598:	f04f 0900 	mov.w	r9, #0
 800759c:	f108 38ff 	add.w	r8, r8, #4294967295
 80075a0:	f104 0a1a 	add.w	sl, r4, #26
 80075a4:	45c8      	cmp	r8, r9
 80075a6:	dc09      	bgt.n	80075bc <_printf_float+0x250>
 80075a8:	6823      	ldr	r3, [r4, #0]
 80075aa:	079b      	lsls	r3, r3, #30
 80075ac:	f100 8103 	bmi.w	80077b6 <_printf_float+0x44a>
 80075b0:	68e0      	ldr	r0, [r4, #12]
 80075b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075b4:	4298      	cmp	r0, r3
 80075b6:	bfb8      	it	lt
 80075b8:	4618      	movlt	r0, r3
 80075ba:	e734      	b.n	8007426 <_printf_float+0xba>
 80075bc:	2301      	movs	r3, #1
 80075be:	4652      	mov	r2, sl
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	f43f af2b 	beq.w	8007422 <_printf_float+0xb6>
 80075cc:	f109 0901 	add.w	r9, r9, #1
 80075d0:	e7e8      	b.n	80075a4 <_printf_float+0x238>
 80075d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dc39      	bgt.n	800764c <_printf_float+0x2e0>
 80075d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007648 <_printf_float+0x2dc>)
 80075da:	2301      	movs	r3, #1
 80075dc:	4631      	mov	r1, r6
 80075de:	4628      	mov	r0, r5
 80075e0:	47b8      	blx	r7
 80075e2:	3001      	adds	r0, #1
 80075e4:	f43f af1d 	beq.w	8007422 <_printf_float+0xb6>
 80075e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80075ec:	ea59 0303 	orrs.w	r3, r9, r3
 80075f0:	d102      	bne.n	80075f8 <_printf_float+0x28c>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	07d9      	lsls	r1, r3, #31
 80075f6:	d5d7      	bpl.n	80075a8 <_printf_float+0x23c>
 80075f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075fc:	4631      	mov	r1, r6
 80075fe:	4628      	mov	r0, r5
 8007600:	47b8      	blx	r7
 8007602:	3001      	adds	r0, #1
 8007604:	f43f af0d 	beq.w	8007422 <_printf_float+0xb6>
 8007608:	f04f 0a00 	mov.w	sl, #0
 800760c:	f104 0b1a 	add.w	fp, r4, #26
 8007610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007612:	425b      	negs	r3, r3
 8007614:	4553      	cmp	r3, sl
 8007616:	dc01      	bgt.n	800761c <_printf_float+0x2b0>
 8007618:	464b      	mov	r3, r9
 800761a:	e793      	b.n	8007544 <_printf_float+0x1d8>
 800761c:	2301      	movs	r3, #1
 800761e:	465a      	mov	r2, fp
 8007620:	4631      	mov	r1, r6
 8007622:	4628      	mov	r0, r5
 8007624:	47b8      	blx	r7
 8007626:	3001      	adds	r0, #1
 8007628:	f43f aefb 	beq.w	8007422 <_printf_float+0xb6>
 800762c:	f10a 0a01 	add.w	sl, sl, #1
 8007630:	e7ee      	b.n	8007610 <_printf_float+0x2a4>
 8007632:	bf00      	nop
 8007634:	7fefffff 	.word	0x7fefffff
 8007638:	0800c708 	.word	0x0800c708
 800763c:	0800c70c 	.word	0x0800c70c
 8007640:	0800c710 	.word	0x0800c710
 8007644:	0800c714 	.word	0x0800c714
 8007648:	0800caa8 	.word	0x0800caa8
 800764c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800764e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007652:	4553      	cmp	r3, sl
 8007654:	bfa8      	it	ge
 8007656:	4653      	movge	r3, sl
 8007658:	2b00      	cmp	r3, #0
 800765a:	4699      	mov	r9, r3
 800765c:	dc36      	bgt.n	80076cc <_printf_float+0x360>
 800765e:	f04f 0b00 	mov.w	fp, #0
 8007662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007666:	f104 021a 	add.w	r2, r4, #26
 800766a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800766c:	9306      	str	r3, [sp, #24]
 800766e:	eba3 0309 	sub.w	r3, r3, r9
 8007672:	455b      	cmp	r3, fp
 8007674:	dc31      	bgt.n	80076da <_printf_float+0x36e>
 8007676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007678:	459a      	cmp	sl, r3
 800767a:	dc3a      	bgt.n	80076f2 <_printf_float+0x386>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	07da      	lsls	r2, r3, #31
 8007680:	d437      	bmi.n	80076f2 <_printf_float+0x386>
 8007682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007684:	ebaa 0903 	sub.w	r9, sl, r3
 8007688:	9b06      	ldr	r3, [sp, #24]
 800768a:	ebaa 0303 	sub.w	r3, sl, r3
 800768e:	4599      	cmp	r9, r3
 8007690:	bfa8      	it	ge
 8007692:	4699      	movge	r9, r3
 8007694:	f1b9 0f00 	cmp.w	r9, #0
 8007698:	dc33      	bgt.n	8007702 <_printf_float+0x396>
 800769a:	f04f 0800 	mov.w	r8, #0
 800769e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076a2:	f104 0b1a 	add.w	fp, r4, #26
 80076a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a8:	ebaa 0303 	sub.w	r3, sl, r3
 80076ac:	eba3 0309 	sub.w	r3, r3, r9
 80076b0:	4543      	cmp	r3, r8
 80076b2:	f77f af79 	ble.w	80075a8 <_printf_float+0x23c>
 80076b6:	2301      	movs	r3, #1
 80076b8:	465a      	mov	r2, fp
 80076ba:	4631      	mov	r1, r6
 80076bc:	4628      	mov	r0, r5
 80076be:	47b8      	blx	r7
 80076c0:	3001      	adds	r0, #1
 80076c2:	f43f aeae 	beq.w	8007422 <_printf_float+0xb6>
 80076c6:	f108 0801 	add.w	r8, r8, #1
 80076ca:	e7ec      	b.n	80076a6 <_printf_float+0x33a>
 80076cc:	4642      	mov	r2, r8
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d1c2      	bne.n	800765e <_printf_float+0x2f2>
 80076d8:	e6a3      	b.n	8007422 <_printf_float+0xb6>
 80076da:	2301      	movs	r3, #1
 80076dc:	4631      	mov	r1, r6
 80076de:	4628      	mov	r0, r5
 80076e0:	9206      	str	r2, [sp, #24]
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	f43f ae9c 	beq.w	8007422 <_printf_float+0xb6>
 80076ea:	9a06      	ldr	r2, [sp, #24]
 80076ec:	f10b 0b01 	add.w	fp, fp, #1
 80076f0:	e7bb      	b.n	800766a <_printf_float+0x2fe>
 80076f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	d1c0      	bne.n	8007682 <_printf_float+0x316>
 8007700:	e68f      	b.n	8007422 <_printf_float+0xb6>
 8007702:	9a06      	ldr	r2, [sp, #24]
 8007704:	464b      	mov	r3, r9
 8007706:	4442      	add	r2, r8
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	d1c3      	bne.n	800769a <_printf_float+0x32e>
 8007712:	e686      	b.n	8007422 <_printf_float+0xb6>
 8007714:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007718:	f1ba 0f01 	cmp.w	sl, #1
 800771c:	dc01      	bgt.n	8007722 <_printf_float+0x3b6>
 800771e:	07db      	lsls	r3, r3, #31
 8007720:	d536      	bpl.n	8007790 <_printf_float+0x424>
 8007722:	2301      	movs	r3, #1
 8007724:	4642      	mov	r2, r8
 8007726:	4631      	mov	r1, r6
 8007728:	4628      	mov	r0, r5
 800772a:	47b8      	blx	r7
 800772c:	3001      	adds	r0, #1
 800772e:	f43f ae78 	beq.w	8007422 <_printf_float+0xb6>
 8007732:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007736:	4631      	mov	r1, r6
 8007738:	4628      	mov	r0, r5
 800773a:	47b8      	blx	r7
 800773c:	3001      	adds	r0, #1
 800773e:	f43f ae70 	beq.w	8007422 <_printf_float+0xb6>
 8007742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800774e:	f7f9 f9c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007752:	b9c0      	cbnz	r0, 8007786 <_printf_float+0x41a>
 8007754:	4653      	mov	r3, sl
 8007756:	f108 0201 	add.w	r2, r8, #1
 800775a:	4631      	mov	r1, r6
 800775c:	4628      	mov	r0, r5
 800775e:	47b8      	blx	r7
 8007760:	3001      	adds	r0, #1
 8007762:	d10c      	bne.n	800777e <_printf_float+0x412>
 8007764:	e65d      	b.n	8007422 <_printf_float+0xb6>
 8007766:	2301      	movs	r3, #1
 8007768:	465a      	mov	r2, fp
 800776a:	4631      	mov	r1, r6
 800776c:	4628      	mov	r0, r5
 800776e:	47b8      	blx	r7
 8007770:	3001      	adds	r0, #1
 8007772:	f43f ae56 	beq.w	8007422 <_printf_float+0xb6>
 8007776:	f108 0801 	add.w	r8, r8, #1
 800777a:	45d0      	cmp	r8, sl
 800777c:	dbf3      	blt.n	8007766 <_printf_float+0x3fa>
 800777e:	464b      	mov	r3, r9
 8007780:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007784:	e6df      	b.n	8007546 <_printf_float+0x1da>
 8007786:	f04f 0800 	mov.w	r8, #0
 800778a:	f104 0b1a 	add.w	fp, r4, #26
 800778e:	e7f4      	b.n	800777a <_printf_float+0x40e>
 8007790:	2301      	movs	r3, #1
 8007792:	4642      	mov	r2, r8
 8007794:	e7e1      	b.n	800775a <_printf_float+0x3ee>
 8007796:	2301      	movs	r3, #1
 8007798:	464a      	mov	r2, r9
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	47b8      	blx	r7
 80077a0:	3001      	adds	r0, #1
 80077a2:	f43f ae3e 	beq.w	8007422 <_printf_float+0xb6>
 80077a6:	f108 0801 	add.w	r8, r8, #1
 80077aa:	68e3      	ldr	r3, [r4, #12]
 80077ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077ae:	1a5b      	subs	r3, r3, r1
 80077b0:	4543      	cmp	r3, r8
 80077b2:	dcf0      	bgt.n	8007796 <_printf_float+0x42a>
 80077b4:	e6fc      	b.n	80075b0 <_printf_float+0x244>
 80077b6:	f04f 0800 	mov.w	r8, #0
 80077ba:	f104 0919 	add.w	r9, r4, #25
 80077be:	e7f4      	b.n	80077aa <_printf_float+0x43e>

080077c0 <_printf_common>:
 80077c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c4:	4616      	mov	r6, r2
 80077c6:	4698      	mov	r8, r3
 80077c8:	688a      	ldr	r2, [r1, #8]
 80077ca:	690b      	ldr	r3, [r1, #16]
 80077cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077d0:	4293      	cmp	r3, r2
 80077d2:	bfb8      	it	lt
 80077d4:	4613      	movlt	r3, r2
 80077d6:	6033      	str	r3, [r6, #0]
 80077d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077dc:	4607      	mov	r7, r0
 80077de:	460c      	mov	r4, r1
 80077e0:	b10a      	cbz	r2, 80077e6 <_printf_common+0x26>
 80077e2:	3301      	adds	r3, #1
 80077e4:	6033      	str	r3, [r6, #0]
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	0699      	lsls	r1, r3, #26
 80077ea:	bf42      	ittt	mi
 80077ec:	6833      	ldrmi	r3, [r6, #0]
 80077ee:	3302      	addmi	r3, #2
 80077f0:	6033      	strmi	r3, [r6, #0]
 80077f2:	6825      	ldr	r5, [r4, #0]
 80077f4:	f015 0506 	ands.w	r5, r5, #6
 80077f8:	d106      	bne.n	8007808 <_printf_common+0x48>
 80077fa:	f104 0a19 	add.w	sl, r4, #25
 80077fe:	68e3      	ldr	r3, [r4, #12]
 8007800:	6832      	ldr	r2, [r6, #0]
 8007802:	1a9b      	subs	r3, r3, r2
 8007804:	42ab      	cmp	r3, r5
 8007806:	dc26      	bgt.n	8007856 <_printf_common+0x96>
 8007808:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800780c:	6822      	ldr	r2, [r4, #0]
 800780e:	3b00      	subs	r3, #0
 8007810:	bf18      	it	ne
 8007812:	2301      	movne	r3, #1
 8007814:	0692      	lsls	r2, r2, #26
 8007816:	d42b      	bmi.n	8007870 <_printf_common+0xb0>
 8007818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800781c:	4641      	mov	r1, r8
 800781e:	4638      	mov	r0, r7
 8007820:	47c8      	blx	r9
 8007822:	3001      	adds	r0, #1
 8007824:	d01e      	beq.n	8007864 <_printf_common+0xa4>
 8007826:	6823      	ldr	r3, [r4, #0]
 8007828:	6922      	ldr	r2, [r4, #16]
 800782a:	f003 0306 	and.w	r3, r3, #6
 800782e:	2b04      	cmp	r3, #4
 8007830:	bf02      	ittt	eq
 8007832:	68e5      	ldreq	r5, [r4, #12]
 8007834:	6833      	ldreq	r3, [r6, #0]
 8007836:	1aed      	subeq	r5, r5, r3
 8007838:	68a3      	ldr	r3, [r4, #8]
 800783a:	bf0c      	ite	eq
 800783c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007840:	2500      	movne	r5, #0
 8007842:	4293      	cmp	r3, r2
 8007844:	bfc4      	itt	gt
 8007846:	1a9b      	subgt	r3, r3, r2
 8007848:	18ed      	addgt	r5, r5, r3
 800784a:	2600      	movs	r6, #0
 800784c:	341a      	adds	r4, #26
 800784e:	42b5      	cmp	r5, r6
 8007850:	d11a      	bne.n	8007888 <_printf_common+0xc8>
 8007852:	2000      	movs	r0, #0
 8007854:	e008      	b.n	8007868 <_printf_common+0xa8>
 8007856:	2301      	movs	r3, #1
 8007858:	4652      	mov	r2, sl
 800785a:	4641      	mov	r1, r8
 800785c:	4638      	mov	r0, r7
 800785e:	47c8      	blx	r9
 8007860:	3001      	adds	r0, #1
 8007862:	d103      	bne.n	800786c <_printf_common+0xac>
 8007864:	f04f 30ff 	mov.w	r0, #4294967295
 8007868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800786c:	3501      	adds	r5, #1
 800786e:	e7c6      	b.n	80077fe <_printf_common+0x3e>
 8007870:	18e1      	adds	r1, r4, r3
 8007872:	1c5a      	adds	r2, r3, #1
 8007874:	2030      	movs	r0, #48	@ 0x30
 8007876:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800787a:	4422      	add	r2, r4
 800787c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007880:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007884:	3302      	adds	r3, #2
 8007886:	e7c7      	b.n	8007818 <_printf_common+0x58>
 8007888:	2301      	movs	r3, #1
 800788a:	4622      	mov	r2, r4
 800788c:	4641      	mov	r1, r8
 800788e:	4638      	mov	r0, r7
 8007890:	47c8      	blx	r9
 8007892:	3001      	adds	r0, #1
 8007894:	d0e6      	beq.n	8007864 <_printf_common+0xa4>
 8007896:	3601      	adds	r6, #1
 8007898:	e7d9      	b.n	800784e <_printf_common+0x8e>
	...

0800789c <_printf_i>:
 800789c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	7e0f      	ldrb	r7, [r1, #24]
 80078a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078a4:	2f78      	cmp	r7, #120	@ 0x78
 80078a6:	4691      	mov	r9, r2
 80078a8:	4680      	mov	r8, r0
 80078aa:	460c      	mov	r4, r1
 80078ac:	469a      	mov	sl, r3
 80078ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078b2:	d807      	bhi.n	80078c4 <_printf_i+0x28>
 80078b4:	2f62      	cmp	r7, #98	@ 0x62
 80078b6:	d80a      	bhi.n	80078ce <_printf_i+0x32>
 80078b8:	2f00      	cmp	r7, #0
 80078ba:	f000 80d2 	beq.w	8007a62 <_printf_i+0x1c6>
 80078be:	2f58      	cmp	r7, #88	@ 0x58
 80078c0:	f000 80b9 	beq.w	8007a36 <_printf_i+0x19a>
 80078c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078cc:	e03a      	b.n	8007944 <_printf_i+0xa8>
 80078ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078d2:	2b15      	cmp	r3, #21
 80078d4:	d8f6      	bhi.n	80078c4 <_printf_i+0x28>
 80078d6:	a101      	add	r1, pc, #4	@ (adr r1, 80078dc <_printf_i+0x40>)
 80078d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078dc:	08007935 	.word	0x08007935
 80078e0:	08007949 	.word	0x08007949
 80078e4:	080078c5 	.word	0x080078c5
 80078e8:	080078c5 	.word	0x080078c5
 80078ec:	080078c5 	.word	0x080078c5
 80078f0:	080078c5 	.word	0x080078c5
 80078f4:	08007949 	.word	0x08007949
 80078f8:	080078c5 	.word	0x080078c5
 80078fc:	080078c5 	.word	0x080078c5
 8007900:	080078c5 	.word	0x080078c5
 8007904:	080078c5 	.word	0x080078c5
 8007908:	08007a49 	.word	0x08007a49
 800790c:	08007973 	.word	0x08007973
 8007910:	08007a03 	.word	0x08007a03
 8007914:	080078c5 	.word	0x080078c5
 8007918:	080078c5 	.word	0x080078c5
 800791c:	08007a6b 	.word	0x08007a6b
 8007920:	080078c5 	.word	0x080078c5
 8007924:	08007973 	.word	0x08007973
 8007928:	080078c5 	.word	0x080078c5
 800792c:	080078c5 	.word	0x080078c5
 8007930:	08007a0b 	.word	0x08007a0b
 8007934:	6833      	ldr	r3, [r6, #0]
 8007936:	1d1a      	adds	r2, r3, #4
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6032      	str	r2, [r6, #0]
 800793c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007940:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007944:	2301      	movs	r3, #1
 8007946:	e09d      	b.n	8007a84 <_printf_i+0x1e8>
 8007948:	6833      	ldr	r3, [r6, #0]
 800794a:	6820      	ldr	r0, [r4, #0]
 800794c:	1d19      	adds	r1, r3, #4
 800794e:	6031      	str	r1, [r6, #0]
 8007950:	0606      	lsls	r6, r0, #24
 8007952:	d501      	bpl.n	8007958 <_printf_i+0xbc>
 8007954:	681d      	ldr	r5, [r3, #0]
 8007956:	e003      	b.n	8007960 <_printf_i+0xc4>
 8007958:	0645      	lsls	r5, r0, #25
 800795a:	d5fb      	bpl.n	8007954 <_printf_i+0xb8>
 800795c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007960:	2d00      	cmp	r5, #0
 8007962:	da03      	bge.n	800796c <_printf_i+0xd0>
 8007964:	232d      	movs	r3, #45	@ 0x2d
 8007966:	426d      	negs	r5, r5
 8007968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800796c:	4859      	ldr	r0, [pc, #356]	@ (8007ad4 <_printf_i+0x238>)
 800796e:	230a      	movs	r3, #10
 8007970:	e011      	b.n	8007996 <_printf_i+0xfa>
 8007972:	6821      	ldr	r1, [r4, #0]
 8007974:	6833      	ldr	r3, [r6, #0]
 8007976:	0608      	lsls	r0, r1, #24
 8007978:	f853 5b04 	ldr.w	r5, [r3], #4
 800797c:	d402      	bmi.n	8007984 <_printf_i+0xe8>
 800797e:	0649      	lsls	r1, r1, #25
 8007980:	bf48      	it	mi
 8007982:	b2ad      	uxthmi	r5, r5
 8007984:	2f6f      	cmp	r7, #111	@ 0x6f
 8007986:	4853      	ldr	r0, [pc, #332]	@ (8007ad4 <_printf_i+0x238>)
 8007988:	6033      	str	r3, [r6, #0]
 800798a:	bf14      	ite	ne
 800798c:	230a      	movne	r3, #10
 800798e:	2308      	moveq	r3, #8
 8007990:	2100      	movs	r1, #0
 8007992:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007996:	6866      	ldr	r6, [r4, #4]
 8007998:	60a6      	str	r6, [r4, #8]
 800799a:	2e00      	cmp	r6, #0
 800799c:	bfa2      	ittt	ge
 800799e:	6821      	ldrge	r1, [r4, #0]
 80079a0:	f021 0104 	bicge.w	r1, r1, #4
 80079a4:	6021      	strge	r1, [r4, #0]
 80079a6:	b90d      	cbnz	r5, 80079ac <_printf_i+0x110>
 80079a8:	2e00      	cmp	r6, #0
 80079aa:	d04b      	beq.n	8007a44 <_printf_i+0x1a8>
 80079ac:	4616      	mov	r6, r2
 80079ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80079b2:	fb03 5711 	mls	r7, r3, r1, r5
 80079b6:	5dc7      	ldrb	r7, [r0, r7]
 80079b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079bc:	462f      	mov	r7, r5
 80079be:	42bb      	cmp	r3, r7
 80079c0:	460d      	mov	r5, r1
 80079c2:	d9f4      	bls.n	80079ae <_printf_i+0x112>
 80079c4:	2b08      	cmp	r3, #8
 80079c6:	d10b      	bne.n	80079e0 <_printf_i+0x144>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	07df      	lsls	r7, r3, #31
 80079cc:	d508      	bpl.n	80079e0 <_printf_i+0x144>
 80079ce:	6923      	ldr	r3, [r4, #16]
 80079d0:	6861      	ldr	r1, [r4, #4]
 80079d2:	4299      	cmp	r1, r3
 80079d4:	bfde      	ittt	le
 80079d6:	2330      	movle	r3, #48	@ 0x30
 80079d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079e0:	1b92      	subs	r2, r2, r6
 80079e2:	6122      	str	r2, [r4, #16]
 80079e4:	f8cd a000 	str.w	sl, [sp]
 80079e8:	464b      	mov	r3, r9
 80079ea:	aa03      	add	r2, sp, #12
 80079ec:	4621      	mov	r1, r4
 80079ee:	4640      	mov	r0, r8
 80079f0:	f7ff fee6 	bl	80077c0 <_printf_common>
 80079f4:	3001      	adds	r0, #1
 80079f6:	d14a      	bne.n	8007a8e <_printf_i+0x1f2>
 80079f8:	f04f 30ff 	mov.w	r0, #4294967295
 80079fc:	b004      	add	sp, #16
 80079fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	f043 0320 	orr.w	r3, r3, #32
 8007a08:	6023      	str	r3, [r4, #0]
 8007a0a:	4833      	ldr	r0, [pc, #204]	@ (8007ad8 <_printf_i+0x23c>)
 8007a0c:	2778      	movs	r7, #120	@ 0x78
 8007a0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	6831      	ldr	r1, [r6, #0]
 8007a16:	061f      	lsls	r7, r3, #24
 8007a18:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a1c:	d402      	bmi.n	8007a24 <_printf_i+0x188>
 8007a1e:	065f      	lsls	r7, r3, #25
 8007a20:	bf48      	it	mi
 8007a22:	b2ad      	uxthmi	r5, r5
 8007a24:	6031      	str	r1, [r6, #0]
 8007a26:	07d9      	lsls	r1, r3, #31
 8007a28:	bf44      	itt	mi
 8007a2a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a2e:	6023      	strmi	r3, [r4, #0]
 8007a30:	b11d      	cbz	r5, 8007a3a <_printf_i+0x19e>
 8007a32:	2310      	movs	r3, #16
 8007a34:	e7ac      	b.n	8007990 <_printf_i+0xf4>
 8007a36:	4827      	ldr	r0, [pc, #156]	@ (8007ad4 <_printf_i+0x238>)
 8007a38:	e7e9      	b.n	8007a0e <_printf_i+0x172>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	f023 0320 	bic.w	r3, r3, #32
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	e7f6      	b.n	8007a32 <_printf_i+0x196>
 8007a44:	4616      	mov	r6, r2
 8007a46:	e7bd      	b.n	80079c4 <_printf_i+0x128>
 8007a48:	6833      	ldr	r3, [r6, #0]
 8007a4a:	6825      	ldr	r5, [r4, #0]
 8007a4c:	6961      	ldr	r1, [r4, #20]
 8007a4e:	1d18      	adds	r0, r3, #4
 8007a50:	6030      	str	r0, [r6, #0]
 8007a52:	062e      	lsls	r6, r5, #24
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	d501      	bpl.n	8007a5c <_printf_i+0x1c0>
 8007a58:	6019      	str	r1, [r3, #0]
 8007a5a:	e002      	b.n	8007a62 <_printf_i+0x1c6>
 8007a5c:	0668      	lsls	r0, r5, #25
 8007a5e:	d5fb      	bpl.n	8007a58 <_printf_i+0x1bc>
 8007a60:	8019      	strh	r1, [r3, #0]
 8007a62:	2300      	movs	r3, #0
 8007a64:	6123      	str	r3, [r4, #16]
 8007a66:	4616      	mov	r6, r2
 8007a68:	e7bc      	b.n	80079e4 <_printf_i+0x148>
 8007a6a:	6833      	ldr	r3, [r6, #0]
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	6032      	str	r2, [r6, #0]
 8007a70:	681e      	ldr	r6, [r3, #0]
 8007a72:	6862      	ldr	r2, [r4, #4]
 8007a74:	2100      	movs	r1, #0
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7f8 fbb2 	bl	80001e0 <memchr>
 8007a7c:	b108      	cbz	r0, 8007a82 <_printf_i+0x1e6>
 8007a7e:	1b80      	subs	r0, r0, r6
 8007a80:	6060      	str	r0, [r4, #4]
 8007a82:	6863      	ldr	r3, [r4, #4]
 8007a84:	6123      	str	r3, [r4, #16]
 8007a86:	2300      	movs	r3, #0
 8007a88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a8c:	e7aa      	b.n	80079e4 <_printf_i+0x148>
 8007a8e:	6923      	ldr	r3, [r4, #16]
 8007a90:	4632      	mov	r2, r6
 8007a92:	4649      	mov	r1, r9
 8007a94:	4640      	mov	r0, r8
 8007a96:	47d0      	blx	sl
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d0ad      	beq.n	80079f8 <_printf_i+0x15c>
 8007a9c:	6823      	ldr	r3, [r4, #0]
 8007a9e:	079b      	lsls	r3, r3, #30
 8007aa0:	d413      	bmi.n	8007aca <_printf_i+0x22e>
 8007aa2:	68e0      	ldr	r0, [r4, #12]
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	4298      	cmp	r0, r3
 8007aa8:	bfb8      	it	lt
 8007aaa:	4618      	movlt	r0, r3
 8007aac:	e7a6      	b.n	80079fc <_printf_i+0x160>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	4632      	mov	r2, r6
 8007ab2:	4649      	mov	r1, r9
 8007ab4:	4640      	mov	r0, r8
 8007ab6:	47d0      	blx	sl
 8007ab8:	3001      	adds	r0, #1
 8007aba:	d09d      	beq.n	80079f8 <_printf_i+0x15c>
 8007abc:	3501      	adds	r5, #1
 8007abe:	68e3      	ldr	r3, [r4, #12]
 8007ac0:	9903      	ldr	r1, [sp, #12]
 8007ac2:	1a5b      	subs	r3, r3, r1
 8007ac4:	42ab      	cmp	r3, r5
 8007ac6:	dcf2      	bgt.n	8007aae <_printf_i+0x212>
 8007ac8:	e7eb      	b.n	8007aa2 <_printf_i+0x206>
 8007aca:	2500      	movs	r5, #0
 8007acc:	f104 0619 	add.w	r6, r4, #25
 8007ad0:	e7f5      	b.n	8007abe <_printf_i+0x222>
 8007ad2:	bf00      	nop
 8007ad4:	0800c718 	.word	0x0800c718
 8007ad8:	0800c729 	.word	0x0800c729

08007adc <_scanf_float>:
 8007adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	4617      	mov	r7, r2
 8007ae4:	9303      	str	r3, [sp, #12]
 8007ae6:	688b      	ldr	r3, [r1, #8]
 8007ae8:	1e5a      	subs	r2, r3, #1
 8007aea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007aee:	bf81      	itttt	hi
 8007af0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007af4:	eb03 0b05 	addhi.w	fp, r3, r5
 8007af8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007afc:	608b      	strhi	r3, [r1, #8]
 8007afe:	680b      	ldr	r3, [r1, #0]
 8007b00:	460a      	mov	r2, r1
 8007b02:	f04f 0500 	mov.w	r5, #0
 8007b06:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007b0a:	f842 3b1c 	str.w	r3, [r2], #28
 8007b0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b12:	4680      	mov	r8, r0
 8007b14:	460c      	mov	r4, r1
 8007b16:	bf98      	it	ls
 8007b18:	f04f 0b00 	movls.w	fp, #0
 8007b1c:	9201      	str	r2, [sp, #4]
 8007b1e:	4616      	mov	r6, r2
 8007b20:	46aa      	mov	sl, r5
 8007b22:	46a9      	mov	r9, r5
 8007b24:	9502      	str	r5, [sp, #8]
 8007b26:	68a2      	ldr	r2, [r4, #8]
 8007b28:	b152      	cbz	r2, 8007b40 <_scanf_float+0x64>
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007b30:	d864      	bhi.n	8007bfc <_scanf_float+0x120>
 8007b32:	2b40      	cmp	r3, #64	@ 0x40
 8007b34:	d83c      	bhi.n	8007bb0 <_scanf_float+0xd4>
 8007b36:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007b3a:	b2c8      	uxtb	r0, r1
 8007b3c:	280e      	cmp	r0, #14
 8007b3e:	d93a      	bls.n	8007bb6 <_scanf_float+0xda>
 8007b40:	f1b9 0f00 	cmp.w	r9, #0
 8007b44:	d003      	beq.n	8007b4e <_scanf_float+0x72>
 8007b46:	6823      	ldr	r3, [r4, #0]
 8007b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b4c:	6023      	str	r3, [r4, #0]
 8007b4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b52:	f1ba 0f01 	cmp.w	sl, #1
 8007b56:	f200 8117 	bhi.w	8007d88 <_scanf_float+0x2ac>
 8007b5a:	9b01      	ldr	r3, [sp, #4]
 8007b5c:	429e      	cmp	r6, r3
 8007b5e:	f200 8108 	bhi.w	8007d72 <_scanf_float+0x296>
 8007b62:	2001      	movs	r0, #1
 8007b64:	b007      	add	sp, #28
 8007b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007b6e:	2a0d      	cmp	r2, #13
 8007b70:	d8e6      	bhi.n	8007b40 <_scanf_float+0x64>
 8007b72:	a101      	add	r1, pc, #4	@ (adr r1, 8007b78 <_scanf_float+0x9c>)
 8007b74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b78:	08007cbf 	.word	0x08007cbf
 8007b7c:	08007b41 	.word	0x08007b41
 8007b80:	08007b41 	.word	0x08007b41
 8007b84:	08007b41 	.word	0x08007b41
 8007b88:	08007d1f 	.word	0x08007d1f
 8007b8c:	08007cf7 	.word	0x08007cf7
 8007b90:	08007b41 	.word	0x08007b41
 8007b94:	08007b41 	.word	0x08007b41
 8007b98:	08007ccd 	.word	0x08007ccd
 8007b9c:	08007b41 	.word	0x08007b41
 8007ba0:	08007b41 	.word	0x08007b41
 8007ba4:	08007b41 	.word	0x08007b41
 8007ba8:	08007b41 	.word	0x08007b41
 8007bac:	08007c85 	.word	0x08007c85
 8007bb0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007bb4:	e7db      	b.n	8007b6e <_scanf_float+0x92>
 8007bb6:	290e      	cmp	r1, #14
 8007bb8:	d8c2      	bhi.n	8007b40 <_scanf_float+0x64>
 8007bba:	a001      	add	r0, pc, #4	@ (adr r0, 8007bc0 <_scanf_float+0xe4>)
 8007bbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007bc0:	08007c75 	.word	0x08007c75
 8007bc4:	08007b41 	.word	0x08007b41
 8007bc8:	08007c75 	.word	0x08007c75
 8007bcc:	08007d0b 	.word	0x08007d0b
 8007bd0:	08007b41 	.word	0x08007b41
 8007bd4:	08007c1d 	.word	0x08007c1d
 8007bd8:	08007c5b 	.word	0x08007c5b
 8007bdc:	08007c5b 	.word	0x08007c5b
 8007be0:	08007c5b 	.word	0x08007c5b
 8007be4:	08007c5b 	.word	0x08007c5b
 8007be8:	08007c5b 	.word	0x08007c5b
 8007bec:	08007c5b 	.word	0x08007c5b
 8007bf0:	08007c5b 	.word	0x08007c5b
 8007bf4:	08007c5b 	.word	0x08007c5b
 8007bf8:	08007c5b 	.word	0x08007c5b
 8007bfc:	2b6e      	cmp	r3, #110	@ 0x6e
 8007bfe:	d809      	bhi.n	8007c14 <_scanf_float+0x138>
 8007c00:	2b60      	cmp	r3, #96	@ 0x60
 8007c02:	d8b2      	bhi.n	8007b6a <_scanf_float+0x8e>
 8007c04:	2b54      	cmp	r3, #84	@ 0x54
 8007c06:	d07b      	beq.n	8007d00 <_scanf_float+0x224>
 8007c08:	2b59      	cmp	r3, #89	@ 0x59
 8007c0a:	d199      	bne.n	8007b40 <_scanf_float+0x64>
 8007c0c:	2d07      	cmp	r5, #7
 8007c0e:	d197      	bne.n	8007b40 <_scanf_float+0x64>
 8007c10:	2508      	movs	r5, #8
 8007c12:	e02c      	b.n	8007c6e <_scanf_float+0x192>
 8007c14:	2b74      	cmp	r3, #116	@ 0x74
 8007c16:	d073      	beq.n	8007d00 <_scanf_float+0x224>
 8007c18:	2b79      	cmp	r3, #121	@ 0x79
 8007c1a:	e7f6      	b.n	8007c0a <_scanf_float+0x12e>
 8007c1c:	6821      	ldr	r1, [r4, #0]
 8007c1e:	05c8      	lsls	r0, r1, #23
 8007c20:	d51b      	bpl.n	8007c5a <_scanf_float+0x17e>
 8007c22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007c26:	6021      	str	r1, [r4, #0]
 8007c28:	f109 0901 	add.w	r9, r9, #1
 8007c2c:	f1bb 0f00 	cmp.w	fp, #0
 8007c30:	d003      	beq.n	8007c3a <_scanf_float+0x15e>
 8007c32:	3201      	adds	r2, #1
 8007c34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007c38:	60a2      	str	r2, [r4, #8]
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	60a3      	str	r3, [r4, #8]
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	3301      	adds	r3, #1
 8007c44:	6123      	str	r3, [r4, #16]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	607b      	str	r3, [r7, #4]
 8007c4e:	f340 8087 	ble.w	8007d60 <_scanf_float+0x284>
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	3301      	adds	r3, #1
 8007c56:	603b      	str	r3, [r7, #0]
 8007c58:	e765      	b.n	8007b26 <_scanf_float+0x4a>
 8007c5a:	eb1a 0105 	adds.w	r1, sl, r5
 8007c5e:	f47f af6f 	bne.w	8007b40 <_scanf_float+0x64>
 8007c62:	6822      	ldr	r2, [r4, #0]
 8007c64:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007c68:	6022      	str	r2, [r4, #0]
 8007c6a:	460d      	mov	r5, r1
 8007c6c:	468a      	mov	sl, r1
 8007c6e:	f806 3b01 	strb.w	r3, [r6], #1
 8007c72:	e7e2      	b.n	8007c3a <_scanf_float+0x15e>
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	0610      	lsls	r0, r2, #24
 8007c78:	f57f af62 	bpl.w	8007b40 <_scanf_float+0x64>
 8007c7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c80:	6022      	str	r2, [r4, #0]
 8007c82:	e7f4      	b.n	8007c6e <_scanf_float+0x192>
 8007c84:	f1ba 0f00 	cmp.w	sl, #0
 8007c88:	d10e      	bne.n	8007ca8 <_scanf_float+0x1cc>
 8007c8a:	f1b9 0f00 	cmp.w	r9, #0
 8007c8e:	d10e      	bne.n	8007cae <_scanf_float+0x1d2>
 8007c90:	6822      	ldr	r2, [r4, #0]
 8007c92:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007c96:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007c9a:	d108      	bne.n	8007cae <_scanf_float+0x1d2>
 8007c9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ca0:	6022      	str	r2, [r4, #0]
 8007ca2:	f04f 0a01 	mov.w	sl, #1
 8007ca6:	e7e2      	b.n	8007c6e <_scanf_float+0x192>
 8007ca8:	f1ba 0f02 	cmp.w	sl, #2
 8007cac:	d055      	beq.n	8007d5a <_scanf_float+0x27e>
 8007cae:	2d01      	cmp	r5, #1
 8007cb0:	d002      	beq.n	8007cb8 <_scanf_float+0x1dc>
 8007cb2:	2d04      	cmp	r5, #4
 8007cb4:	f47f af44 	bne.w	8007b40 <_scanf_float+0x64>
 8007cb8:	3501      	adds	r5, #1
 8007cba:	b2ed      	uxtb	r5, r5
 8007cbc:	e7d7      	b.n	8007c6e <_scanf_float+0x192>
 8007cbe:	f1ba 0f01 	cmp.w	sl, #1
 8007cc2:	f47f af3d 	bne.w	8007b40 <_scanf_float+0x64>
 8007cc6:	f04f 0a02 	mov.w	sl, #2
 8007cca:	e7d0      	b.n	8007c6e <_scanf_float+0x192>
 8007ccc:	b97d      	cbnz	r5, 8007cee <_scanf_float+0x212>
 8007cce:	f1b9 0f00 	cmp.w	r9, #0
 8007cd2:	f47f af38 	bne.w	8007b46 <_scanf_float+0x6a>
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007cdc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007ce0:	f040 8108 	bne.w	8007ef4 <_scanf_float+0x418>
 8007ce4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007ce8:	6022      	str	r2, [r4, #0]
 8007cea:	2501      	movs	r5, #1
 8007cec:	e7bf      	b.n	8007c6e <_scanf_float+0x192>
 8007cee:	2d03      	cmp	r5, #3
 8007cf0:	d0e2      	beq.n	8007cb8 <_scanf_float+0x1dc>
 8007cf2:	2d05      	cmp	r5, #5
 8007cf4:	e7de      	b.n	8007cb4 <_scanf_float+0x1d8>
 8007cf6:	2d02      	cmp	r5, #2
 8007cf8:	f47f af22 	bne.w	8007b40 <_scanf_float+0x64>
 8007cfc:	2503      	movs	r5, #3
 8007cfe:	e7b6      	b.n	8007c6e <_scanf_float+0x192>
 8007d00:	2d06      	cmp	r5, #6
 8007d02:	f47f af1d 	bne.w	8007b40 <_scanf_float+0x64>
 8007d06:	2507      	movs	r5, #7
 8007d08:	e7b1      	b.n	8007c6e <_scanf_float+0x192>
 8007d0a:	6822      	ldr	r2, [r4, #0]
 8007d0c:	0591      	lsls	r1, r2, #22
 8007d0e:	f57f af17 	bpl.w	8007b40 <_scanf_float+0x64>
 8007d12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007d16:	6022      	str	r2, [r4, #0]
 8007d18:	f8cd 9008 	str.w	r9, [sp, #8]
 8007d1c:	e7a7      	b.n	8007c6e <_scanf_float+0x192>
 8007d1e:	6822      	ldr	r2, [r4, #0]
 8007d20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007d24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007d28:	d006      	beq.n	8007d38 <_scanf_float+0x25c>
 8007d2a:	0550      	lsls	r0, r2, #21
 8007d2c:	f57f af08 	bpl.w	8007b40 <_scanf_float+0x64>
 8007d30:	f1b9 0f00 	cmp.w	r9, #0
 8007d34:	f000 80de 	beq.w	8007ef4 <_scanf_float+0x418>
 8007d38:	0591      	lsls	r1, r2, #22
 8007d3a:	bf58      	it	pl
 8007d3c:	9902      	ldrpl	r1, [sp, #8]
 8007d3e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007d42:	bf58      	it	pl
 8007d44:	eba9 0101 	subpl.w	r1, r9, r1
 8007d48:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007d4c:	bf58      	it	pl
 8007d4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d52:	6022      	str	r2, [r4, #0]
 8007d54:	f04f 0900 	mov.w	r9, #0
 8007d58:	e789      	b.n	8007c6e <_scanf_float+0x192>
 8007d5a:	f04f 0a03 	mov.w	sl, #3
 8007d5e:	e786      	b.n	8007c6e <_scanf_float+0x192>
 8007d60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007d64:	4639      	mov	r1, r7
 8007d66:	4640      	mov	r0, r8
 8007d68:	4798      	blx	r3
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	f43f aedb 	beq.w	8007b26 <_scanf_float+0x4a>
 8007d70:	e6e6      	b.n	8007b40 <_scanf_float+0x64>
 8007d72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d7a:	463a      	mov	r2, r7
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	4798      	blx	r3
 8007d80:	6923      	ldr	r3, [r4, #16]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	6123      	str	r3, [r4, #16]
 8007d86:	e6e8      	b.n	8007b5a <_scanf_float+0x7e>
 8007d88:	1e6b      	subs	r3, r5, #1
 8007d8a:	2b06      	cmp	r3, #6
 8007d8c:	d824      	bhi.n	8007dd8 <_scanf_float+0x2fc>
 8007d8e:	2d02      	cmp	r5, #2
 8007d90:	d836      	bhi.n	8007e00 <_scanf_float+0x324>
 8007d92:	9b01      	ldr	r3, [sp, #4]
 8007d94:	429e      	cmp	r6, r3
 8007d96:	f67f aee4 	bls.w	8007b62 <_scanf_float+0x86>
 8007d9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007da2:	463a      	mov	r2, r7
 8007da4:	4640      	mov	r0, r8
 8007da6:	4798      	blx	r3
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	e7f0      	b.n	8007d92 <_scanf_float+0x2b6>
 8007db0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007db4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007db8:	463a      	mov	r2, r7
 8007dba:	4640      	mov	r0, r8
 8007dbc:	4798      	blx	r3
 8007dbe:	6923      	ldr	r3, [r4, #16]
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	6123      	str	r3, [r4, #16]
 8007dc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007dc8:	fa5f fa8a 	uxtb.w	sl, sl
 8007dcc:	f1ba 0f02 	cmp.w	sl, #2
 8007dd0:	d1ee      	bne.n	8007db0 <_scanf_float+0x2d4>
 8007dd2:	3d03      	subs	r5, #3
 8007dd4:	b2ed      	uxtb	r5, r5
 8007dd6:	1b76      	subs	r6, r6, r5
 8007dd8:	6823      	ldr	r3, [r4, #0]
 8007dda:	05da      	lsls	r2, r3, #23
 8007ddc:	d530      	bpl.n	8007e40 <_scanf_float+0x364>
 8007dde:	055b      	lsls	r3, r3, #21
 8007de0:	d511      	bpl.n	8007e06 <_scanf_float+0x32a>
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	429e      	cmp	r6, r3
 8007de6:	f67f aebc 	bls.w	8007b62 <_scanf_float+0x86>
 8007dea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007dee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007df2:	463a      	mov	r2, r7
 8007df4:	4640      	mov	r0, r8
 8007df6:	4798      	blx	r3
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	6123      	str	r3, [r4, #16]
 8007dfe:	e7f0      	b.n	8007de2 <_scanf_float+0x306>
 8007e00:	46aa      	mov	sl, r5
 8007e02:	46b3      	mov	fp, r6
 8007e04:	e7de      	b.n	8007dc4 <_scanf_float+0x2e8>
 8007e06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e0a:	6923      	ldr	r3, [r4, #16]
 8007e0c:	2965      	cmp	r1, #101	@ 0x65
 8007e0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e12:	f106 35ff 	add.w	r5, r6, #4294967295
 8007e16:	6123      	str	r3, [r4, #16]
 8007e18:	d00c      	beq.n	8007e34 <_scanf_float+0x358>
 8007e1a:	2945      	cmp	r1, #69	@ 0x45
 8007e1c:	d00a      	beq.n	8007e34 <_scanf_float+0x358>
 8007e1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e22:	463a      	mov	r2, r7
 8007e24:	4640      	mov	r0, r8
 8007e26:	4798      	blx	r3
 8007e28:	6923      	ldr	r3, [r4, #16]
 8007e2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	1eb5      	subs	r5, r6, #2
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e38:	463a      	mov	r2, r7
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4798      	blx	r3
 8007e3e:	462e      	mov	r6, r5
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	f012 0210 	ands.w	r2, r2, #16
 8007e46:	d001      	beq.n	8007e4c <_scanf_float+0x370>
 8007e48:	2000      	movs	r0, #0
 8007e4a:	e68b      	b.n	8007b64 <_scanf_float+0x88>
 8007e4c:	7032      	strb	r2, [r6, #0]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007e54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e58:	d11c      	bne.n	8007e94 <_scanf_float+0x3b8>
 8007e5a:	9b02      	ldr	r3, [sp, #8]
 8007e5c:	454b      	cmp	r3, r9
 8007e5e:	eba3 0209 	sub.w	r2, r3, r9
 8007e62:	d123      	bne.n	8007eac <_scanf_float+0x3d0>
 8007e64:	9901      	ldr	r1, [sp, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	4640      	mov	r0, r8
 8007e6a:	f002 fc31 	bl	800a6d0 <_strtod_r>
 8007e6e:	9b03      	ldr	r3, [sp, #12]
 8007e70:	6821      	ldr	r1, [r4, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f011 0f02 	tst.w	r1, #2
 8007e78:	ec57 6b10 	vmov	r6, r7, d0
 8007e7c:	f103 0204 	add.w	r2, r3, #4
 8007e80:	d01f      	beq.n	8007ec2 <_scanf_float+0x3e6>
 8007e82:	9903      	ldr	r1, [sp, #12]
 8007e84:	600a      	str	r2, [r1, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	e9c3 6700 	strd	r6, r7, [r3]
 8007e8c:	68e3      	ldr	r3, [r4, #12]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	60e3      	str	r3, [r4, #12]
 8007e92:	e7d9      	b.n	8007e48 <_scanf_float+0x36c>
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0e4      	beq.n	8007e64 <_scanf_float+0x388>
 8007e9a:	9905      	ldr	r1, [sp, #20]
 8007e9c:	230a      	movs	r3, #10
 8007e9e:	3101      	adds	r1, #1
 8007ea0:	4640      	mov	r0, r8
 8007ea2:	f002 fc95 	bl	800a7d0 <_strtol_r>
 8007ea6:	9b04      	ldr	r3, [sp, #16]
 8007ea8:	9e05      	ldr	r6, [sp, #20]
 8007eaa:	1ac2      	subs	r2, r0, r3
 8007eac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007eb0:	429e      	cmp	r6, r3
 8007eb2:	bf28      	it	cs
 8007eb4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007eb8:	4910      	ldr	r1, [pc, #64]	@ (8007efc <_scanf_float+0x420>)
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f000 f8e4 	bl	8008088 <siprintf>
 8007ec0:	e7d0      	b.n	8007e64 <_scanf_float+0x388>
 8007ec2:	f011 0f04 	tst.w	r1, #4
 8007ec6:	9903      	ldr	r1, [sp, #12]
 8007ec8:	600a      	str	r2, [r1, #0]
 8007eca:	d1dc      	bne.n	8007e86 <_scanf_float+0x3aa>
 8007ecc:	681d      	ldr	r5, [r3, #0]
 8007ece:	4632      	mov	r2, r6
 8007ed0:	463b      	mov	r3, r7
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	f7f8 fe31 	bl	8000b3c <__aeabi_dcmpun>
 8007eda:	b128      	cbz	r0, 8007ee8 <_scanf_float+0x40c>
 8007edc:	4808      	ldr	r0, [pc, #32]	@ (8007f00 <_scanf_float+0x424>)
 8007ede:	f000 f9f1 	bl	80082c4 <nanf>
 8007ee2:	ed85 0a00 	vstr	s0, [r5]
 8007ee6:	e7d1      	b.n	8007e8c <_scanf_float+0x3b0>
 8007ee8:	4630      	mov	r0, r6
 8007eea:	4639      	mov	r1, r7
 8007eec:	f7f8 fe84 	bl	8000bf8 <__aeabi_d2f>
 8007ef0:	6028      	str	r0, [r5, #0]
 8007ef2:	e7cb      	b.n	8007e8c <_scanf_float+0x3b0>
 8007ef4:	f04f 0900 	mov.w	r9, #0
 8007ef8:	e629      	b.n	8007b4e <_scanf_float+0x72>
 8007efa:	bf00      	nop
 8007efc:	0800c73a 	.word	0x0800c73a
 8007f00:	0800caf0 	.word	0x0800caf0

08007f04 <std>:
 8007f04:	2300      	movs	r3, #0
 8007f06:	b510      	push	{r4, lr}
 8007f08:	4604      	mov	r4, r0
 8007f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f12:	6083      	str	r3, [r0, #8]
 8007f14:	8181      	strh	r1, [r0, #12]
 8007f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f18:	81c2      	strh	r2, [r0, #14]
 8007f1a:	6183      	str	r3, [r0, #24]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	2208      	movs	r2, #8
 8007f20:	305c      	adds	r0, #92	@ 0x5c
 8007f22:	f000 f940 	bl	80081a6 <memset>
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <std+0x58>)
 8007f28:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f60 <std+0x5c>)
 8007f2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <std+0x60>)
 8007f30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f32:	4b0d      	ldr	r3, [pc, #52]	@ (8007f68 <std+0x64>)
 8007f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f36:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <std+0x68>)
 8007f38:	6224      	str	r4, [r4, #32]
 8007f3a:	429c      	cmp	r4, r3
 8007f3c:	d006      	beq.n	8007f4c <std+0x48>
 8007f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f42:	4294      	cmp	r4, r2
 8007f44:	d002      	beq.n	8007f4c <std+0x48>
 8007f46:	33d0      	adds	r3, #208	@ 0xd0
 8007f48:	429c      	cmp	r4, r3
 8007f4a:	d105      	bne.n	8007f58 <std+0x54>
 8007f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f54:	f000 b9a4 	b.w	80082a0 <__retarget_lock_init_recursive>
 8007f58:	bd10      	pop	{r4, pc}
 8007f5a:	bf00      	nop
 8007f5c:	0800811d 	.word	0x0800811d
 8007f60:	08008143 	.word	0x08008143
 8007f64:	0800817b 	.word	0x0800817b
 8007f68:	0800819f 	.word	0x0800819f
 8007f6c:	20000580 	.word	0x20000580

08007f70 <stdio_exit_handler>:
 8007f70:	4a02      	ldr	r2, [pc, #8]	@ (8007f7c <stdio_exit_handler+0xc>)
 8007f72:	4903      	ldr	r1, [pc, #12]	@ (8007f80 <stdio_exit_handler+0x10>)
 8007f74:	4803      	ldr	r0, [pc, #12]	@ (8007f84 <stdio_exit_handler+0x14>)
 8007f76:	f000 b869 	b.w	800804c <_fwalk_sglue>
 8007f7a:	bf00      	nop
 8007f7c:	20000028 	.word	0x20000028
 8007f80:	0800b1c1 	.word	0x0800b1c1
 8007f84:	20000038 	.word	0x20000038

08007f88 <cleanup_stdio>:
 8007f88:	6841      	ldr	r1, [r0, #4]
 8007f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8007fbc <cleanup_stdio+0x34>)
 8007f8c:	4299      	cmp	r1, r3
 8007f8e:	b510      	push	{r4, lr}
 8007f90:	4604      	mov	r4, r0
 8007f92:	d001      	beq.n	8007f98 <cleanup_stdio+0x10>
 8007f94:	f003 f914 	bl	800b1c0 <_fflush_r>
 8007f98:	68a1      	ldr	r1, [r4, #8]
 8007f9a:	4b09      	ldr	r3, [pc, #36]	@ (8007fc0 <cleanup_stdio+0x38>)
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	d002      	beq.n	8007fa6 <cleanup_stdio+0x1e>
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f003 f90d 	bl	800b1c0 <_fflush_r>
 8007fa6:	68e1      	ldr	r1, [r4, #12]
 8007fa8:	4b06      	ldr	r3, [pc, #24]	@ (8007fc4 <cleanup_stdio+0x3c>)
 8007faa:	4299      	cmp	r1, r3
 8007fac:	d004      	beq.n	8007fb8 <cleanup_stdio+0x30>
 8007fae:	4620      	mov	r0, r4
 8007fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb4:	f003 b904 	b.w	800b1c0 <_fflush_r>
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000580 	.word	0x20000580
 8007fc0:	200005e8 	.word	0x200005e8
 8007fc4:	20000650 	.word	0x20000650

08007fc8 <global_stdio_init.part.0>:
 8007fc8:	b510      	push	{r4, lr}
 8007fca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff8 <global_stdio_init.part.0+0x30>)
 8007fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8007ffc <global_stdio_init.part.0+0x34>)
 8007fce:	4a0c      	ldr	r2, [pc, #48]	@ (8008000 <global_stdio_init.part.0+0x38>)
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	2104      	movs	r1, #4
 8007fd8:	f7ff ff94 	bl	8007f04 <std>
 8007fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	2109      	movs	r1, #9
 8007fe4:	f7ff ff8e 	bl	8007f04 <std>
 8007fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007fec:	2202      	movs	r2, #2
 8007fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff2:	2112      	movs	r1, #18
 8007ff4:	f7ff bf86 	b.w	8007f04 <std>
 8007ff8:	200006b8 	.word	0x200006b8
 8007ffc:	20000580 	.word	0x20000580
 8008000:	08007f71 	.word	0x08007f71

08008004 <__sfp_lock_acquire>:
 8008004:	4801      	ldr	r0, [pc, #4]	@ (800800c <__sfp_lock_acquire+0x8>)
 8008006:	f000 b94c 	b.w	80082a2 <__retarget_lock_acquire_recursive>
 800800a:	bf00      	nop
 800800c:	200006c1 	.word	0x200006c1

08008010 <__sfp_lock_release>:
 8008010:	4801      	ldr	r0, [pc, #4]	@ (8008018 <__sfp_lock_release+0x8>)
 8008012:	f000 b947 	b.w	80082a4 <__retarget_lock_release_recursive>
 8008016:	bf00      	nop
 8008018:	200006c1 	.word	0x200006c1

0800801c <__sinit>:
 800801c:	b510      	push	{r4, lr}
 800801e:	4604      	mov	r4, r0
 8008020:	f7ff fff0 	bl	8008004 <__sfp_lock_acquire>
 8008024:	6a23      	ldr	r3, [r4, #32]
 8008026:	b11b      	cbz	r3, 8008030 <__sinit+0x14>
 8008028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800802c:	f7ff bff0 	b.w	8008010 <__sfp_lock_release>
 8008030:	4b04      	ldr	r3, [pc, #16]	@ (8008044 <__sinit+0x28>)
 8008032:	6223      	str	r3, [r4, #32]
 8008034:	4b04      	ldr	r3, [pc, #16]	@ (8008048 <__sinit+0x2c>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1f5      	bne.n	8008028 <__sinit+0xc>
 800803c:	f7ff ffc4 	bl	8007fc8 <global_stdio_init.part.0>
 8008040:	e7f2      	b.n	8008028 <__sinit+0xc>
 8008042:	bf00      	nop
 8008044:	08007f89 	.word	0x08007f89
 8008048:	200006b8 	.word	0x200006b8

0800804c <_fwalk_sglue>:
 800804c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008050:	4607      	mov	r7, r0
 8008052:	4688      	mov	r8, r1
 8008054:	4614      	mov	r4, r2
 8008056:	2600      	movs	r6, #0
 8008058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800805c:	f1b9 0901 	subs.w	r9, r9, #1
 8008060:	d505      	bpl.n	800806e <_fwalk_sglue+0x22>
 8008062:	6824      	ldr	r4, [r4, #0]
 8008064:	2c00      	cmp	r4, #0
 8008066:	d1f7      	bne.n	8008058 <_fwalk_sglue+0xc>
 8008068:	4630      	mov	r0, r6
 800806a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806e:	89ab      	ldrh	r3, [r5, #12]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d907      	bls.n	8008084 <_fwalk_sglue+0x38>
 8008074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008078:	3301      	adds	r3, #1
 800807a:	d003      	beq.n	8008084 <_fwalk_sglue+0x38>
 800807c:	4629      	mov	r1, r5
 800807e:	4638      	mov	r0, r7
 8008080:	47c0      	blx	r8
 8008082:	4306      	orrs	r6, r0
 8008084:	3568      	adds	r5, #104	@ 0x68
 8008086:	e7e9      	b.n	800805c <_fwalk_sglue+0x10>

08008088 <siprintf>:
 8008088:	b40e      	push	{r1, r2, r3}
 800808a:	b500      	push	{lr}
 800808c:	b09c      	sub	sp, #112	@ 0x70
 800808e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008090:	9002      	str	r0, [sp, #8]
 8008092:	9006      	str	r0, [sp, #24]
 8008094:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008098:	4809      	ldr	r0, [pc, #36]	@ (80080c0 <siprintf+0x38>)
 800809a:	9107      	str	r1, [sp, #28]
 800809c:	9104      	str	r1, [sp, #16]
 800809e:	4909      	ldr	r1, [pc, #36]	@ (80080c4 <siprintf+0x3c>)
 80080a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a4:	9105      	str	r1, [sp, #20]
 80080a6:	6800      	ldr	r0, [r0, #0]
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	a902      	add	r1, sp, #8
 80080ac:	f002 fbee 	bl	800a88c <_svfiprintf_r>
 80080b0:	9b02      	ldr	r3, [sp, #8]
 80080b2:	2200      	movs	r2, #0
 80080b4:	701a      	strb	r2, [r3, #0]
 80080b6:	b01c      	add	sp, #112	@ 0x70
 80080b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080bc:	b003      	add	sp, #12
 80080be:	4770      	bx	lr
 80080c0:	20000034 	.word	0x20000034
 80080c4:	ffff0208 	.word	0xffff0208

080080c8 <siscanf>:
 80080c8:	b40e      	push	{r1, r2, r3}
 80080ca:	b530      	push	{r4, r5, lr}
 80080cc:	b09c      	sub	sp, #112	@ 0x70
 80080ce:	ac1f      	add	r4, sp, #124	@ 0x7c
 80080d0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80080d4:	f854 5b04 	ldr.w	r5, [r4], #4
 80080d8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80080dc:	9002      	str	r0, [sp, #8]
 80080de:	9006      	str	r0, [sp, #24]
 80080e0:	f7f8 f8ce 	bl	8000280 <strlen>
 80080e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <siscanf+0x4c>)
 80080e6:	9003      	str	r0, [sp, #12]
 80080e8:	9007      	str	r0, [sp, #28]
 80080ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080ec:	480a      	ldr	r0, [pc, #40]	@ (8008118 <siscanf+0x50>)
 80080ee:	9401      	str	r4, [sp, #4]
 80080f0:	2300      	movs	r3, #0
 80080f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80080f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80080fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80080fe:	462a      	mov	r2, r5
 8008100:	4623      	mov	r3, r4
 8008102:	a902      	add	r1, sp, #8
 8008104:	6800      	ldr	r0, [r0, #0]
 8008106:	f002 fd15 	bl	800ab34 <__ssvfiscanf_r>
 800810a:	b01c      	add	sp, #112	@ 0x70
 800810c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008110:	b003      	add	sp, #12
 8008112:	4770      	bx	lr
 8008114:	0800813f 	.word	0x0800813f
 8008118:	20000034 	.word	0x20000034

0800811c <__sread>:
 800811c:	b510      	push	{r4, lr}
 800811e:	460c      	mov	r4, r1
 8008120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008124:	f000 f86e 	bl	8008204 <_read_r>
 8008128:	2800      	cmp	r0, #0
 800812a:	bfab      	itete	ge
 800812c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800812e:	89a3      	ldrhlt	r3, [r4, #12]
 8008130:	181b      	addge	r3, r3, r0
 8008132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008136:	bfac      	ite	ge
 8008138:	6563      	strge	r3, [r4, #84]	@ 0x54
 800813a:	81a3      	strhlt	r3, [r4, #12]
 800813c:	bd10      	pop	{r4, pc}

0800813e <__seofread>:
 800813e:	2000      	movs	r0, #0
 8008140:	4770      	bx	lr

08008142 <__swrite>:
 8008142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008146:	461f      	mov	r7, r3
 8008148:	898b      	ldrh	r3, [r1, #12]
 800814a:	05db      	lsls	r3, r3, #23
 800814c:	4605      	mov	r5, r0
 800814e:	460c      	mov	r4, r1
 8008150:	4616      	mov	r6, r2
 8008152:	d505      	bpl.n	8008160 <__swrite+0x1e>
 8008154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008158:	2302      	movs	r3, #2
 800815a:	2200      	movs	r2, #0
 800815c:	f000 f840 	bl	80081e0 <_lseek_r>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	4632      	mov	r2, r6
 800816e:	463b      	mov	r3, r7
 8008170:	4628      	mov	r0, r5
 8008172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008176:	f000 b857 	b.w	8008228 <_write_r>

0800817a <__sseek>:
 800817a:	b510      	push	{r4, lr}
 800817c:	460c      	mov	r4, r1
 800817e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008182:	f000 f82d 	bl	80081e0 <_lseek_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	bf15      	itete	ne
 800818c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800818e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008196:	81a3      	strheq	r3, [r4, #12]
 8008198:	bf18      	it	ne
 800819a:	81a3      	strhne	r3, [r4, #12]
 800819c:	bd10      	pop	{r4, pc}

0800819e <__sclose>:
 800819e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a2:	f000 b80d 	b.w	80081c0 <_close_r>

080081a6 <memset>:
 80081a6:	4402      	add	r2, r0
 80081a8:	4603      	mov	r3, r0
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d100      	bne.n	80081b0 <memset+0xa>
 80081ae:	4770      	bx	lr
 80081b0:	f803 1b01 	strb.w	r1, [r3], #1
 80081b4:	e7f9      	b.n	80081aa <memset+0x4>
	...

080081b8 <_localeconv_r>:
 80081b8:	4800      	ldr	r0, [pc, #0]	@ (80081bc <_localeconv_r+0x4>)
 80081ba:	4770      	bx	lr
 80081bc:	20000174 	.word	0x20000174

080081c0 <_close_r>:
 80081c0:	b538      	push	{r3, r4, r5, lr}
 80081c2:	4d06      	ldr	r5, [pc, #24]	@ (80081dc <_close_r+0x1c>)
 80081c4:	2300      	movs	r3, #0
 80081c6:	4604      	mov	r4, r0
 80081c8:	4608      	mov	r0, r1
 80081ca:	602b      	str	r3, [r5, #0]
 80081cc:	f7fa fbe0 	bl	8002990 <_close>
 80081d0:	1c43      	adds	r3, r0, #1
 80081d2:	d102      	bne.n	80081da <_close_r+0x1a>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b103      	cbz	r3, 80081da <_close_r+0x1a>
 80081d8:	6023      	str	r3, [r4, #0]
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	200006bc 	.word	0x200006bc

080081e0 <_lseek_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d07      	ldr	r5, [pc, #28]	@ (8008200 <_lseek_r+0x20>)
 80081e4:	4604      	mov	r4, r0
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	2200      	movs	r2, #0
 80081ec:	602a      	str	r2, [r5, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	f7fa fbf5 	bl	80029de <_lseek>
 80081f4:	1c43      	adds	r3, r0, #1
 80081f6:	d102      	bne.n	80081fe <_lseek_r+0x1e>
 80081f8:	682b      	ldr	r3, [r5, #0]
 80081fa:	b103      	cbz	r3, 80081fe <_lseek_r+0x1e>
 80081fc:	6023      	str	r3, [r4, #0]
 80081fe:	bd38      	pop	{r3, r4, r5, pc}
 8008200:	200006bc 	.word	0x200006bc

08008204 <_read_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	4d07      	ldr	r5, [pc, #28]	@ (8008224 <_read_r+0x20>)
 8008208:	4604      	mov	r4, r0
 800820a:	4608      	mov	r0, r1
 800820c:	4611      	mov	r1, r2
 800820e:	2200      	movs	r2, #0
 8008210:	602a      	str	r2, [r5, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	f7fa fb83 	bl	800291e <_read>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_read_r+0x1e>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_read_r+0x1e>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	200006bc 	.word	0x200006bc

08008228 <_write_r>:
 8008228:	b538      	push	{r3, r4, r5, lr}
 800822a:	4d07      	ldr	r5, [pc, #28]	@ (8008248 <_write_r+0x20>)
 800822c:	4604      	mov	r4, r0
 800822e:	4608      	mov	r0, r1
 8008230:	4611      	mov	r1, r2
 8008232:	2200      	movs	r2, #0
 8008234:	602a      	str	r2, [r5, #0]
 8008236:	461a      	mov	r2, r3
 8008238:	f7fa fb8e 	bl	8002958 <_write>
 800823c:	1c43      	adds	r3, r0, #1
 800823e:	d102      	bne.n	8008246 <_write_r+0x1e>
 8008240:	682b      	ldr	r3, [r5, #0]
 8008242:	b103      	cbz	r3, 8008246 <_write_r+0x1e>
 8008244:	6023      	str	r3, [r4, #0]
 8008246:	bd38      	pop	{r3, r4, r5, pc}
 8008248:	200006bc 	.word	0x200006bc

0800824c <__errno>:
 800824c:	4b01      	ldr	r3, [pc, #4]	@ (8008254 <__errno+0x8>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	20000034 	.word	0x20000034

08008258 <__libc_init_array>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4d0d      	ldr	r5, [pc, #52]	@ (8008290 <__libc_init_array+0x38>)
 800825c:	4c0d      	ldr	r4, [pc, #52]	@ (8008294 <__libc_init_array+0x3c>)
 800825e:	1b64      	subs	r4, r4, r5
 8008260:	10a4      	asrs	r4, r4, #2
 8008262:	2600      	movs	r6, #0
 8008264:	42a6      	cmp	r6, r4
 8008266:	d109      	bne.n	800827c <__libc_init_array+0x24>
 8008268:	4d0b      	ldr	r5, [pc, #44]	@ (8008298 <__libc_init_array+0x40>)
 800826a:	4c0c      	ldr	r4, [pc, #48]	@ (800829c <__libc_init_array+0x44>)
 800826c:	f004 f944 	bl	800c4f8 <_init>
 8008270:	1b64      	subs	r4, r4, r5
 8008272:	10a4      	asrs	r4, r4, #2
 8008274:	2600      	movs	r6, #0
 8008276:	42a6      	cmp	r6, r4
 8008278:	d105      	bne.n	8008286 <__libc_init_array+0x2e>
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008280:	4798      	blx	r3
 8008282:	3601      	adds	r6, #1
 8008284:	e7ee      	b.n	8008264 <__libc_init_array+0xc>
 8008286:	f855 3b04 	ldr.w	r3, [r5], #4
 800828a:	4798      	blx	r3
 800828c:	3601      	adds	r6, #1
 800828e:	e7f2      	b.n	8008276 <__libc_init_array+0x1e>
 8008290:	0800cb94 	.word	0x0800cb94
 8008294:	0800cb94 	.word	0x0800cb94
 8008298:	0800cb94 	.word	0x0800cb94
 800829c:	0800cb98 	.word	0x0800cb98

080082a0 <__retarget_lock_init_recursive>:
 80082a0:	4770      	bx	lr

080082a2 <__retarget_lock_acquire_recursive>:
 80082a2:	4770      	bx	lr

080082a4 <__retarget_lock_release_recursive>:
 80082a4:	4770      	bx	lr

080082a6 <memcpy>:
 80082a6:	440a      	add	r2, r1
 80082a8:	4291      	cmp	r1, r2
 80082aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80082ae:	d100      	bne.n	80082b2 <memcpy+0xc>
 80082b0:	4770      	bx	lr
 80082b2:	b510      	push	{r4, lr}
 80082b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082bc:	4291      	cmp	r1, r2
 80082be:	d1f9      	bne.n	80082b4 <memcpy+0xe>
 80082c0:	bd10      	pop	{r4, pc}
	...

080082c4 <nanf>:
 80082c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80082cc <nanf+0x8>
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	7fc00000 	.word	0x7fc00000

080082d0 <quorem>:
 80082d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	6903      	ldr	r3, [r0, #16]
 80082d6:	690c      	ldr	r4, [r1, #16]
 80082d8:	42a3      	cmp	r3, r4
 80082da:	4607      	mov	r7, r0
 80082dc:	db7e      	blt.n	80083dc <quorem+0x10c>
 80082de:	3c01      	subs	r4, #1
 80082e0:	f101 0814 	add.w	r8, r1, #20
 80082e4:	00a3      	lsls	r3, r4, #2
 80082e6:	f100 0514 	add.w	r5, r0, #20
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80082f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082fa:	3301      	adds	r3, #1
 80082fc:	429a      	cmp	r2, r3
 80082fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008302:	fbb2 f6f3 	udiv	r6, r2, r3
 8008306:	d32e      	bcc.n	8008366 <quorem+0x96>
 8008308:	f04f 0a00 	mov.w	sl, #0
 800830c:	46c4      	mov	ip, r8
 800830e:	46ae      	mov	lr, r5
 8008310:	46d3      	mov	fp, sl
 8008312:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008316:	b298      	uxth	r0, r3
 8008318:	fb06 a000 	mla	r0, r6, r0, sl
 800831c:	0c02      	lsrs	r2, r0, #16
 800831e:	0c1b      	lsrs	r3, r3, #16
 8008320:	fb06 2303 	mla	r3, r6, r3, r2
 8008324:	f8de 2000 	ldr.w	r2, [lr]
 8008328:	b280      	uxth	r0, r0
 800832a:	b292      	uxth	r2, r2
 800832c:	1a12      	subs	r2, r2, r0
 800832e:	445a      	add	r2, fp
 8008330:	f8de 0000 	ldr.w	r0, [lr]
 8008334:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008338:	b29b      	uxth	r3, r3
 800833a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800833e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008342:	b292      	uxth	r2, r2
 8008344:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008348:	45e1      	cmp	r9, ip
 800834a:	f84e 2b04 	str.w	r2, [lr], #4
 800834e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008352:	d2de      	bcs.n	8008312 <quorem+0x42>
 8008354:	9b00      	ldr	r3, [sp, #0]
 8008356:	58eb      	ldr	r3, [r5, r3]
 8008358:	b92b      	cbnz	r3, 8008366 <quorem+0x96>
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	3b04      	subs	r3, #4
 800835e:	429d      	cmp	r5, r3
 8008360:	461a      	mov	r2, r3
 8008362:	d32f      	bcc.n	80083c4 <quorem+0xf4>
 8008364:	613c      	str	r4, [r7, #16]
 8008366:	4638      	mov	r0, r7
 8008368:	f001 f9c2 	bl	80096f0 <__mcmp>
 800836c:	2800      	cmp	r0, #0
 800836e:	db25      	blt.n	80083bc <quorem+0xec>
 8008370:	4629      	mov	r1, r5
 8008372:	2000      	movs	r0, #0
 8008374:	f858 2b04 	ldr.w	r2, [r8], #4
 8008378:	f8d1 c000 	ldr.w	ip, [r1]
 800837c:	fa1f fe82 	uxth.w	lr, r2
 8008380:	fa1f f38c 	uxth.w	r3, ip
 8008384:	eba3 030e 	sub.w	r3, r3, lr
 8008388:	4403      	add	r3, r0
 800838a:	0c12      	lsrs	r2, r2, #16
 800838c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008390:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008394:	b29b      	uxth	r3, r3
 8008396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800839a:	45c1      	cmp	r9, r8
 800839c:	f841 3b04 	str.w	r3, [r1], #4
 80083a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083a4:	d2e6      	bcs.n	8008374 <quorem+0xa4>
 80083a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083ae:	b922      	cbnz	r2, 80083ba <quorem+0xea>
 80083b0:	3b04      	subs	r3, #4
 80083b2:	429d      	cmp	r5, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	d30b      	bcc.n	80083d0 <quorem+0x100>
 80083b8:	613c      	str	r4, [r7, #16]
 80083ba:	3601      	adds	r6, #1
 80083bc:	4630      	mov	r0, r6
 80083be:	b003      	add	sp, #12
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	3b04      	subs	r3, #4
 80083c8:	2a00      	cmp	r2, #0
 80083ca:	d1cb      	bne.n	8008364 <quorem+0x94>
 80083cc:	3c01      	subs	r4, #1
 80083ce:	e7c6      	b.n	800835e <quorem+0x8e>
 80083d0:	6812      	ldr	r2, [r2, #0]
 80083d2:	3b04      	subs	r3, #4
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	d1ef      	bne.n	80083b8 <quorem+0xe8>
 80083d8:	3c01      	subs	r4, #1
 80083da:	e7ea      	b.n	80083b2 <quorem+0xe2>
 80083dc:	2000      	movs	r0, #0
 80083de:	e7ee      	b.n	80083be <quorem+0xee>

080083e0 <_dtoa_r>:
 80083e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e4:	69c7      	ldr	r7, [r0, #28]
 80083e6:	b099      	sub	sp, #100	@ 0x64
 80083e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80083ec:	ec55 4b10 	vmov	r4, r5, d0
 80083f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80083f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80083f4:	4683      	mov	fp, r0
 80083f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80083f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80083fa:	b97f      	cbnz	r7, 800841c <_dtoa_r+0x3c>
 80083fc:	2010      	movs	r0, #16
 80083fe:	f000 fdfd 	bl	8008ffc <malloc>
 8008402:	4602      	mov	r2, r0
 8008404:	f8cb 001c 	str.w	r0, [fp, #28]
 8008408:	b920      	cbnz	r0, 8008414 <_dtoa_r+0x34>
 800840a:	4ba7      	ldr	r3, [pc, #668]	@ (80086a8 <_dtoa_r+0x2c8>)
 800840c:	21ef      	movs	r1, #239	@ 0xef
 800840e:	48a7      	ldr	r0, [pc, #668]	@ (80086ac <_dtoa_r+0x2cc>)
 8008410:	f002 ffb6 	bl	800b380 <__assert_func>
 8008414:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008418:	6007      	str	r7, [r0, #0]
 800841a:	60c7      	str	r7, [r0, #12]
 800841c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008420:	6819      	ldr	r1, [r3, #0]
 8008422:	b159      	cbz	r1, 800843c <_dtoa_r+0x5c>
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	604a      	str	r2, [r1, #4]
 8008428:	2301      	movs	r3, #1
 800842a:	4093      	lsls	r3, r2
 800842c:	608b      	str	r3, [r1, #8]
 800842e:	4658      	mov	r0, fp
 8008430:	f000 feda 	bl	80091e8 <_Bfree>
 8008434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]
 800843c:	1e2b      	subs	r3, r5, #0
 800843e:	bfb9      	ittee	lt
 8008440:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008444:	9303      	strlt	r3, [sp, #12]
 8008446:	2300      	movge	r3, #0
 8008448:	6033      	strge	r3, [r6, #0]
 800844a:	9f03      	ldr	r7, [sp, #12]
 800844c:	4b98      	ldr	r3, [pc, #608]	@ (80086b0 <_dtoa_r+0x2d0>)
 800844e:	bfbc      	itt	lt
 8008450:	2201      	movlt	r2, #1
 8008452:	6032      	strlt	r2, [r6, #0]
 8008454:	43bb      	bics	r3, r7
 8008456:	d112      	bne.n	800847e <_dtoa_r+0x9e>
 8008458:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800845a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008464:	4323      	orrs	r3, r4
 8008466:	f000 854d 	beq.w	8008f04 <_dtoa_r+0xb24>
 800846a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800846c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80086c4 <_dtoa_r+0x2e4>
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 854f 	beq.w	8008f14 <_dtoa_r+0xb34>
 8008476:	f10a 0303 	add.w	r3, sl, #3
 800847a:	f000 bd49 	b.w	8008f10 <_dtoa_r+0xb30>
 800847e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008482:	2200      	movs	r2, #0
 8008484:	ec51 0b17 	vmov	r0, r1, d7
 8008488:	2300      	movs	r3, #0
 800848a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800848e:	f7f8 fb23 	bl	8000ad8 <__aeabi_dcmpeq>
 8008492:	4680      	mov	r8, r0
 8008494:	b158      	cbz	r0, 80084ae <_dtoa_r+0xce>
 8008496:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008498:	2301      	movs	r3, #1
 800849a:	6013      	str	r3, [r2, #0]
 800849c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800849e:	b113      	cbz	r3, 80084a6 <_dtoa_r+0xc6>
 80084a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80084a2:	4b84      	ldr	r3, [pc, #528]	@ (80086b4 <_dtoa_r+0x2d4>)
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80086c8 <_dtoa_r+0x2e8>
 80084aa:	f000 bd33 	b.w	8008f14 <_dtoa_r+0xb34>
 80084ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80084b2:	aa16      	add	r2, sp, #88	@ 0x58
 80084b4:	a917      	add	r1, sp, #92	@ 0x5c
 80084b6:	4658      	mov	r0, fp
 80084b8:	f001 fa3a 	bl	8009930 <__d2b>
 80084bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80084c0:	4681      	mov	r9, r0
 80084c2:	2e00      	cmp	r6, #0
 80084c4:	d077      	beq.n	80085b6 <_dtoa_r+0x1d6>
 80084c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80084cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80084d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80084dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80084e0:	4619      	mov	r1, r3
 80084e2:	2200      	movs	r2, #0
 80084e4:	4b74      	ldr	r3, [pc, #464]	@ (80086b8 <_dtoa_r+0x2d8>)
 80084e6:	f7f7 fed7 	bl	8000298 <__aeabi_dsub>
 80084ea:	a369      	add	r3, pc, #420	@ (adr r3, 8008690 <_dtoa_r+0x2b0>)
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f7f8 f88a 	bl	8000608 <__aeabi_dmul>
 80084f4:	a368      	add	r3, pc, #416	@ (adr r3, 8008698 <_dtoa_r+0x2b8>)
 80084f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fa:	f7f7 fecf 	bl	800029c <__adddf3>
 80084fe:	4604      	mov	r4, r0
 8008500:	4630      	mov	r0, r6
 8008502:	460d      	mov	r5, r1
 8008504:	f7f8 f816 	bl	8000534 <__aeabi_i2d>
 8008508:	a365      	add	r3, pc, #404	@ (adr r3, 80086a0 <_dtoa_r+0x2c0>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	f7f8 f87b 	bl	8000608 <__aeabi_dmul>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	f7f7 febf 	bl	800029c <__adddf3>
 800851e:	4604      	mov	r4, r0
 8008520:	460d      	mov	r5, r1
 8008522:	f7f8 fb21 	bl	8000b68 <__aeabi_d2iz>
 8008526:	2200      	movs	r2, #0
 8008528:	4607      	mov	r7, r0
 800852a:	2300      	movs	r3, #0
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	f7f8 fadc 	bl	8000aec <__aeabi_dcmplt>
 8008534:	b140      	cbz	r0, 8008548 <_dtoa_r+0x168>
 8008536:	4638      	mov	r0, r7
 8008538:	f7f7 fffc 	bl	8000534 <__aeabi_i2d>
 800853c:	4622      	mov	r2, r4
 800853e:	462b      	mov	r3, r5
 8008540:	f7f8 faca 	bl	8000ad8 <__aeabi_dcmpeq>
 8008544:	b900      	cbnz	r0, 8008548 <_dtoa_r+0x168>
 8008546:	3f01      	subs	r7, #1
 8008548:	2f16      	cmp	r7, #22
 800854a:	d851      	bhi.n	80085f0 <_dtoa_r+0x210>
 800854c:	4b5b      	ldr	r3, [pc, #364]	@ (80086bc <_dtoa_r+0x2dc>)
 800854e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800855a:	f7f8 fac7 	bl	8000aec <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	d048      	beq.n	80085f4 <_dtoa_r+0x214>
 8008562:	3f01      	subs	r7, #1
 8008564:	2300      	movs	r3, #0
 8008566:	9312      	str	r3, [sp, #72]	@ 0x48
 8008568:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800856a:	1b9b      	subs	r3, r3, r6
 800856c:	1e5a      	subs	r2, r3, #1
 800856e:	bf44      	itt	mi
 8008570:	f1c3 0801 	rsbmi	r8, r3, #1
 8008574:	2300      	movmi	r3, #0
 8008576:	9208      	str	r2, [sp, #32]
 8008578:	bf54      	ite	pl
 800857a:	f04f 0800 	movpl.w	r8, #0
 800857e:	9308      	strmi	r3, [sp, #32]
 8008580:	2f00      	cmp	r7, #0
 8008582:	db39      	blt.n	80085f8 <_dtoa_r+0x218>
 8008584:	9b08      	ldr	r3, [sp, #32]
 8008586:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008588:	443b      	add	r3, r7
 800858a:	9308      	str	r3, [sp, #32]
 800858c:	2300      	movs	r3, #0
 800858e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008592:	2b09      	cmp	r3, #9
 8008594:	d864      	bhi.n	8008660 <_dtoa_r+0x280>
 8008596:	2b05      	cmp	r3, #5
 8008598:	bfc4      	itt	gt
 800859a:	3b04      	subgt	r3, #4
 800859c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800859e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a0:	f1a3 0302 	sub.w	r3, r3, #2
 80085a4:	bfcc      	ite	gt
 80085a6:	2400      	movgt	r4, #0
 80085a8:	2401      	movle	r4, #1
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d863      	bhi.n	8008676 <_dtoa_r+0x296>
 80085ae:	e8df f003 	tbb	[pc, r3]
 80085b2:	372a      	.short	0x372a
 80085b4:	5535      	.short	0x5535
 80085b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80085ba:	441e      	add	r6, r3
 80085bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	bfc1      	itttt	gt
 80085c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80085c8:	409f      	lslgt	r7, r3
 80085ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80085ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80085d2:	bfd6      	itet	le
 80085d4:	f1c3 0320 	rsble	r3, r3, #32
 80085d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80085dc:	fa04 f003 	lslle.w	r0, r4, r3
 80085e0:	f7f7 ff98 	bl	8000514 <__aeabi_ui2d>
 80085e4:	2201      	movs	r2, #1
 80085e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80085ea:	3e01      	subs	r6, #1
 80085ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80085ee:	e777      	b.n	80084e0 <_dtoa_r+0x100>
 80085f0:	2301      	movs	r3, #1
 80085f2:	e7b8      	b.n	8008566 <_dtoa_r+0x186>
 80085f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80085f6:	e7b7      	b.n	8008568 <_dtoa_r+0x188>
 80085f8:	427b      	negs	r3, r7
 80085fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80085fc:	2300      	movs	r3, #0
 80085fe:	eba8 0807 	sub.w	r8, r8, r7
 8008602:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008604:	e7c4      	b.n	8008590 <_dtoa_r+0x1b0>
 8008606:	2300      	movs	r3, #0
 8008608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800860a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800860c:	2b00      	cmp	r3, #0
 800860e:	dc35      	bgt.n	800867c <_dtoa_r+0x29c>
 8008610:	2301      	movs	r3, #1
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	9307      	str	r3, [sp, #28]
 8008616:	461a      	mov	r2, r3
 8008618:	920e      	str	r2, [sp, #56]	@ 0x38
 800861a:	e00b      	b.n	8008634 <_dtoa_r+0x254>
 800861c:	2301      	movs	r3, #1
 800861e:	e7f3      	b.n	8008608 <_dtoa_r+0x228>
 8008620:	2300      	movs	r3, #0
 8008622:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008626:	18fb      	adds	r3, r7, r3
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	3301      	adds	r3, #1
 800862c:	2b01      	cmp	r3, #1
 800862e:	9307      	str	r3, [sp, #28]
 8008630:	bfb8      	it	lt
 8008632:	2301      	movlt	r3, #1
 8008634:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008638:	2100      	movs	r1, #0
 800863a:	2204      	movs	r2, #4
 800863c:	f102 0514 	add.w	r5, r2, #20
 8008640:	429d      	cmp	r5, r3
 8008642:	d91f      	bls.n	8008684 <_dtoa_r+0x2a4>
 8008644:	6041      	str	r1, [r0, #4]
 8008646:	4658      	mov	r0, fp
 8008648:	f000 fd8e 	bl	8009168 <_Balloc>
 800864c:	4682      	mov	sl, r0
 800864e:	2800      	cmp	r0, #0
 8008650:	d13c      	bne.n	80086cc <_dtoa_r+0x2ec>
 8008652:	4b1b      	ldr	r3, [pc, #108]	@ (80086c0 <_dtoa_r+0x2e0>)
 8008654:	4602      	mov	r2, r0
 8008656:	f240 11af 	movw	r1, #431	@ 0x1af
 800865a:	e6d8      	b.n	800840e <_dtoa_r+0x2e>
 800865c:	2301      	movs	r3, #1
 800865e:	e7e0      	b.n	8008622 <_dtoa_r+0x242>
 8008660:	2401      	movs	r4, #1
 8008662:	2300      	movs	r3, #0
 8008664:	9309      	str	r3, [sp, #36]	@ 0x24
 8008666:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008668:	f04f 33ff 	mov.w	r3, #4294967295
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	9307      	str	r3, [sp, #28]
 8008670:	2200      	movs	r2, #0
 8008672:	2312      	movs	r3, #18
 8008674:	e7d0      	b.n	8008618 <_dtoa_r+0x238>
 8008676:	2301      	movs	r3, #1
 8008678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800867a:	e7f5      	b.n	8008668 <_dtoa_r+0x288>
 800867c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	9307      	str	r3, [sp, #28]
 8008682:	e7d7      	b.n	8008634 <_dtoa_r+0x254>
 8008684:	3101      	adds	r1, #1
 8008686:	0052      	lsls	r2, r2, #1
 8008688:	e7d8      	b.n	800863c <_dtoa_r+0x25c>
 800868a:	bf00      	nop
 800868c:	f3af 8000 	nop.w
 8008690:	636f4361 	.word	0x636f4361
 8008694:	3fd287a7 	.word	0x3fd287a7
 8008698:	8b60c8b3 	.word	0x8b60c8b3
 800869c:	3fc68a28 	.word	0x3fc68a28
 80086a0:	509f79fb 	.word	0x509f79fb
 80086a4:	3fd34413 	.word	0x3fd34413
 80086a8:	0800c74c 	.word	0x0800c74c
 80086ac:	0800c763 	.word	0x0800c763
 80086b0:	7ff00000 	.word	0x7ff00000
 80086b4:	0800caa9 	.word	0x0800caa9
 80086b8:	3ff80000 	.word	0x3ff80000
 80086bc:	0800c860 	.word	0x0800c860
 80086c0:	0800c7bb 	.word	0x0800c7bb
 80086c4:	0800c748 	.word	0x0800c748
 80086c8:	0800caa8 	.word	0x0800caa8
 80086cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086d0:	6018      	str	r0, [r3, #0]
 80086d2:	9b07      	ldr	r3, [sp, #28]
 80086d4:	2b0e      	cmp	r3, #14
 80086d6:	f200 80a4 	bhi.w	8008822 <_dtoa_r+0x442>
 80086da:	2c00      	cmp	r4, #0
 80086dc:	f000 80a1 	beq.w	8008822 <_dtoa_r+0x442>
 80086e0:	2f00      	cmp	r7, #0
 80086e2:	dd33      	ble.n	800874c <_dtoa_r+0x36c>
 80086e4:	4bad      	ldr	r3, [pc, #692]	@ (800899c <_dtoa_r+0x5bc>)
 80086e6:	f007 020f 	and.w	r2, r7, #15
 80086ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086ee:	ed93 7b00 	vldr	d7, [r3]
 80086f2:	05f8      	lsls	r0, r7, #23
 80086f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80086f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80086fc:	d516      	bpl.n	800872c <_dtoa_r+0x34c>
 80086fe:	4ba8      	ldr	r3, [pc, #672]	@ (80089a0 <_dtoa_r+0x5c0>)
 8008700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008708:	f7f8 f8a8 	bl	800085c <__aeabi_ddiv>
 800870c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008710:	f004 040f 	and.w	r4, r4, #15
 8008714:	2603      	movs	r6, #3
 8008716:	4da2      	ldr	r5, [pc, #648]	@ (80089a0 <_dtoa_r+0x5c0>)
 8008718:	b954      	cbnz	r4, 8008730 <_dtoa_r+0x350>
 800871a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800871e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008722:	f7f8 f89b 	bl	800085c <__aeabi_ddiv>
 8008726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800872a:	e028      	b.n	800877e <_dtoa_r+0x39e>
 800872c:	2602      	movs	r6, #2
 800872e:	e7f2      	b.n	8008716 <_dtoa_r+0x336>
 8008730:	07e1      	lsls	r1, r4, #31
 8008732:	d508      	bpl.n	8008746 <_dtoa_r+0x366>
 8008734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800873c:	f7f7 ff64 	bl	8000608 <__aeabi_dmul>
 8008740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008744:	3601      	adds	r6, #1
 8008746:	1064      	asrs	r4, r4, #1
 8008748:	3508      	adds	r5, #8
 800874a:	e7e5      	b.n	8008718 <_dtoa_r+0x338>
 800874c:	f000 80d2 	beq.w	80088f4 <_dtoa_r+0x514>
 8008750:	427c      	negs	r4, r7
 8008752:	4b92      	ldr	r3, [pc, #584]	@ (800899c <_dtoa_r+0x5bc>)
 8008754:	4d92      	ldr	r5, [pc, #584]	@ (80089a0 <_dtoa_r+0x5c0>)
 8008756:	f004 020f 	and.w	r2, r4, #15
 800875a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800875e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008766:	f7f7 ff4f 	bl	8000608 <__aeabi_dmul>
 800876a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800876e:	1124      	asrs	r4, r4, #4
 8008770:	2300      	movs	r3, #0
 8008772:	2602      	movs	r6, #2
 8008774:	2c00      	cmp	r4, #0
 8008776:	f040 80b2 	bne.w	80088de <_dtoa_r+0x4fe>
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1d3      	bne.n	8008726 <_dtoa_r+0x346>
 800877e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008780:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 80b7 	beq.w	80088f8 <_dtoa_r+0x518>
 800878a:	4b86      	ldr	r3, [pc, #536]	@ (80089a4 <_dtoa_r+0x5c4>)
 800878c:	2200      	movs	r2, #0
 800878e:	4620      	mov	r0, r4
 8008790:	4629      	mov	r1, r5
 8008792:	f7f8 f9ab 	bl	8000aec <__aeabi_dcmplt>
 8008796:	2800      	cmp	r0, #0
 8008798:	f000 80ae 	beq.w	80088f8 <_dtoa_r+0x518>
 800879c:	9b07      	ldr	r3, [sp, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	f000 80aa 	beq.w	80088f8 <_dtoa_r+0x518>
 80087a4:	9b00      	ldr	r3, [sp, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	dd37      	ble.n	800881a <_dtoa_r+0x43a>
 80087aa:	1e7b      	subs	r3, r7, #1
 80087ac:	9304      	str	r3, [sp, #16]
 80087ae:	4620      	mov	r0, r4
 80087b0:	4b7d      	ldr	r3, [pc, #500]	@ (80089a8 <_dtoa_r+0x5c8>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7f7 ff27 	bl	8000608 <__aeabi_dmul>
 80087ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087be:	9c00      	ldr	r4, [sp, #0]
 80087c0:	3601      	adds	r6, #1
 80087c2:	4630      	mov	r0, r6
 80087c4:	f7f7 feb6 	bl	8000534 <__aeabi_i2d>
 80087c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087cc:	f7f7 ff1c 	bl	8000608 <__aeabi_dmul>
 80087d0:	4b76      	ldr	r3, [pc, #472]	@ (80089ac <_dtoa_r+0x5cc>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	f7f7 fd62 	bl	800029c <__adddf3>
 80087d8:	4605      	mov	r5, r0
 80087da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80087de:	2c00      	cmp	r4, #0
 80087e0:	f040 808d 	bne.w	80088fe <_dtoa_r+0x51e>
 80087e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087e8:	4b71      	ldr	r3, [pc, #452]	@ (80089b0 <_dtoa_r+0x5d0>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	f7f7 fd54 	bl	8000298 <__aeabi_dsub>
 80087f0:	4602      	mov	r2, r0
 80087f2:	460b      	mov	r3, r1
 80087f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087f8:	462a      	mov	r2, r5
 80087fa:	4633      	mov	r3, r6
 80087fc:	f7f8 f994 	bl	8000b28 <__aeabi_dcmpgt>
 8008800:	2800      	cmp	r0, #0
 8008802:	f040 828b 	bne.w	8008d1c <_dtoa_r+0x93c>
 8008806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800880a:	462a      	mov	r2, r5
 800880c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008810:	f7f8 f96c 	bl	8000aec <__aeabi_dcmplt>
 8008814:	2800      	cmp	r0, #0
 8008816:	f040 8128 	bne.w	8008a6a <_dtoa_r+0x68a>
 800881a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800881e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008822:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008824:	2b00      	cmp	r3, #0
 8008826:	f2c0 815a 	blt.w	8008ade <_dtoa_r+0x6fe>
 800882a:	2f0e      	cmp	r7, #14
 800882c:	f300 8157 	bgt.w	8008ade <_dtoa_r+0x6fe>
 8008830:	4b5a      	ldr	r3, [pc, #360]	@ (800899c <_dtoa_r+0x5bc>)
 8008832:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008836:	ed93 7b00 	vldr	d7, [r3]
 800883a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800883c:	2b00      	cmp	r3, #0
 800883e:	ed8d 7b00 	vstr	d7, [sp]
 8008842:	da03      	bge.n	800884c <_dtoa_r+0x46c>
 8008844:	9b07      	ldr	r3, [sp, #28]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f340 8101 	ble.w	8008a4e <_dtoa_r+0x66e>
 800884c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008850:	4656      	mov	r6, sl
 8008852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008856:	4620      	mov	r0, r4
 8008858:	4629      	mov	r1, r5
 800885a:	f7f7 ffff 	bl	800085c <__aeabi_ddiv>
 800885e:	f7f8 f983 	bl	8000b68 <__aeabi_d2iz>
 8008862:	4680      	mov	r8, r0
 8008864:	f7f7 fe66 	bl	8000534 <__aeabi_i2d>
 8008868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800886c:	f7f7 fecc 	bl	8000608 <__aeabi_dmul>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	4620      	mov	r0, r4
 8008876:	4629      	mov	r1, r5
 8008878:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800887c:	f7f7 fd0c 	bl	8000298 <__aeabi_dsub>
 8008880:	f806 4b01 	strb.w	r4, [r6], #1
 8008884:	9d07      	ldr	r5, [sp, #28]
 8008886:	eba6 040a 	sub.w	r4, r6, sl
 800888a:	42a5      	cmp	r5, r4
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	f040 8117 	bne.w	8008ac2 <_dtoa_r+0x6e2>
 8008894:	f7f7 fd02 	bl	800029c <__adddf3>
 8008898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800889c:	4604      	mov	r4, r0
 800889e:	460d      	mov	r5, r1
 80088a0:	f7f8 f942 	bl	8000b28 <__aeabi_dcmpgt>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	f040 80f9 	bne.w	8008a9c <_dtoa_r+0x6bc>
 80088aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088ae:	4620      	mov	r0, r4
 80088b0:	4629      	mov	r1, r5
 80088b2:	f7f8 f911 	bl	8000ad8 <__aeabi_dcmpeq>
 80088b6:	b118      	cbz	r0, 80088c0 <_dtoa_r+0x4e0>
 80088b8:	f018 0f01 	tst.w	r8, #1
 80088bc:	f040 80ee 	bne.w	8008a9c <_dtoa_r+0x6bc>
 80088c0:	4649      	mov	r1, r9
 80088c2:	4658      	mov	r0, fp
 80088c4:	f000 fc90 	bl	80091e8 <_Bfree>
 80088c8:	2300      	movs	r3, #0
 80088ca:	7033      	strb	r3, [r6, #0]
 80088cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80088ce:	3701      	adds	r7, #1
 80088d0:	601f      	str	r7, [r3, #0]
 80088d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 831d 	beq.w	8008f14 <_dtoa_r+0xb34>
 80088da:	601e      	str	r6, [r3, #0]
 80088dc:	e31a      	b.n	8008f14 <_dtoa_r+0xb34>
 80088de:	07e2      	lsls	r2, r4, #31
 80088e0:	d505      	bpl.n	80088ee <_dtoa_r+0x50e>
 80088e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088e6:	f7f7 fe8f 	bl	8000608 <__aeabi_dmul>
 80088ea:	3601      	adds	r6, #1
 80088ec:	2301      	movs	r3, #1
 80088ee:	1064      	asrs	r4, r4, #1
 80088f0:	3508      	adds	r5, #8
 80088f2:	e73f      	b.n	8008774 <_dtoa_r+0x394>
 80088f4:	2602      	movs	r6, #2
 80088f6:	e742      	b.n	800877e <_dtoa_r+0x39e>
 80088f8:	9c07      	ldr	r4, [sp, #28]
 80088fa:	9704      	str	r7, [sp, #16]
 80088fc:	e761      	b.n	80087c2 <_dtoa_r+0x3e2>
 80088fe:	4b27      	ldr	r3, [pc, #156]	@ (800899c <_dtoa_r+0x5bc>)
 8008900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008906:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800890a:	4454      	add	r4, sl
 800890c:	2900      	cmp	r1, #0
 800890e:	d053      	beq.n	80089b8 <_dtoa_r+0x5d8>
 8008910:	4928      	ldr	r1, [pc, #160]	@ (80089b4 <_dtoa_r+0x5d4>)
 8008912:	2000      	movs	r0, #0
 8008914:	f7f7 ffa2 	bl	800085c <__aeabi_ddiv>
 8008918:	4633      	mov	r3, r6
 800891a:	462a      	mov	r2, r5
 800891c:	f7f7 fcbc 	bl	8000298 <__aeabi_dsub>
 8008920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008924:	4656      	mov	r6, sl
 8008926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892a:	f7f8 f91d 	bl	8000b68 <__aeabi_d2iz>
 800892e:	4605      	mov	r5, r0
 8008930:	f7f7 fe00 	bl	8000534 <__aeabi_i2d>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893c:	f7f7 fcac 	bl	8000298 <__aeabi_dsub>
 8008940:	3530      	adds	r5, #48	@ 0x30
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800894a:	f806 5b01 	strb.w	r5, [r6], #1
 800894e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008952:	f7f8 f8cb 	bl	8000aec <__aeabi_dcmplt>
 8008956:	2800      	cmp	r0, #0
 8008958:	d171      	bne.n	8008a3e <_dtoa_r+0x65e>
 800895a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800895e:	4911      	ldr	r1, [pc, #68]	@ (80089a4 <_dtoa_r+0x5c4>)
 8008960:	2000      	movs	r0, #0
 8008962:	f7f7 fc99 	bl	8000298 <__aeabi_dsub>
 8008966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800896a:	f7f8 f8bf 	bl	8000aec <__aeabi_dcmplt>
 800896e:	2800      	cmp	r0, #0
 8008970:	f040 8095 	bne.w	8008a9e <_dtoa_r+0x6be>
 8008974:	42a6      	cmp	r6, r4
 8008976:	f43f af50 	beq.w	800881a <_dtoa_r+0x43a>
 800897a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800897e:	4b0a      	ldr	r3, [pc, #40]	@ (80089a8 <_dtoa_r+0x5c8>)
 8008980:	2200      	movs	r2, #0
 8008982:	f7f7 fe41 	bl	8000608 <__aeabi_dmul>
 8008986:	4b08      	ldr	r3, [pc, #32]	@ (80089a8 <_dtoa_r+0x5c8>)
 8008988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800898c:	2200      	movs	r2, #0
 800898e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008992:	f7f7 fe39 	bl	8000608 <__aeabi_dmul>
 8008996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800899a:	e7c4      	b.n	8008926 <_dtoa_r+0x546>
 800899c:	0800c860 	.word	0x0800c860
 80089a0:	0800c838 	.word	0x0800c838
 80089a4:	3ff00000 	.word	0x3ff00000
 80089a8:	40240000 	.word	0x40240000
 80089ac:	401c0000 	.word	0x401c0000
 80089b0:	40140000 	.word	0x40140000
 80089b4:	3fe00000 	.word	0x3fe00000
 80089b8:	4631      	mov	r1, r6
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7f7 fe24 	bl	8000608 <__aeabi_dmul>
 80089c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80089c6:	4656      	mov	r6, sl
 80089c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089cc:	f7f8 f8cc 	bl	8000b68 <__aeabi_d2iz>
 80089d0:	4605      	mov	r5, r0
 80089d2:	f7f7 fdaf 	bl	8000534 <__aeabi_i2d>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089de:	f7f7 fc5b 	bl	8000298 <__aeabi_dsub>
 80089e2:	3530      	adds	r5, #48	@ 0x30
 80089e4:	f806 5b01 	strb.w	r5, [r6], #1
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089f2:	f04f 0200 	mov.w	r2, #0
 80089f6:	d124      	bne.n	8008a42 <_dtoa_r+0x662>
 80089f8:	4bac      	ldr	r3, [pc, #688]	@ (8008cac <_dtoa_r+0x8cc>)
 80089fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089fe:	f7f7 fc4d 	bl	800029c <__adddf3>
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a0a:	f7f8 f88d 	bl	8000b28 <__aeabi_dcmpgt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d145      	bne.n	8008a9e <_dtoa_r+0x6be>
 8008a12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a16:	49a5      	ldr	r1, [pc, #660]	@ (8008cac <_dtoa_r+0x8cc>)
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f7f7 fc3d 	bl	8000298 <__aeabi_dsub>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	460b      	mov	r3, r1
 8008a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a26:	f7f8 f861 	bl	8000aec <__aeabi_dcmplt>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	f43f aef5 	beq.w	800881a <_dtoa_r+0x43a>
 8008a30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008a32:	1e73      	subs	r3, r6, #1
 8008a34:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a3a:	2b30      	cmp	r3, #48	@ 0x30
 8008a3c:	d0f8      	beq.n	8008a30 <_dtoa_r+0x650>
 8008a3e:	9f04      	ldr	r7, [sp, #16]
 8008a40:	e73e      	b.n	80088c0 <_dtoa_r+0x4e0>
 8008a42:	4b9b      	ldr	r3, [pc, #620]	@ (8008cb0 <_dtoa_r+0x8d0>)
 8008a44:	f7f7 fde0 	bl	8000608 <__aeabi_dmul>
 8008a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a4c:	e7bc      	b.n	80089c8 <_dtoa_r+0x5e8>
 8008a4e:	d10c      	bne.n	8008a6a <_dtoa_r+0x68a>
 8008a50:	4b98      	ldr	r3, [pc, #608]	@ (8008cb4 <_dtoa_r+0x8d4>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a58:	f7f7 fdd6 	bl	8000608 <__aeabi_dmul>
 8008a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a60:	f7f8 f858 	bl	8000b14 <__aeabi_dcmpge>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f000 8157 	beq.w	8008d18 <_dtoa_r+0x938>
 8008a6a:	2400      	movs	r4, #0
 8008a6c:	4625      	mov	r5, r4
 8008a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a70:	43db      	mvns	r3, r3
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	4656      	mov	r6, sl
 8008a76:	2700      	movs	r7, #0
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4658      	mov	r0, fp
 8008a7c:	f000 fbb4 	bl	80091e8 <_Bfree>
 8008a80:	2d00      	cmp	r5, #0
 8008a82:	d0dc      	beq.n	8008a3e <_dtoa_r+0x65e>
 8008a84:	b12f      	cbz	r7, 8008a92 <_dtoa_r+0x6b2>
 8008a86:	42af      	cmp	r7, r5
 8008a88:	d003      	beq.n	8008a92 <_dtoa_r+0x6b2>
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	4658      	mov	r0, fp
 8008a8e:	f000 fbab 	bl	80091e8 <_Bfree>
 8008a92:	4629      	mov	r1, r5
 8008a94:	4658      	mov	r0, fp
 8008a96:	f000 fba7 	bl	80091e8 <_Bfree>
 8008a9a:	e7d0      	b.n	8008a3e <_dtoa_r+0x65e>
 8008a9c:	9704      	str	r7, [sp, #16]
 8008a9e:	4633      	mov	r3, r6
 8008aa0:	461e      	mov	r6, r3
 8008aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aa6:	2a39      	cmp	r2, #57	@ 0x39
 8008aa8:	d107      	bne.n	8008aba <_dtoa_r+0x6da>
 8008aaa:	459a      	cmp	sl, r3
 8008aac:	d1f8      	bne.n	8008aa0 <_dtoa_r+0x6c0>
 8008aae:	9a04      	ldr	r2, [sp, #16]
 8008ab0:	3201      	adds	r2, #1
 8008ab2:	9204      	str	r2, [sp, #16]
 8008ab4:	2230      	movs	r2, #48	@ 0x30
 8008ab6:	f88a 2000 	strb.w	r2, [sl]
 8008aba:	781a      	ldrb	r2, [r3, #0]
 8008abc:	3201      	adds	r2, #1
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	e7bd      	b.n	8008a3e <_dtoa_r+0x65e>
 8008ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8008cb0 <_dtoa_r+0x8d0>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	f7f7 fd9f 	bl	8000608 <__aeabi_dmul>
 8008aca:	2200      	movs	r2, #0
 8008acc:	2300      	movs	r3, #0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	f7f8 f801 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	f43f aebb 	beq.w	8008852 <_dtoa_r+0x472>
 8008adc:	e6f0      	b.n	80088c0 <_dtoa_r+0x4e0>
 8008ade:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ae0:	2a00      	cmp	r2, #0
 8008ae2:	f000 80db 	beq.w	8008c9c <_dtoa_r+0x8bc>
 8008ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae8:	2a01      	cmp	r2, #1
 8008aea:	f300 80bf 	bgt.w	8008c6c <_dtoa_r+0x88c>
 8008aee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008af0:	2a00      	cmp	r2, #0
 8008af2:	f000 80b7 	beq.w	8008c64 <_dtoa_r+0x884>
 8008af6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008afa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008afc:	4646      	mov	r6, r8
 8008afe:	9a08      	ldr	r2, [sp, #32]
 8008b00:	2101      	movs	r1, #1
 8008b02:	441a      	add	r2, r3
 8008b04:	4658      	mov	r0, fp
 8008b06:	4498      	add	r8, r3
 8008b08:	9208      	str	r2, [sp, #32]
 8008b0a:	f000 fc6b 	bl	80093e4 <__i2b>
 8008b0e:	4605      	mov	r5, r0
 8008b10:	b15e      	cbz	r6, 8008b2a <_dtoa_r+0x74a>
 8008b12:	9b08      	ldr	r3, [sp, #32]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	dd08      	ble.n	8008b2a <_dtoa_r+0x74a>
 8008b18:	42b3      	cmp	r3, r6
 8008b1a:	9a08      	ldr	r2, [sp, #32]
 8008b1c:	bfa8      	it	ge
 8008b1e:	4633      	movge	r3, r6
 8008b20:	eba8 0803 	sub.w	r8, r8, r3
 8008b24:	1af6      	subs	r6, r6, r3
 8008b26:	1ad3      	subs	r3, r2, r3
 8008b28:	9308      	str	r3, [sp, #32]
 8008b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b2c:	b1f3      	cbz	r3, 8008b6c <_dtoa_r+0x78c>
 8008b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 80b7 	beq.w	8008ca4 <_dtoa_r+0x8c4>
 8008b36:	b18c      	cbz	r4, 8008b5c <_dtoa_r+0x77c>
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4622      	mov	r2, r4
 8008b3c:	4658      	mov	r0, fp
 8008b3e:	f000 fd11 	bl	8009564 <__pow5mult>
 8008b42:	464a      	mov	r2, r9
 8008b44:	4601      	mov	r1, r0
 8008b46:	4605      	mov	r5, r0
 8008b48:	4658      	mov	r0, fp
 8008b4a:	f000 fc61 	bl	8009410 <__multiply>
 8008b4e:	4649      	mov	r1, r9
 8008b50:	9004      	str	r0, [sp, #16]
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 fb48 	bl	80091e8 <_Bfree>
 8008b58:	9b04      	ldr	r3, [sp, #16]
 8008b5a:	4699      	mov	r9, r3
 8008b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b5e:	1b1a      	subs	r2, r3, r4
 8008b60:	d004      	beq.n	8008b6c <_dtoa_r+0x78c>
 8008b62:	4649      	mov	r1, r9
 8008b64:	4658      	mov	r0, fp
 8008b66:	f000 fcfd 	bl	8009564 <__pow5mult>
 8008b6a:	4681      	mov	r9, r0
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	4658      	mov	r0, fp
 8008b70:	f000 fc38 	bl	80093e4 <__i2b>
 8008b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b76:	4604      	mov	r4, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 81cf 	beq.w	8008f1c <_dtoa_r+0xb3c>
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4601      	mov	r1, r0
 8008b82:	4658      	mov	r0, fp
 8008b84:	f000 fcee 	bl	8009564 <__pow5mult>
 8008b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	f300 8095 	bgt.w	8008cbc <_dtoa_r+0x8dc>
 8008b92:	9b02      	ldr	r3, [sp, #8]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f040 8087 	bne.w	8008ca8 <_dtoa_r+0x8c8>
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f040 8089 	bne.w	8008cb8 <_dtoa_r+0x8d8>
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bac:	0d1b      	lsrs	r3, r3, #20
 8008bae:	051b      	lsls	r3, r3, #20
 8008bb0:	b12b      	cbz	r3, 8008bbe <_dtoa_r+0x7de>
 8008bb2:	9b08      	ldr	r3, [sp, #32]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	9308      	str	r3, [sp, #32]
 8008bb8:	f108 0801 	add.w	r8, r8, #1
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	f000 81b0 	beq.w	8008f28 <_dtoa_r+0xb48>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bce:	6918      	ldr	r0, [r3, #16]
 8008bd0:	f000 fbbc 	bl	800934c <__hi0bits>
 8008bd4:	f1c0 0020 	rsb	r0, r0, #32
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	4418      	add	r0, r3
 8008bdc:	f010 001f 	ands.w	r0, r0, #31
 8008be0:	d077      	beq.n	8008cd2 <_dtoa_r+0x8f2>
 8008be2:	f1c0 0320 	rsb	r3, r0, #32
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	dd6b      	ble.n	8008cc2 <_dtoa_r+0x8e2>
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	f1c0 001c 	rsb	r0, r0, #28
 8008bf0:	4403      	add	r3, r0
 8008bf2:	4480      	add	r8, r0
 8008bf4:	4406      	add	r6, r0
 8008bf6:	9308      	str	r3, [sp, #32]
 8008bf8:	f1b8 0f00 	cmp.w	r8, #0
 8008bfc:	dd05      	ble.n	8008c0a <_dtoa_r+0x82a>
 8008bfe:	4649      	mov	r1, r9
 8008c00:	4642      	mov	r2, r8
 8008c02:	4658      	mov	r0, fp
 8008c04:	f000 fd08 	bl	8009618 <__lshift>
 8008c08:	4681      	mov	r9, r0
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	dd05      	ble.n	8008c1c <_dtoa_r+0x83c>
 8008c10:	4621      	mov	r1, r4
 8008c12:	461a      	mov	r2, r3
 8008c14:	4658      	mov	r0, fp
 8008c16:	f000 fcff 	bl	8009618 <__lshift>
 8008c1a:	4604      	mov	r4, r0
 8008c1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d059      	beq.n	8008cd6 <_dtoa_r+0x8f6>
 8008c22:	4621      	mov	r1, r4
 8008c24:	4648      	mov	r0, r9
 8008c26:	f000 fd63 	bl	80096f0 <__mcmp>
 8008c2a:	2800      	cmp	r0, #0
 8008c2c:	da53      	bge.n	8008cd6 <_dtoa_r+0x8f6>
 8008c2e:	1e7b      	subs	r3, r7, #1
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	4649      	mov	r1, r9
 8008c34:	2300      	movs	r3, #0
 8008c36:	220a      	movs	r2, #10
 8008c38:	4658      	mov	r0, fp
 8008c3a:	f000 faf7 	bl	800922c <__multadd>
 8008c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c40:	4681      	mov	r9, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 8172 	beq.w	8008f2c <_dtoa_r+0xb4c>
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4629      	mov	r1, r5
 8008c4c:	220a      	movs	r2, #10
 8008c4e:	4658      	mov	r0, fp
 8008c50:	f000 faec 	bl	800922c <__multadd>
 8008c54:	9b00      	ldr	r3, [sp, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	4605      	mov	r5, r0
 8008c5a:	dc67      	bgt.n	8008d2c <_dtoa_r+0x94c>
 8008c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	dc41      	bgt.n	8008ce6 <_dtoa_r+0x906>
 8008c62:	e063      	b.n	8008d2c <_dtoa_r+0x94c>
 8008c64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008c66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008c6a:	e746      	b.n	8008afa <_dtoa_r+0x71a>
 8008c6c:	9b07      	ldr	r3, [sp, #28]
 8008c6e:	1e5c      	subs	r4, r3, #1
 8008c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c72:	42a3      	cmp	r3, r4
 8008c74:	bfbf      	itttt	lt
 8008c76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008c78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008c7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008c7c:	1ae3      	sublt	r3, r4, r3
 8008c7e:	bfb4      	ite	lt
 8008c80:	18d2      	addlt	r2, r2, r3
 8008c82:	1b1c      	subge	r4, r3, r4
 8008c84:	9b07      	ldr	r3, [sp, #28]
 8008c86:	bfbc      	itt	lt
 8008c88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008c8a:	2400      	movlt	r4, #0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	bfb5      	itete	lt
 8008c90:	eba8 0603 	sublt.w	r6, r8, r3
 8008c94:	9b07      	ldrge	r3, [sp, #28]
 8008c96:	2300      	movlt	r3, #0
 8008c98:	4646      	movge	r6, r8
 8008c9a:	e730      	b.n	8008afe <_dtoa_r+0x71e>
 8008c9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008ca0:	4646      	mov	r6, r8
 8008ca2:	e735      	b.n	8008b10 <_dtoa_r+0x730>
 8008ca4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ca6:	e75c      	b.n	8008b62 <_dtoa_r+0x782>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	e788      	b.n	8008bbe <_dtoa_r+0x7de>
 8008cac:	3fe00000 	.word	0x3fe00000
 8008cb0:	40240000 	.word	0x40240000
 8008cb4:	40140000 	.word	0x40140000
 8008cb8:	9b02      	ldr	r3, [sp, #8]
 8008cba:	e780      	b.n	8008bbe <_dtoa_r+0x7de>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cc0:	e782      	b.n	8008bc8 <_dtoa_r+0x7e8>
 8008cc2:	d099      	beq.n	8008bf8 <_dtoa_r+0x818>
 8008cc4:	9a08      	ldr	r2, [sp, #32]
 8008cc6:	331c      	adds	r3, #28
 8008cc8:	441a      	add	r2, r3
 8008cca:	4498      	add	r8, r3
 8008ccc:	441e      	add	r6, r3
 8008cce:	9208      	str	r2, [sp, #32]
 8008cd0:	e792      	b.n	8008bf8 <_dtoa_r+0x818>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	e7f6      	b.n	8008cc4 <_dtoa_r+0x8e4>
 8008cd6:	9b07      	ldr	r3, [sp, #28]
 8008cd8:	9704      	str	r7, [sp, #16]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	dc20      	bgt.n	8008d20 <_dtoa_r+0x940>
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	dd1e      	ble.n	8008d24 <_dtoa_r+0x944>
 8008ce6:	9b00      	ldr	r3, [sp, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f47f aec0 	bne.w	8008a6e <_dtoa_r+0x68e>
 8008cee:	4621      	mov	r1, r4
 8008cf0:	2205      	movs	r2, #5
 8008cf2:	4658      	mov	r0, fp
 8008cf4:	f000 fa9a 	bl	800922c <__multadd>
 8008cf8:	4601      	mov	r1, r0
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	4648      	mov	r0, r9
 8008cfe:	f000 fcf7 	bl	80096f0 <__mcmp>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	f77f aeb3 	ble.w	8008a6e <_dtoa_r+0x68e>
 8008d08:	4656      	mov	r6, sl
 8008d0a:	2331      	movs	r3, #49	@ 0x31
 8008d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8008d10:	9b04      	ldr	r3, [sp, #16]
 8008d12:	3301      	adds	r3, #1
 8008d14:	9304      	str	r3, [sp, #16]
 8008d16:	e6ae      	b.n	8008a76 <_dtoa_r+0x696>
 8008d18:	9c07      	ldr	r4, [sp, #28]
 8008d1a:	9704      	str	r7, [sp, #16]
 8008d1c:	4625      	mov	r5, r4
 8008d1e:	e7f3      	b.n	8008d08 <_dtoa_r+0x928>
 8008d20:	9b07      	ldr	r3, [sp, #28]
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 8104 	beq.w	8008f34 <_dtoa_r+0xb54>
 8008d2c:	2e00      	cmp	r6, #0
 8008d2e:	dd05      	ble.n	8008d3c <_dtoa_r+0x95c>
 8008d30:	4629      	mov	r1, r5
 8008d32:	4632      	mov	r2, r6
 8008d34:	4658      	mov	r0, fp
 8008d36:	f000 fc6f 	bl	8009618 <__lshift>
 8008d3a:	4605      	mov	r5, r0
 8008d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d05a      	beq.n	8008df8 <_dtoa_r+0xa18>
 8008d42:	6869      	ldr	r1, [r5, #4]
 8008d44:	4658      	mov	r0, fp
 8008d46:	f000 fa0f 	bl	8009168 <_Balloc>
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	b928      	cbnz	r0, 8008d5a <_dtoa_r+0x97a>
 8008d4e:	4b84      	ldr	r3, [pc, #528]	@ (8008f60 <_dtoa_r+0xb80>)
 8008d50:	4602      	mov	r2, r0
 8008d52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008d56:	f7ff bb5a 	b.w	800840e <_dtoa_r+0x2e>
 8008d5a:	692a      	ldr	r2, [r5, #16]
 8008d5c:	3202      	adds	r2, #2
 8008d5e:	0092      	lsls	r2, r2, #2
 8008d60:	f105 010c 	add.w	r1, r5, #12
 8008d64:	300c      	adds	r0, #12
 8008d66:	f7ff fa9e 	bl	80082a6 <memcpy>
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4658      	mov	r0, fp
 8008d70:	f000 fc52 	bl	8009618 <__lshift>
 8008d74:	f10a 0301 	add.w	r3, sl, #1
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	9b00      	ldr	r3, [sp, #0]
 8008d7c:	4453      	add	r3, sl
 8008d7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d80:	9b02      	ldr	r3, [sp, #8]
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	462f      	mov	r7, r5
 8008d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	9b07      	ldr	r3, [sp, #28]
 8008d8e:	4621      	mov	r1, r4
 8008d90:	3b01      	subs	r3, #1
 8008d92:	4648      	mov	r0, r9
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	f7ff fa9b 	bl	80082d0 <quorem>
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	9002      	str	r0, [sp, #8]
 8008d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008da2:	4648      	mov	r0, r9
 8008da4:	f000 fca4 	bl	80096f0 <__mcmp>
 8008da8:	462a      	mov	r2, r5
 8008daa:	9008      	str	r0, [sp, #32]
 8008dac:	4621      	mov	r1, r4
 8008dae:	4658      	mov	r0, fp
 8008db0:	f000 fcba 	bl	8009728 <__mdiff>
 8008db4:	68c2      	ldr	r2, [r0, #12]
 8008db6:	4606      	mov	r6, r0
 8008db8:	bb02      	cbnz	r2, 8008dfc <_dtoa_r+0xa1c>
 8008dba:	4601      	mov	r1, r0
 8008dbc:	4648      	mov	r0, r9
 8008dbe:	f000 fc97 	bl	80096f0 <__mcmp>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4658      	mov	r0, fp
 8008dc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dca:	f000 fa0d 	bl	80091e8 <_Bfree>
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008dd2:	9e07      	ldr	r6, [sp, #28]
 8008dd4:	ea43 0102 	orr.w	r1, r3, r2
 8008dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dda:	4319      	orrs	r1, r3
 8008ddc:	d110      	bne.n	8008e00 <_dtoa_r+0xa20>
 8008dde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008de2:	d029      	beq.n	8008e38 <_dtoa_r+0xa58>
 8008de4:	9b08      	ldr	r3, [sp, #32]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	dd02      	ble.n	8008df0 <_dtoa_r+0xa10>
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008df0:	9b00      	ldr	r3, [sp, #0]
 8008df2:	f883 8000 	strb.w	r8, [r3]
 8008df6:	e63f      	b.n	8008a78 <_dtoa_r+0x698>
 8008df8:	4628      	mov	r0, r5
 8008dfa:	e7bb      	b.n	8008d74 <_dtoa_r+0x994>
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	e7e1      	b.n	8008dc4 <_dtoa_r+0x9e4>
 8008e00:	9b08      	ldr	r3, [sp, #32]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	db04      	blt.n	8008e10 <_dtoa_r+0xa30>
 8008e06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e0c:	430b      	orrs	r3, r1
 8008e0e:	d120      	bne.n	8008e52 <_dtoa_r+0xa72>
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	dded      	ble.n	8008df0 <_dtoa_r+0xa10>
 8008e14:	4649      	mov	r1, r9
 8008e16:	2201      	movs	r2, #1
 8008e18:	4658      	mov	r0, fp
 8008e1a:	f000 fbfd 	bl	8009618 <__lshift>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4681      	mov	r9, r0
 8008e22:	f000 fc65 	bl	80096f0 <__mcmp>
 8008e26:	2800      	cmp	r0, #0
 8008e28:	dc03      	bgt.n	8008e32 <_dtoa_r+0xa52>
 8008e2a:	d1e1      	bne.n	8008df0 <_dtoa_r+0xa10>
 8008e2c:	f018 0f01 	tst.w	r8, #1
 8008e30:	d0de      	beq.n	8008df0 <_dtoa_r+0xa10>
 8008e32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e36:	d1d8      	bne.n	8008dea <_dtoa_r+0xa0a>
 8008e38:	9a00      	ldr	r2, [sp, #0]
 8008e3a:	2339      	movs	r3, #57	@ 0x39
 8008e3c:	7013      	strb	r3, [r2, #0]
 8008e3e:	4633      	mov	r3, r6
 8008e40:	461e      	mov	r6, r3
 8008e42:	3b01      	subs	r3, #1
 8008e44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008e48:	2a39      	cmp	r2, #57	@ 0x39
 8008e4a:	d052      	beq.n	8008ef2 <_dtoa_r+0xb12>
 8008e4c:	3201      	adds	r2, #1
 8008e4e:	701a      	strb	r2, [r3, #0]
 8008e50:	e612      	b.n	8008a78 <_dtoa_r+0x698>
 8008e52:	2a00      	cmp	r2, #0
 8008e54:	dd07      	ble.n	8008e66 <_dtoa_r+0xa86>
 8008e56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e5a:	d0ed      	beq.n	8008e38 <_dtoa_r+0xa58>
 8008e5c:	9a00      	ldr	r2, [sp, #0]
 8008e5e:	f108 0301 	add.w	r3, r8, #1
 8008e62:	7013      	strb	r3, [r2, #0]
 8008e64:	e608      	b.n	8008a78 <_dtoa_r+0x698>
 8008e66:	9b07      	ldr	r3, [sp, #28]
 8008e68:	9a07      	ldr	r2, [sp, #28]
 8008e6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d028      	beq.n	8008ec6 <_dtoa_r+0xae6>
 8008e74:	4649      	mov	r1, r9
 8008e76:	2300      	movs	r3, #0
 8008e78:	220a      	movs	r2, #10
 8008e7a:	4658      	mov	r0, fp
 8008e7c:	f000 f9d6 	bl	800922c <__multadd>
 8008e80:	42af      	cmp	r7, r5
 8008e82:	4681      	mov	r9, r0
 8008e84:	f04f 0300 	mov.w	r3, #0
 8008e88:	f04f 020a 	mov.w	r2, #10
 8008e8c:	4639      	mov	r1, r7
 8008e8e:	4658      	mov	r0, fp
 8008e90:	d107      	bne.n	8008ea2 <_dtoa_r+0xac2>
 8008e92:	f000 f9cb 	bl	800922c <__multadd>
 8008e96:	4607      	mov	r7, r0
 8008e98:	4605      	mov	r5, r0
 8008e9a:	9b07      	ldr	r3, [sp, #28]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	9307      	str	r3, [sp, #28]
 8008ea0:	e774      	b.n	8008d8c <_dtoa_r+0x9ac>
 8008ea2:	f000 f9c3 	bl	800922c <__multadd>
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	4607      	mov	r7, r0
 8008eaa:	2300      	movs	r3, #0
 8008eac:	220a      	movs	r2, #10
 8008eae:	4658      	mov	r0, fp
 8008eb0:	f000 f9bc 	bl	800922c <__multadd>
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	e7f0      	b.n	8008e9a <_dtoa_r+0xaba>
 8008eb8:	9b00      	ldr	r3, [sp, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	bfcc      	ite	gt
 8008ebe:	461e      	movgt	r6, r3
 8008ec0:	2601      	movle	r6, #1
 8008ec2:	4456      	add	r6, sl
 8008ec4:	2700      	movs	r7, #0
 8008ec6:	4649      	mov	r1, r9
 8008ec8:	2201      	movs	r2, #1
 8008eca:	4658      	mov	r0, fp
 8008ecc:	f000 fba4 	bl	8009618 <__lshift>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4681      	mov	r9, r0
 8008ed4:	f000 fc0c 	bl	80096f0 <__mcmp>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	dcb0      	bgt.n	8008e3e <_dtoa_r+0xa5e>
 8008edc:	d102      	bne.n	8008ee4 <_dtoa_r+0xb04>
 8008ede:	f018 0f01 	tst.w	r8, #1
 8008ee2:	d1ac      	bne.n	8008e3e <_dtoa_r+0xa5e>
 8008ee4:	4633      	mov	r3, r6
 8008ee6:	461e      	mov	r6, r3
 8008ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eec:	2a30      	cmp	r2, #48	@ 0x30
 8008eee:	d0fa      	beq.n	8008ee6 <_dtoa_r+0xb06>
 8008ef0:	e5c2      	b.n	8008a78 <_dtoa_r+0x698>
 8008ef2:	459a      	cmp	sl, r3
 8008ef4:	d1a4      	bne.n	8008e40 <_dtoa_r+0xa60>
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	2331      	movs	r3, #49	@ 0x31
 8008efe:	f88a 3000 	strb.w	r3, [sl]
 8008f02:	e5b9      	b.n	8008a78 <_dtoa_r+0x698>
 8008f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008f64 <_dtoa_r+0xb84>
 8008f0a:	b11b      	cbz	r3, 8008f14 <_dtoa_r+0xb34>
 8008f0c:	f10a 0308 	add.w	r3, sl, #8
 8008f10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f12:	6013      	str	r3, [r2, #0]
 8008f14:	4650      	mov	r0, sl
 8008f16:	b019      	add	sp, #100	@ 0x64
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	f77f ae37 	ble.w	8008b92 <_dtoa_r+0x7b2>
 8008f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f28:	2001      	movs	r0, #1
 8008f2a:	e655      	b.n	8008bd8 <_dtoa_r+0x7f8>
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f77f aed6 	ble.w	8008ce0 <_dtoa_r+0x900>
 8008f34:	4656      	mov	r6, sl
 8008f36:	4621      	mov	r1, r4
 8008f38:	4648      	mov	r0, r9
 8008f3a:	f7ff f9c9 	bl	80082d0 <quorem>
 8008f3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f42:	f806 8b01 	strb.w	r8, [r6], #1
 8008f46:	9b00      	ldr	r3, [sp, #0]
 8008f48:	eba6 020a 	sub.w	r2, r6, sl
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	ddb3      	ble.n	8008eb8 <_dtoa_r+0xad8>
 8008f50:	4649      	mov	r1, r9
 8008f52:	2300      	movs	r3, #0
 8008f54:	220a      	movs	r2, #10
 8008f56:	4658      	mov	r0, fp
 8008f58:	f000 f968 	bl	800922c <__multadd>
 8008f5c:	4681      	mov	r9, r0
 8008f5e:	e7ea      	b.n	8008f36 <_dtoa_r+0xb56>
 8008f60:	0800c7bb 	.word	0x0800c7bb
 8008f64:	0800c73f 	.word	0x0800c73f

08008f68 <_free_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	2900      	cmp	r1, #0
 8008f6e:	d041      	beq.n	8008ff4 <_free_r+0x8c>
 8008f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f74:	1f0c      	subs	r4, r1, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfb8      	it	lt
 8008f7a:	18e4      	addlt	r4, r4, r3
 8008f7c:	f000 f8e8 	bl	8009150 <__malloc_lock>
 8008f80:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff8 <_free_r+0x90>)
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	b933      	cbnz	r3, 8008f94 <_free_r+0x2c>
 8008f86:	6063      	str	r3, [r4, #4]
 8008f88:	6014      	str	r4, [r2, #0]
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f90:	f000 b8e4 	b.w	800915c <__malloc_unlock>
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d908      	bls.n	8008faa <_free_r+0x42>
 8008f98:	6820      	ldr	r0, [r4, #0]
 8008f9a:	1821      	adds	r1, r4, r0
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf01      	itttt	eq
 8008fa0:	6819      	ldreq	r1, [r3, #0]
 8008fa2:	685b      	ldreq	r3, [r3, #4]
 8008fa4:	1809      	addeq	r1, r1, r0
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	e7ed      	b.n	8008f86 <_free_r+0x1e>
 8008faa:	461a      	mov	r2, r3
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b10b      	cbz	r3, 8008fb4 <_free_r+0x4c>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d9fa      	bls.n	8008faa <_free_r+0x42>
 8008fb4:	6811      	ldr	r1, [r2, #0]
 8008fb6:	1850      	adds	r0, r2, r1
 8008fb8:	42a0      	cmp	r0, r4
 8008fba:	d10b      	bne.n	8008fd4 <_free_r+0x6c>
 8008fbc:	6820      	ldr	r0, [r4, #0]
 8008fbe:	4401      	add	r1, r0
 8008fc0:	1850      	adds	r0, r2, r1
 8008fc2:	4283      	cmp	r3, r0
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	d1e0      	bne.n	8008f8a <_free_r+0x22>
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	6053      	str	r3, [r2, #4]
 8008fce:	4408      	add	r0, r1
 8008fd0:	6010      	str	r0, [r2, #0]
 8008fd2:	e7da      	b.n	8008f8a <_free_r+0x22>
 8008fd4:	d902      	bls.n	8008fdc <_free_r+0x74>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	602b      	str	r3, [r5, #0]
 8008fda:	e7d6      	b.n	8008f8a <_free_r+0x22>
 8008fdc:	6820      	ldr	r0, [r4, #0]
 8008fde:	1821      	adds	r1, r4, r0
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf04      	itt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	bf04      	itt	eq
 8008fec:	1809      	addeq	r1, r1, r0
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	6054      	str	r4, [r2, #4]
 8008ff2:	e7ca      	b.n	8008f8a <_free_r+0x22>
 8008ff4:	bd38      	pop	{r3, r4, r5, pc}
 8008ff6:	bf00      	nop
 8008ff8:	200006c8 	.word	0x200006c8

08008ffc <malloc>:
 8008ffc:	4b02      	ldr	r3, [pc, #8]	@ (8009008 <malloc+0xc>)
 8008ffe:	4601      	mov	r1, r0
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	f000 b825 	b.w	8009050 <_malloc_r>
 8009006:	bf00      	nop
 8009008:	20000034 	.word	0x20000034

0800900c <sbrk_aligned>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4e0f      	ldr	r6, [pc, #60]	@ (800904c <sbrk_aligned+0x40>)
 8009010:	460c      	mov	r4, r1
 8009012:	6831      	ldr	r1, [r6, #0]
 8009014:	4605      	mov	r5, r0
 8009016:	b911      	cbnz	r1, 800901e <sbrk_aligned+0x12>
 8009018:	f002 f99a 	bl	800b350 <_sbrk_r>
 800901c:	6030      	str	r0, [r6, #0]
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f002 f995 	bl	800b350 <_sbrk_r>
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	d103      	bne.n	8009032 <sbrk_aligned+0x26>
 800902a:	f04f 34ff 	mov.w	r4, #4294967295
 800902e:	4620      	mov	r0, r4
 8009030:	bd70      	pop	{r4, r5, r6, pc}
 8009032:	1cc4      	adds	r4, r0, #3
 8009034:	f024 0403 	bic.w	r4, r4, #3
 8009038:	42a0      	cmp	r0, r4
 800903a:	d0f8      	beq.n	800902e <sbrk_aligned+0x22>
 800903c:	1a21      	subs	r1, r4, r0
 800903e:	4628      	mov	r0, r5
 8009040:	f002 f986 	bl	800b350 <_sbrk_r>
 8009044:	3001      	adds	r0, #1
 8009046:	d1f2      	bne.n	800902e <sbrk_aligned+0x22>
 8009048:	e7ef      	b.n	800902a <sbrk_aligned+0x1e>
 800904a:	bf00      	nop
 800904c:	200006c4 	.word	0x200006c4

08009050 <_malloc_r>:
 8009050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009054:	1ccd      	adds	r5, r1, #3
 8009056:	f025 0503 	bic.w	r5, r5, #3
 800905a:	3508      	adds	r5, #8
 800905c:	2d0c      	cmp	r5, #12
 800905e:	bf38      	it	cc
 8009060:	250c      	movcc	r5, #12
 8009062:	2d00      	cmp	r5, #0
 8009064:	4606      	mov	r6, r0
 8009066:	db01      	blt.n	800906c <_malloc_r+0x1c>
 8009068:	42a9      	cmp	r1, r5
 800906a:	d904      	bls.n	8009076 <_malloc_r+0x26>
 800906c:	230c      	movs	r3, #12
 800906e:	6033      	str	r3, [r6, #0]
 8009070:	2000      	movs	r0, #0
 8009072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800914c <_malloc_r+0xfc>
 800907a:	f000 f869 	bl	8009150 <__malloc_lock>
 800907e:	f8d8 3000 	ldr.w	r3, [r8]
 8009082:	461c      	mov	r4, r3
 8009084:	bb44      	cbnz	r4, 80090d8 <_malloc_r+0x88>
 8009086:	4629      	mov	r1, r5
 8009088:	4630      	mov	r0, r6
 800908a:	f7ff ffbf 	bl	800900c <sbrk_aligned>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	4604      	mov	r4, r0
 8009092:	d158      	bne.n	8009146 <_malloc_r+0xf6>
 8009094:	f8d8 4000 	ldr.w	r4, [r8]
 8009098:	4627      	mov	r7, r4
 800909a:	2f00      	cmp	r7, #0
 800909c:	d143      	bne.n	8009126 <_malloc_r+0xd6>
 800909e:	2c00      	cmp	r4, #0
 80090a0:	d04b      	beq.n	800913a <_malloc_r+0xea>
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	4639      	mov	r1, r7
 80090a6:	4630      	mov	r0, r6
 80090a8:	eb04 0903 	add.w	r9, r4, r3
 80090ac:	f002 f950 	bl	800b350 <_sbrk_r>
 80090b0:	4581      	cmp	r9, r0
 80090b2:	d142      	bne.n	800913a <_malloc_r+0xea>
 80090b4:	6821      	ldr	r1, [r4, #0]
 80090b6:	1a6d      	subs	r5, r5, r1
 80090b8:	4629      	mov	r1, r5
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff ffa6 	bl	800900c <sbrk_aligned>
 80090c0:	3001      	adds	r0, #1
 80090c2:	d03a      	beq.n	800913a <_malloc_r+0xea>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	442b      	add	r3, r5
 80090c8:	6023      	str	r3, [r4, #0]
 80090ca:	f8d8 3000 	ldr.w	r3, [r8]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	bb62      	cbnz	r2, 800912c <_malloc_r+0xdc>
 80090d2:	f8c8 7000 	str.w	r7, [r8]
 80090d6:	e00f      	b.n	80090f8 <_malloc_r+0xa8>
 80090d8:	6822      	ldr	r2, [r4, #0]
 80090da:	1b52      	subs	r2, r2, r5
 80090dc:	d420      	bmi.n	8009120 <_malloc_r+0xd0>
 80090de:	2a0b      	cmp	r2, #11
 80090e0:	d917      	bls.n	8009112 <_malloc_r+0xc2>
 80090e2:	1961      	adds	r1, r4, r5
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	6025      	str	r5, [r4, #0]
 80090e8:	bf18      	it	ne
 80090ea:	6059      	strne	r1, [r3, #4]
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	bf08      	it	eq
 80090f0:	f8c8 1000 	streq.w	r1, [r8]
 80090f4:	5162      	str	r2, [r4, r5]
 80090f6:	604b      	str	r3, [r1, #4]
 80090f8:	4630      	mov	r0, r6
 80090fa:	f000 f82f 	bl	800915c <__malloc_unlock>
 80090fe:	f104 000b 	add.w	r0, r4, #11
 8009102:	1d23      	adds	r3, r4, #4
 8009104:	f020 0007 	bic.w	r0, r0, #7
 8009108:	1ac2      	subs	r2, r0, r3
 800910a:	bf1c      	itt	ne
 800910c:	1a1b      	subne	r3, r3, r0
 800910e:	50a3      	strne	r3, [r4, r2]
 8009110:	e7af      	b.n	8009072 <_malloc_r+0x22>
 8009112:	6862      	ldr	r2, [r4, #4]
 8009114:	42a3      	cmp	r3, r4
 8009116:	bf0c      	ite	eq
 8009118:	f8c8 2000 	streq.w	r2, [r8]
 800911c:	605a      	strne	r2, [r3, #4]
 800911e:	e7eb      	b.n	80090f8 <_malloc_r+0xa8>
 8009120:	4623      	mov	r3, r4
 8009122:	6864      	ldr	r4, [r4, #4]
 8009124:	e7ae      	b.n	8009084 <_malloc_r+0x34>
 8009126:	463c      	mov	r4, r7
 8009128:	687f      	ldr	r7, [r7, #4]
 800912a:	e7b6      	b.n	800909a <_malloc_r+0x4a>
 800912c:	461a      	mov	r2, r3
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	42a3      	cmp	r3, r4
 8009132:	d1fb      	bne.n	800912c <_malloc_r+0xdc>
 8009134:	2300      	movs	r3, #0
 8009136:	6053      	str	r3, [r2, #4]
 8009138:	e7de      	b.n	80090f8 <_malloc_r+0xa8>
 800913a:	230c      	movs	r3, #12
 800913c:	6033      	str	r3, [r6, #0]
 800913e:	4630      	mov	r0, r6
 8009140:	f000 f80c 	bl	800915c <__malloc_unlock>
 8009144:	e794      	b.n	8009070 <_malloc_r+0x20>
 8009146:	6005      	str	r5, [r0, #0]
 8009148:	e7d6      	b.n	80090f8 <_malloc_r+0xa8>
 800914a:	bf00      	nop
 800914c:	200006c8 	.word	0x200006c8

08009150 <__malloc_lock>:
 8009150:	4801      	ldr	r0, [pc, #4]	@ (8009158 <__malloc_lock+0x8>)
 8009152:	f7ff b8a6 	b.w	80082a2 <__retarget_lock_acquire_recursive>
 8009156:	bf00      	nop
 8009158:	200006c0 	.word	0x200006c0

0800915c <__malloc_unlock>:
 800915c:	4801      	ldr	r0, [pc, #4]	@ (8009164 <__malloc_unlock+0x8>)
 800915e:	f7ff b8a1 	b.w	80082a4 <__retarget_lock_release_recursive>
 8009162:	bf00      	nop
 8009164:	200006c0 	.word	0x200006c0

08009168 <_Balloc>:
 8009168:	b570      	push	{r4, r5, r6, lr}
 800916a:	69c6      	ldr	r6, [r0, #28]
 800916c:	4604      	mov	r4, r0
 800916e:	460d      	mov	r5, r1
 8009170:	b976      	cbnz	r6, 8009190 <_Balloc+0x28>
 8009172:	2010      	movs	r0, #16
 8009174:	f7ff ff42 	bl	8008ffc <malloc>
 8009178:	4602      	mov	r2, r0
 800917a:	61e0      	str	r0, [r4, #28]
 800917c:	b920      	cbnz	r0, 8009188 <_Balloc+0x20>
 800917e:	4b18      	ldr	r3, [pc, #96]	@ (80091e0 <_Balloc+0x78>)
 8009180:	4818      	ldr	r0, [pc, #96]	@ (80091e4 <_Balloc+0x7c>)
 8009182:	216b      	movs	r1, #107	@ 0x6b
 8009184:	f002 f8fc 	bl	800b380 <__assert_func>
 8009188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800918c:	6006      	str	r6, [r0, #0]
 800918e:	60c6      	str	r6, [r0, #12]
 8009190:	69e6      	ldr	r6, [r4, #28]
 8009192:	68f3      	ldr	r3, [r6, #12]
 8009194:	b183      	cbz	r3, 80091b8 <_Balloc+0x50>
 8009196:	69e3      	ldr	r3, [r4, #28]
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800919e:	b9b8      	cbnz	r0, 80091d0 <_Balloc+0x68>
 80091a0:	2101      	movs	r1, #1
 80091a2:	fa01 f605 	lsl.w	r6, r1, r5
 80091a6:	1d72      	adds	r2, r6, #5
 80091a8:	0092      	lsls	r2, r2, #2
 80091aa:	4620      	mov	r0, r4
 80091ac:	f002 f906 	bl	800b3bc <_calloc_r>
 80091b0:	b160      	cbz	r0, 80091cc <_Balloc+0x64>
 80091b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091b6:	e00e      	b.n	80091d6 <_Balloc+0x6e>
 80091b8:	2221      	movs	r2, #33	@ 0x21
 80091ba:	2104      	movs	r1, #4
 80091bc:	4620      	mov	r0, r4
 80091be:	f002 f8fd 	bl	800b3bc <_calloc_r>
 80091c2:	69e3      	ldr	r3, [r4, #28]
 80091c4:	60f0      	str	r0, [r6, #12]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e4      	bne.n	8009196 <_Balloc+0x2e>
 80091cc:	2000      	movs	r0, #0
 80091ce:	bd70      	pop	{r4, r5, r6, pc}
 80091d0:	6802      	ldr	r2, [r0, #0]
 80091d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091d6:	2300      	movs	r3, #0
 80091d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091dc:	e7f7      	b.n	80091ce <_Balloc+0x66>
 80091de:	bf00      	nop
 80091e0:	0800c74c 	.word	0x0800c74c
 80091e4:	0800c7cc 	.word	0x0800c7cc

080091e8 <_Bfree>:
 80091e8:	b570      	push	{r4, r5, r6, lr}
 80091ea:	69c6      	ldr	r6, [r0, #28]
 80091ec:	4605      	mov	r5, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	b976      	cbnz	r6, 8009210 <_Bfree+0x28>
 80091f2:	2010      	movs	r0, #16
 80091f4:	f7ff ff02 	bl	8008ffc <malloc>
 80091f8:	4602      	mov	r2, r0
 80091fa:	61e8      	str	r0, [r5, #28]
 80091fc:	b920      	cbnz	r0, 8009208 <_Bfree+0x20>
 80091fe:	4b09      	ldr	r3, [pc, #36]	@ (8009224 <_Bfree+0x3c>)
 8009200:	4809      	ldr	r0, [pc, #36]	@ (8009228 <_Bfree+0x40>)
 8009202:	218f      	movs	r1, #143	@ 0x8f
 8009204:	f002 f8bc 	bl	800b380 <__assert_func>
 8009208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800920c:	6006      	str	r6, [r0, #0]
 800920e:	60c6      	str	r6, [r0, #12]
 8009210:	b13c      	cbz	r4, 8009222 <_Bfree+0x3a>
 8009212:	69eb      	ldr	r3, [r5, #28]
 8009214:	6862      	ldr	r2, [r4, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800921c:	6021      	str	r1, [r4, #0]
 800921e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009222:	bd70      	pop	{r4, r5, r6, pc}
 8009224:	0800c74c 	.word	0x0800c74c
 8009228:	0800c7cc 	.word	0x0800c7cc

0800922c <__multadd>:
 800922c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009230:	690d      	ldr	r5, [r1, #16]
 8009232:	4607      	mov	r7, r0
 8009234:	460c      	mov	r4, r1
 8009236:	461e      	mov	r6, r3
 8009238:	f101 0c14 	add.w	ip, r1, #20
 800923c:	2000      	movs	r0, #0
 800923e:	f8dc 3000 	ldr.w	r3, [ip]
 8009242:	b299      	uxth	r1, r3
 8009244:	fb02 6101 	mla	r1, r2, r1, r6
 8009248:	0c1e      	lsrs	r6, r3, #16
 800924a:	0c0b      	lsrs	r3, r1, #16
 800924c:	fb02 3306 	mla	r3, r2, r6, r3
 8009250:	b289      	uxth	r1, r1
 8009252:	3001      	adds	r0, #1
 8009254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009258:	4285      	cmp	r5, r0
 800925a:	f84c 1b04 	str.w	r1, [ip], #4
 800925e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009262:	dcec      	bgt.n	800923e <__multadd+0x12>
 8009264:	b30e      	cbz	r6, 80092aa <__multadd+0x7e>
 8009266:	68a3      	ldr	r3, [r4, #8]
 8009268:	42ab      	cmp	r3, r5
 800926a:	dc19      	bgt.n	80092a0 <__multadd+0x74>
 800926c:	6861      	ldr	r1, [r4, #4]
 800926e:	4638      	mov	r0, r7
 8009270:	3101      	adds	r1, #1
 8009272:	f7ff ff79 	bl	8009168 <_Balloc>
 8009276:	4680      	mov	r8, r0
 8009278:	b928      	cbnz	r0, 8009286 <__multadd+0x5a>
 800927a:	4602      	mov	r2, r0
 800927c:	4b0c      	ldr	r3, [pc, #48]	@ (80092b0 <__multadd+0x84>)
 800927e:	480d      	ldr	r0, [pc, #52]	@ (80092b4 <__multadd+0x88>)
 8009280:	21ba      	movs	r1, #186	@ 0xba
 8009282:	f002 f87d 	bl	800b380 <__assert_func>
 8009286:	6922      	ldr	r2, [r4, #16]
 8009288:	3202      	adds	r2, #2
 800928a:	f104 010c 	add.w	r1, r4, #12
 800928e:	0092      	lsls	r2, r2, #2
 8009290:	300c      	adds	r0, #12
 8009292:	f7ff f808 	bl	80082a6 <memcpy>
 8009296:	4621      	mov	r1, r4
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff ffa5 	bl	80091e8 <_Bfree>
 800929e:	4644      	mov	r4, r8
 80092a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092a4:	3501      	adds	r5, #1
 80092a6:	615e      	str	r6, [r3, #20]
 80092a8:	6125      	str	r5, [r4, #16]
 80092aa:	4620      	mov	r0, r4
 80092ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b0:	0800c7bb 	.word	0x0800c7bb
 80092b4:	0800c7cc 	.word	0x0800c7cc

080092b8 <__s2b>:
 80092b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092bc:	460c      	mov	r4, r1
 80092be:	4615      	mov	r5, r2
 80092c0:	461f      	mov	r7, r3
 80092c2:	2209      	movs	r2, #9
 80092c4:	3308      	adds	r3, #8
 80092c6:	4606      	mov	r6, r0
 80092c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80092cc:	2100      	movs	r1, #0
 80092ce:	2201      	movs	r2, #1
 80092d0:	429a      	cmp	r2, r3
 80092d2:	db09      	blt.n	80092e8 <__s2b+0x30>
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff ff47 	bl	8009168 <_Balloc>
 80092da:	b940      	cbnz	r0, 80092ee <__s2b+0x36>
 80092dc:	4602      	mov	r2, r0
 80092de:	4b19      	ldr	r3, [pc, #100]	@ (8009344 <__s2b+0x8c>)
 80092e0:	4819      	ldr	r0, [pc, #100]	@ (8009348 <__s2b+0x90>)
 80092e2:	21d3      	movs	r1, #211	@ 0xd3
 80092e4:	f002 f84c 	bl	800b380 <__assert_func>
 80092e8:	0052      	lsls	r2, r2, #1
 80092ea:	3101      	adds	r1, #1
 80092ec:	e7f0      	b.n	80092d0 <__s2b+0x18>
 80092ee:	9b08      	ldr	r3, [sp, #32]
 80092f0:	6143      	str	r3, [r0, #20]
 80092f2:	2d09      	cmp	r5, #9
 80092f4:	f04f 0301 	mov.w	r3, #1
 80092f8:	6103      	str	r3, [r0, #16]
 80092fa:	dd16      	ble.n	800932a <__s2b+0x72>
 80092fc:	f104 0909 	add.w	r9, r4, #9
 8009300:	46c8      	mov	r8, r9
 8009302:	442c      	add	r4, r5
 8009304:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009308:	4601      	mov	r1, r0
 800930a:	3b30      	subs	r3, #48	@ 0x30
 800930c:	220a      	movs	r2, #10
 800930e:	4630      	mov	r0, r6
 8009310:	f7ff ff8c 	bl	800922c <__multadd>
 8009314:	45a0      	cmp	r8, r4
 8009316:	d1f5      	bne.n	8009304 <__s2b+0x4c>
 8009318:	f1a5 0408 	sub.w	r4, r5, #8
 800931c:	444c      	add	r4, r9
 800931e:	1b2d      	subs	r5, r5, r4
 8009320:	1963      	adds	r3, r4, r5
 8009322:	42bb      	cmp	r3, r7
 8009324:	db04      	blt.n	8009330 <__s2b+0x78>
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932a:	340a      	adds	r4, #10
 800932c:	2509      	movs	r5, #9
 800932e:	e7f6      	b.n	800931e <__s2b+0x66>
 8009330:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009334:	4601      	mov	r1, r0
 8009336:	3b30      	subs	r3, #48	@ 0x30
 8009338:	220a      	movs	r2, #10
 800933a:	4630      	mov	r0, r6
 800933c:	f7ff ff76 	bl	800922c <__multadd>
 8009340:	e7ee      	b.n	8009320 <__s2b+0x68>
 8009342:	bf00      	nop
 8009344:	0800c7bb 	.word	0x0800c7bb
 8009348:	0800c7cc 	.word	0x0800c7cc

0800934c <__hi0bits>:
 800934c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009350:	4603      	mov	r3, r0
 8009352:	bf36      	itet	cc
 8009354:	0403      	lslcc	r3, r0, #16
 8009356:	2000      	movcs	r0, #0
 8009358:	2010      	movcc	r0, #16
 800935a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800935e:	bf3c      	itt	cc
 8009360:	021b      	lslcc	r3, r3, #8
 8009362:	3008      	addcc	r0, #8
 8009364:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009368:	bf3c      	itt	cc
 800936a:	011b      	lslcc	r3, r3, #4
 800936c:	3004      	addcc	r0, #4
 800936e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009372:	bf3c      	itt	cc
 8009374:	009b      	lslcc	r3, r3, #2
 8009376:	3002      	addcc	r0, #2
 8009378:	2b00      	cmp	r3, #0
 800937a:	db05      	blt.n	8009388 <__hi0bits+0x3c>
 800937c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009380:	f100 0001 	add.w	r0, r0, #1
 8009384:	bf08      	it	eq
 8009386:	2020      	moveq	r0, #32
 8009388:	4770      	bx	lr

0800938a <__lo0bits>:
 800938a:	6803      	ldr	r3, [r0, #0]
 800938c:	4602      	mov	r2, r0
 800938e:	f013 0007 	ands.w	r0, r3, #7
 8009392:	d00b      	beq.n	80093ac <__lo0bits+0x22>
 8009394:	07d9      	lsls	r1, r3, #31
 8009396:	d421      	bmi.n	80093dc <__lo0bits+0x52>
 8009398:	0798      	lsls	r0, r3, #30
 800939a:	bf49      	itett	mi
 800939c:	085b      	lsrmi	r3, r3, #1
 800939e:	089b      	lsrpl	r3, r3, #2
 80093a0:	2001      	movmi	r0, #1
 80093a2:	6013      	strmi	r3, [r2, #0]
 80093a4:	bf5c      	itt	pl
 80093a6:	6013      	strpl	r3, [r2, #0]
 80093a8:	2002      	movpl	r0, #2
 80093aa:	4770      	bx	lr
 80093ac:	b299      	uxth	r1, r3
 80093ae:	b909      	cbnz	r1, 80093b4 <__lo0bits+0x2a>
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	2010      	movs	r0, #16
 80093b4:	b2d9      	uxtb	r1, r3
 80093b6:	b909      	cbnz	r1, 80093bc <__lo0bits+0x32>
 80093b8:	3008      	adds	r0, #8
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	0719      	lsls	r1, r3, #28
 80093be:	bf04      	itt	eq
 80093c0:	091b      	lsreq	r3, r3, #4
 80093c2:	3004      	addeq	r0, #4
 80093c4:	0799      	lsls	r1, r3, #30
 80093c6:	bf04      	itt	eq
 80093c8:	089b      	lsreq	r3, r3, #2
 80093ca:	3002      	addeq	r0, #2
 80093cc:	07d9      	lsls	r1, r3, #31
 80093ce:	d403      	bmi.n	80093d8 <__lo0bits+0x4e>
 80093d0:	085b      	lsrs	r3, r3, #1
 80093d2:	f100 0001 	add.w	r0, r0, #1
 80093d6:	d003      	beq.n	80093e0 <__lo0bits+0x56>
 80093d8:	6013      	str	r3, [r2, #0]
 80093da:	4770      	bx	lr
 80093dc:	2000      	movs	r0, #0
 80093de:	4770      	bx	lr
 80093e0:	2020      	movs	r0, #32
 80093e2:	4770      	bx	lr

080093e4 <__i2b>:
 80093e4:	b510      	push	{r4, lr}
 80093e6:	460c      	mov	r4, r1
 80093e8:	2101      	movs	r1, #1
 80093ea:	f7ff febd 	bl	8009168 <_Balloc>
 80093ee:	4602      	mov	r2, r0
 80093f0:	b928      	cbnz	r0, 80093fe <__i2b+0x1a>
 80093f2:	4b05      	ldr	r3, [pc, #20]	@ (8009408 <__i2b+0x24>)
 80093f4:	4805      	ldr	r0, [pc, #20]	@ (800940c <__i2b+0x28>)
 80093f6:	f240 1145 	movw	r1, #325	@ 0x145
 80093fa:	f001 ffc1 	bl	800b380 <__assert_func>
 80093fe:	2301      	movs	r3, #1
 8009400:	6144      	str	r4, [r0, #20]
 8009402:	6103      	str	r3, [r0, #16]
 8009404:	bd10      	pop	{r4, pc}
 8009406:	bf00      	nop
 8009408:	0800c7bb 	.word	0x0800c7bb
 800940c:	0800c7cc 	.word	0x0800c7cc

08009410 <__multiply>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	4614      	mov	r4, r2
 8009416:	690a      	ldr	r2, [r1, #16]
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	429a      	cmp	r2, r3
 800941c:	bfa8      	it	ge
 800941e:	4623      	movge	r3, r4
 8009420:	460f      	mov	r7, r1
 8009422:	bfa4      	itt	ge
 8009424:	460c      	movge	r4, r1
 8009426:	461f      	movge	r7, r3
 8009428:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800942c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009430:	68a3      	ldr	r3, [r4, #8]
 8009432:	6861      	ldr	r1, [r4, #4]
 8009434:	eb0a 0609 	add.w	r6, sl, r9
 8009438:	42b3      	cmp	r3, r6
 800943a:	b085      	sub	sp, #20
 800943c:	bfb8      	it	lt
 800943e:	3101      	addlt	r1, #1
 8009440:	f7ff fe92 	bl	8009168 <_Balloc>
 8009444:	b930      	cbnz	r0, 8009454 <__multiply+0x44>
 8009446:	4602      	mov	r2, r0
 8009448:	4b44      	ldr	r3, [pc, #272]	@ (800955c <__multiply+0x14c>)
 800944a:	4845      	ldr	r0, [pc, #276]	@ (8009560 <__multiply+0x150>)
 800944c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009450:	f001 ff96 	bl	800b380 <__assert_func>
 8009454:	f100 0514 	add.w	r5, r0, #20
 8009458:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800945c:	462b      	mov	r3, r5
 800945e:	2200      	movs	r2, #0
 8009460:	4543      	cmp	r3, r8
 8009462:	d321      	bcc.n	80094a8 <__multiply+0x98>
 8009464:	f107 0114 	add.w	r1, r7, #20
 8009468:	f104 0214 	add.w	r2, r4, #20
 800946c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009470:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009474:	9302      	str	r3, [sp, #8]
 8009476:	1b13      	subs	r3, r2, r4
 8009478:	3b15      	subs	r3, #21
 800947a:	f023 0303 	bic.w	r3, r3, #3
 800947e:	3304      	adds	r3, #4
 8009480:	f104 0715 	add.w	r7, r4, #21
 8009484:	42ba      	cmp	r2, r7
 8009486:	bf38      	it	cc
 8009488:	2304      	movcc	r3, #4
 800948a:	9301      	str	r3, [sp, #4]
 800948c:	9b02      	ldr	r3, [sp, #8]
 800948e:	9103      	str	r1, [sp, #12]
 8009490:	428b      	cmp	r3, r1
 8009492:	d80c      	bhi.n	80094ae <__multiply+0x9e>
 8009494:	2e00      	cmp	r6, #0
 8009496:	dd03      	ble.n	80094a0 <__multiply+0x90>
 8009498:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800949c:	2b00      	cmp	r3, #0
 800949e:	d05b      	beq.n	8009558 <__multiply+0x148>
 80094a0:	6106      	str	r6, [r0, #16]
 80094a2:	b005      	add	sp, #20
 80094a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a8:	f843 2b04 	str.w	r2, [r3], #4
 80094ac:	e7d8      	b.n	8009460 <__multiply+0x50>
 80094ae:	f8b1 a000 	ldrh.w	sl, [r1]
 80094b2:	f1ba 0f00 	cmp.w	sl, #0
 80094b6:	d024      	beq.n	8009502 <__multiply+0xf2>
 80094b8:	f104 0e14 	add.w	lr, r4, #20
 80094bc:	46a9      	mov	r9, r5
 80094be:	f04f 0c00 	mov.w	ip, #0
 80094c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80094c6:	f8d9 3000 	ldr.w	r3, [r9]
 80094ca:	fa1f fb87 	uxth.w	fp, r7
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80094d4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80094d8:	f8d9 7000 	ldr.w	r7, [r9]
 80094dc:	4463      	add	r3, ip
 80094de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80094e2:	fb0a c70b 	mla	r7, sl, fp, ip
 80094e6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80094f0:	4572      	cmp	r2, lr
 80094f2:	f849 3b04 	str.w	r3, [r9], #4
 80094f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80094fa:	d8e2      	bhi.n	80094c2 <__multiply+0xb2>
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	f845 c003 	str.w	ip, [r5, r3]
 8009502:	9b03      	ldr	r3, [sp, #12]
 8009504:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009508:	3104      	adds	r1, #4
 800950a:	f1b9 0f00 	cmp.w	r9, #0
 800950e:	d021      	beq.n	8009554 <__multiply+0x144>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	f104 0c14 	add.w	ip, r4, #20
 8009516:	46ae      	mov	lr, r5
 8009518:	f04f 0a00 	mov.w	sl, #0
 800951c:	f8bc b000 	ldrh.w	fp, [ip]
 8009520:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009524:	fb09 770b 	mla	r7, r9, fp, r7
 8009528:	4457      	add	r7, sl
 800952a:	b29b      	uxth	r3, r3
 800952c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009530:	f84e 3b04 	str.w	r3, [lr], #4
 8009534:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800953c:	f8be 3000 	ldrh.w	r3, [lr]
 8009540:	fb09 330a 	mla	r3, r9, sl, r3
 8009544:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009548:	4562      	cmp	r2, ip
 800954a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800954e:	d8e5      	bhi.n	800951c <__multiply+0x10c>
 8009550:	9f01      	ldr	r7, [sp, #4]
 8009552:	51eb      	str	r3, [r5, r7]
 8009554:	3504      	adds	r5, #4
 8009556:	e799      	b.n	800948c <__multiply+0x7c>
 8009558:	3e01      	subs	r6, #1
 800955a:	e79b      	b.n	8009494 <__multiply+0x84>
 800955c:	0800c7bb 	.word	0x0800c7bb
 8009560:	0800c7cc 	.word	0x0800c7cc

08009564 <__pow5mult>:
 8009564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009568:	4615      	mov	r5, r2
 800956a:	f012 0203 	ands.w	r2, r2, #3
 800956e:	4607      	mov	r7, r0
 8009570:	460e      	mov	r6, r1
 8009572:	d007      	beq.n	8009584 <__pow5mult+0x20>
 8009574:	4c25      	ldr	r4, [pc, #148]	@ (800960c <__pow5mult+0xa8>)
 8009576:	3a01      	subs	r2, #1
 8009578:	2300      	movs	r3, #0
 800957a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800957e:	f7ff fe55 	bl	800922c <__multadd>
 8009582:	4606      	mov	r6, r0
 8009584:	10ad      	asrs	r5, r5, #2
 8009586:	d03d      	beq.n	8009604 <__pow5mult+0xa0>
 8009588:	69fc      	ldr	r4, [r7, #28]
 800958a:	b97c      	cbnz	r4, 80095ac <__pow5mult+0x48>
 800958c:	2010      	movs	r0, #16
 800958e:	f7ff fd35 	bl	8008ffc <malloc>
 8009592:	4602      	mov	r2, r0
 8009594:	61f8      	str	r0, [r7, #28]
 8009596:	b928      	cbnz	r0, 80095a4 <__pow5mult+0x40>
 8009598:	4b1d      	ldr	r3, [pc, #116]	@ (8009610 <__pow5mult+0xac>)
 800959a:	481e      	ldr	r0, [pc, #120]	@ (8009614 <__pow5mult+0xb0>)
 800959c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095a0:	f001 feee 	bl	800b380 <__assert_func>
 80095a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095a8:	6004      	str	r4, [r0, #0]
 80095aa:	60c4      	str	r4, [r0, #12]
 80095ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80095b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095b4:	b94c      	cbnz	r4, 80095ca <__pow5mult+0x66>
 80095b6:	f240 2171 	movw	r1, #625	@ 0x271
 80095ba:	4638      	mov	r0, r7
 80095bc:	f7ff ff12 	bl	80093e4 <__i2b>
 80095c0:	2300      	movs	r3, #0
 80095c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80095c6:	4604      	mov	r4, r0
 80095c8:	6003      	str	r3, [r0, #0]
 80095ca:	f04f 0900 	mov.w	r9, #0
 80095ce:	07eb      	lsls	r3, r5, #31
 80095d0:	d50a      	bpl.n	80095e8 <__pow5mult+0x84>
 80095d2:	4631      	mov	r1, r6
 80095d4:	4622      	mov	r2, r4
 80095d6:	4638      	mov	r0, r7
 80095d8:	f7ff ff1a 	bl	8009410 <__multiply>
 80095dc:	4631      	mov	r1, r6
 80095de:	4680      	mov	r8, r0
 80095e0:	4638      	mov	r0, r7
 80095e2:	f7ff fe01 	bl	80091e8 <_Bfree>
 80095e6:	4646      	mov	r6, r8
 80095e8:	106d      	asrs	r5, r5, #1
 80095ea:	d00b      	beq.n	8009604 <__pow5mult+0xa0>
 80095ec:	6820      	ldr	r0, [r4, #0]
 80095ee:	b938      	cbnz	r0, 8009600 <__pow5mult+0x9c>
 80095f0:	4622      	mov	r2, r4
 80095f2:	4621      	mov	r1, r4
 80095f4:	4638      	mov	r0, r7
 80095f6:	f7ff ff0b 	bl	8009410 <__multiply>
 80095fa:	6020      	str	r0, [r4, #0]
 80095fc:	f8c0 9000 	str.w	r9, [r0]
 8009600:	4604      	mov	r4, r0
 8009602:	e7e4      	b.n	80095ce <__pow5mult+0x6a>
 8009604:	4630      	mov	r0, r6
 8009606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800960a:	bf00      	nop
 800960c:	0800c828 	.word	0x0800c828
 8009610:	0800c74c 	.word	0x0800c74c
 8009614:	0800c7cc 	.word	0x0800c7cc

08009618 <__lshift>:
 8009618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800961c:	460c      	mov	r4, r1
 800961e:	6849      	ldr	r1, [r1, #4]
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009626:	68a3      	ldr	r3, [r4, #8]
 8009628:	4607      	mov	r7, r0
 800962a:	4691      	mov	r9, r2
 800962c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009630:	f108 0601 	add.w	r6, r8, #1
 8009634:	42b3      	cmp	r3, r6
 8009636:	db0b      	blt.n	8009650 <__lshift+0x38>
 8009638:	4638      	mov	r0, r7
 800963a:	f7ff fd95 	bl	8009168 <_Balloc>
 800963e:	4605      	mov	r5, r0
 8009640:	b948      	cbnz	r0, 8009656 <__lshift+0x3e>
 8009642:	4602      	mov	r2, r0
 8009644:	4b28      	ldr	r3, [pc, #160]	@ (80096e8 <__lshift+0xd0>)
 8009646:	4829      	ldr	r0, [pc, #164]	@ (80096ec <__lshift+0xd4>)
 8009648:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800964c:	f001 fe98 	bl	800b380 <__assert_func>
 8009650:	3101      	adds	r1, #1
 8009652:	005b      	lsls	r3, r3, #1
 8009654:	e7ee      	b.n	8009634 <__lshift+0x1c>
 8009656:	2300      	movs	r3, #0
 8009658:	f100 0114 	add.w	r1, r0, #20
 800965c:	f100 0210 	add.w	r2, r0, #16
 8009660:	4618      	mov	r0, r3
 8009662:	4553      	cmp	r3, sl
 8009664:	db33      	blt.n	80096ce <__lshift+0xb6>
 8009666:	6920      	ldr	r0, [r4, #16]
 8009668:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800966c:	f104 0314 	add.w	r3, r4, #20
 8009670:	f019 091f 	ands.w	r9, r9, #31
 8009674:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009678:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800967c:	d02b      	beq.n	80096d6 <__lshift+0xbe>
 800967e:	f1c9 0e20 	rsb	lr, r9, #32
 8009682:	468a      	mov	sl, r1
 8009684:	2200      	movs	r2, #0
 8009686:	6818      	ldr	r0, [r3, #0]
 8009688:	fa00 f009 	lsl.w	r0, r0, r9
 800968c:	4310      	orrs	r0, r2
 800968e:	f84a 0b04 	str.w	r0, [sl], #4
 8009692:	f853 2b04 	ldr.w	r2, [r3], #4
 8009696:	459c      	cmp	ip, r3
 8009698:	fa22 f20e 	lsr.w	r2, r2, lr
 800969c:	d8f3      	bhi.n	8009686 <__lshift+0x6e>
 800969e:	ebac 0304 	sub.w	r3, ip, r4
 80096a2:	3b15      	subs	r3, #21
 80096a4:	f023 0303 	bic.w	r3, r3, #3
 80096a8:	3304      	adds	r3, #4
 80096aa:	f104 0015 	add.w	r0, r4, #21
 80096ae:	4584      	cmp	ip, r0
 80096b0:	bf38      	it	cc
 80096b2:	2304      	movcc	r3, #4
 80096b4:	50ca      	str	r2, [r1, r3]
 80096b6:	b10a      	cbz	r2, 80096bc <__lshift+0xa4>
 80096b8:	f108 0602 	add.w	r6, r8, #2
 80096bc:	3e01      	subs	r6, #1
 80096be:	4638      	mov	r0, r7
 80096c0:	612e      	str	r6, [r5, #16]
 80096c2:	4621      	mov	r1, r4
 80096c4:	f7ff fd90 	bl	80091e8 <_Bfree>
 80096c8:	4628      	mov	r0, r5
 80096ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80096d2:	3301      	adds	r3, #1
 80096d4:	e7c5      	b.n	8009662 <__lshift+0x4a>
 80096d6:	3904      	subs	r1, #4
 80096d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80096dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80096e0:	459c      	cmp	ip, r3
 80096e2:	d8f9      	bhi.n	80096d8 <__lshift+0xc0>
 80096e4:	e7ea      	b.n	80096bc <__lshift+0xa4>
 80096e6:	bf00      	nop
 80096e8:	0800c7bb 	.word	0x0800c7bb
 80096ec:	0800c7cc 	.word	0x0800c7cc

080096f0 <__mcmp>:
 80096f0:	690a      	ldr	r2, [r1, #16]
 80096f2:	4603      	mov	r3, r0
 80096f4:	6900      	ldr	r0, [r0, #16]
 80096f6:	1a80      	subs	r0, r0, r2
 80096f8:	b530      	push	{r4, r5, lr}
 80096fa:	d10e      	bne.n	800971a <__mcmp+0x2a>
 80096fc:	3314      	adds	r3, #20
 80096fe:	3114      	adds	r1, #20
 8009700:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009704:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800970c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009710:	4295      	cmp	r5, r2
 8009712:	d003      	beq.n	800971c <__mcmp+0x2c>
 8009714:	d205      	bcs.n	8009722 <__mcmp+0x32>
 8009716:	f04f 30ff 	mov.w	r0, #4294967295
 800971a:	bd30      	pop	{r4, r5, pc}
 800971c:	42a3      	cmp	r3, r4
 800971e:	d3f3      	bcc.n	8009708 <__mcmp+0x18>
 8009720:	e7fb      	b.n	800971a <__mcmp+0x2a>
 8009722:	2001      	movs	r0, #1
 8009724:	e7f9      	b.n	800971a <__mcmp+0x2a>
	...

08009728 <__mdiff>:
 8009728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	4689      	mov	r9, r1
 800972e:	4606      	mov	r6, r0
 8009730:	4611      	mov	r1, r2
 8009732:	4648      	mov	r0, r9
 8009734:	4614      	mov	r4, r2
 8009736:	f7ff ffdb 	bl	80096f0 <__mcmp>
 800973a:	1e05      	subs	r5, r0, #0
 800973c:	d112      	bne.n	8009764 <__mdiff+0x3c>
 800973e:	4629      	mov	r1, r5
 8009740:	4630      	mov	r0, r6
 8009742:	f7ff fd11 	bl	8009168 <_Balloc>
 8009746:	4602      	mov	r2, r0
 8009748:	b928      	cbnz	r0, 8009756 <__mdiff+0x2e>
 800974a:	4b3f      	ldr	r3, [pc, #252]	@ (8009848 <__mdiff+0x120>)
 800974c:	f240 2137 	movw	r1, #567	@ 0x237
 8009750:	483e      	ldr	r0, [pc, #248]	@ (800984c <__mdiff+0x124>)
 8009752:	f001 fe15 	bl	800b380 <__assert_func>
 8009756:	2301      	movs	r3, #1
 8009758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800975c:	4610      	mov	r0, r2
 800975e:	b003      	add	sp, #12
 8009760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009764:	bfbc      	itt	lt
 8009766:	464b      	movlt	r3, r9
 8009768:	46a1      	movlt	r9, r4
 800976a:	4630      	mov	r0, r6
 800976c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009770:	bfba      	itte	lt
 8009772:	461c      	movlt	r4, r3
 8009774:	2501      	movlt	r5, #1
 8009776:	2500      	movge	r5, #0
 8009778:	f7ff fcf6 	bl	8009168 <_Balloc>
 800977c:	4602      	mov	r2, r0
 800977e:	b918      	cbnz	r0, 8009788 <__mdiff+0x60>
 8009780:	4b31      	ldr	r3, [pc, #196]	@ (8009848 <__mdiff+0x120>)
 8009782:	f240 2145 	movw	r1, #581	@ 0x245
 8009786:	e7e3      	b.n	8009750 <__mdiff+0x28>
 8009788:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800978c:	6926      	ldr	r6, [r4, #16]
 800978e:	60c5      	str	r5, [r0, #12]
 8009790:	f109 0310 	add.w	r3, r9, #16
 8009794:	f109 0514 	add.w	r5, r9, #20
 8009798:	f104 0e14 	add.w	lr, r4, #20
 800979c:	f100 0b14 	add.w	fp, r0, #20
 80097a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097a8:	9301      	str	r3, [sp, #4]
 80097aa:	46d9      	mov	r9, fp
 80097ac:	f04f 0c00 	mov.w	ip, #0
 80097b0:	9b01      	ldr	r3, [sp, #4]
 80097b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80097b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	fa1f f38a 	uxth.w	r3, sl
 80097c0:	4619      	mov	r1, r3
 80097c2:	b283      	uxth	r3, r0
 80097c4:	1acb      	subs	r3, r1, r3
 80097c6:	0c00      	lsrs	r0, r0, #16
 80097c8:	4463      	add	r3, ip
 80097ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80097ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80097d8:	4576      	cmp	r6, lr
 80097da:	f849 3b04 	str.w	r3, [r9], #4
 80097de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097e2:	d8e5      	bhi.n	80097b0 <__mdiff+0x88>
 80097e4:	1b33      	subs	r3, r6, r4
 80097e6:	3b15      	subs	r3, #21
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	3415      	adds	r4, #21
 80097ee:	3304      	adds	r3, #4
 80097f0:	42a6      	cmp	r6, r4
 80097f2:	bf38      	it	cc
 80097f4:	2304      	movcc	r3, #4
 80097f6:	441d      	add	r5, r3
 80097f8:	445b      	add	r3, fp
 80097fa:	461e      	mov	r6, r3
 80097fc:	462c      	mov	r4, r5
 80097fe:	4544      	cmp	r4, r8
 8009800:	d30e      	bcc.n	8009820 <__mdiff+0xf8>
 8009802:	f108 0103 	add.w	r1, r8, #3
 8009806:	1b49      	subs	r1, r1, r5
 8009808:	f021 0103 	bic.w	r1, r1, #3
 800980c:	3d03      	subs	r5, #3
 800980e:	45a8      	cmp	r8, r5
 8009810:	bf38      	it	cc
 8009812:	2100      	movcc	r1, #0
 8009814:	440b      	add	r3, r1
 8009816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800981a:	b191      	cbz	r1, 8009842 <__mdiff+0x11a>
 800981c:	6117      	str	r7, [r2, #16]
 800981e:	e79d      	b.n	800975c <__mdiff+0x34>
 8009820:	f854 1b04 	ldr.w	r1, [r4], #4
 8009824:	46e6      	mov	lr, ip
 8009826:	0c08      	lsrs	r0, r1, #16
 8009828:	fa1c fc81 	uxtah	ip, ip, r1
 800982c:	4471      	add	r1, lr
 800982e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009832:	b289      	uxth	r1, r1
 8009834:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009838:	f846 1b04 	str.w	r1, [r6], #4
 800983c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009840:	e7dd      	b.n	80097fe <__mdiff+0xd6>
 8009842:	3f01      	subs	r7, #1
 8009844:	e7e7      	b.n	8009816 <__mdiff+0xee>
 8009846:	bf00      	nop
 8009848:	0800c7bb 	.word	0x0800c7bb
 800984c:	0800c7cc 	.word	0x0800c7cc

08009850 <__ulp>:
 8009850:	b082      	sub	sp, #8
 8009852:	ed8d 0b00 	vstr	d0, [sp]
 8009856:	9a01      	ldr	r2, [sp, #4]
 8009858:	4b0f      	ldr	r3, [pc, #60]	@ (8009898 <__ulp+0x48>)
 800985a:	4013      	ands	r3, r2
 800985c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009860:	2b00      	cmp	r3, #0
 8009862:	dc08      	bgt.n	8009876 <__ulp+0x26>
 8009864:	425b      	negs	r3, r3
 8009866:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800986a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800986e:	da04      	bge.n	800987a <__ulp+0x2a>
 8009870:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009874:	4113      	asrs	r3, r2
 8009876:	2200      	movs	r2, #0
 8009878:	e008      	b.n	800988c <__ulp+0x3c>
 800987a:	f1a2 0314 	sub.w	r3, r2, #20
 800987e:	2b1e      	cmp	r3, #30
 8009880:	bfda      	itte	le
 8009882:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009886:	40da      	lsrle	r2, r3
 8009888:	2201      	movgt	r2, #1
 800988a:	2300      	movs	r3, #0
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	ec41 0b10 	vmov	d0, r0, r1
 8009894:	b002      	add	sp, #8
 8009896:	4770      	bx	lr
 8009898:	7ff00000 	.word	0x7ff00000

0800989c <__b2d>:
 800989c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098a0:	6906      	ldr	r6, [r0, #16]
 80098a2:	f100 0814 	add.w	r8, r0, #20
 80098a6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80098aa:	1f37      	subs	r7, r6, #4
 80098ac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098b0:	4610      	mov	r0, r2
 80098b2:	f7ff fd4b 	bl	800934c <__hi0bits>
 80098b6:	f1c0 0320 	rsb	r3, r0, #32
 80098ba:	280a      	cmp	r0, #10
 80098bc:	600b      	str	r3, [r1, #0]
 80098be:	491b      	ldr	r1, [pc, #108]	@ (800992c <__b2d+0x90>)
 80098c0:	dc15      	bgt.n	80098ee <__b2d+0x52>
 80098c2:	f1c0 0c0b 	rsb	ip, r0, #11
 80098c6:	fa22 f30c 	lsr.w	r3, r2, ip
 80098ca:	45b8      	cmp	r8, r7
 80098cc:	ea43 0501 	orr.w	r5, r3, r1
 80098d0:	bf34      	ite	cc
 80098d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80098d6:	2300      	movcs	r3, #0
 80098d8:	3015      	adds	r0, #21
 80098da:	fa02 f000 	lsl.w	r0, r2, r0
 80098de:	fa23 f30c 	lsr.w	r3, r3, ip
 80098e2:	4303      	orrs	r3, r0
 80098e4:	461c      	mov	r4, r3
 80098e6:	ec45 4b10 	vmov	d0, r4, r5
 80098ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ee:	45b8      	cmp	r8, r7
 80098f0:	bf3a      	itte	cc
 80098f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80098f6:	f1a6 0708 	subcc.w	r7, r6, #8
 80098fa:	2300      	movcs	r3, #0
 80098fc:	380b      	subs	r0, #11
 80098fe:	d012      	beq.n	8009926 <__b2d+0x8a>
 8009900:	f1c0 0120 	rsb	r1, r0, #32
 8009904:	fa23 f401 	lsr.w	r4, r3, r1
 8009908:	4082      	lsls	r2, r0
 800990a:	4322      	orrs	r2, r4
 800990c:	4547      	cmp	r7, r8
 800990e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009912:	bf8c      	ite	hi
 8009914:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009918:	2200      	movls	r2, #0
 800991a:	4083      	lsls	r3, r0
 800991c:	40ca      	lsrs	r2, r1
 800991e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009922:	4313      	orrs	r3, r2
 8009924:	e7de      	b.n	80098e4 <__b2d+0x48>
 8009926:	ea42 0501 	orr.w	r5, r2, r1
 800992a:	e7db      	b.n	80098e4 <__b2d+0x48>
 800992c:	3ff00000 	.word	0x3ff00000

08009930 <__d2b>:
 8009930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009934:	460f      	mov	r7, r1
 8009936:	2101      	movs	r1, #1
 8009938:	ec59 8b10 	vmov	r8, r9, d0
 800993c:	4616      	mov	r6, r2
 800993e:	f7ff fc13 	bl	8009168 <_Balloc>
 8009942:	4604      	mov	r4, r0
 8009944:	b930      	cbnz	r0, 8009954 <__d2b+0x24>
 8009946:	4602      	mov	r2, r0
 8009948:	4b23      	ldr	r3, [pc, #140]	@ (80099d8 <__d2b+0xa8>)
 800994a:	4824      	ldr	r0, [pc, #144]	@ (80099dc <__d2b+0xac>)
 800994c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009950:	f001 fd16 	bl	800b380 <__assert_func>
 8009954:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800995c:	b10d      	cbz	r5, 8009962 <__d2b+0x32>
 800995e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	f1b8 0300 	subs.w	r3, r8, #0
 8009968:	d023      	beq.n	80099b2 <__d2b+0x82>
 800996a:	4668      	mov	r0, sp
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	f7ff fd0c 	bl	800938a <__lo0bits>
 8009972:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009976:	b1d0      	cbz	r0, 80099ae <__d2b+0x7e>
 8009978:	f1c0 0320 	rsb	r3, r0, #32
 800997c:	fa02 f303 	lsl.w	r3, r2, r3
 8009980:	430b      	orrs	r3, r1
 8009982:	40c2      	lsrs	r2, r0
 8009984:	6163      	str	r3, [r4, #20]
 8009986:	9201      	str	r2, [sp, #4]
 8009988:	9b01      	ldr	r3, [sp, #4]
 800998a:	61a3      	str	r3, [r4, #24]
 800998c:	2b00      	cmp	r3, #0
 800998e:	bf0c      	ite	eq
 8009990:	2201      	moveq	r2, #1
 8009992:	2202      	movne	r2, #2
 8009994:	6122      	str	r2, [r4, #16]
 8009996:	b1a5      	cbz	r5, 80099c2 <__d2b+0x92>
 8009998:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800999c:	4405      	add	r5, r0
 800999e:	603d      	str	r5, [r7, #0]
 80099a0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80099a4:	6030      	str	r0, [r6, #0]
 80099a6:	4620      	mov	r0, r4
 80099a8:	b003      	add	sp, #12
 80099aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ae:	6161      	str	r1, [r4, #20]
 80099b0:	e7ea      	b.n	8009988 <__d2b+0x58>
 80099b2:	a801      	add	r0, sp, #4
 80099b4:	f7ff fce9 	bl	800938a <__lo0bits>
 80099b8:	9b01      	ldr	r3, [sp, #4]
 80099ba:	6163      	str	r3, [r4, #20]
 80099bc:	3020      	adds	r0, #32
 80099be:	2201      	movs	r2, #1
 80099c0:	e7e8      	b.n	8009994 <__d2b+0x64>
 80099c2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099c6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80099ca:	6038      	str	r0, [r7, #0]
 80099cc:	6918      	ldr	r0, [r3, #16]
 80099ce:	f7ff fcbd 	bl	800934c <__hi0bits>
 80099d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099d6:	e7e5      	b.n	80099a4 <__d2b+0x74>
 80099d8:	0800c7bb 	.word	0x0800c7bb
 80099dc:	0800c7cc 	.word	0x0800c7cc

080099e0 <__ratio>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	b085      	sub	sp, #20
 80099e6:	e9cd 1000 	strd	r1, r0, [sp]
 80099ea:	a902      	add	r1, sp, #8
 80099ec:	f7ff ff56 	bl	800989c <__b2d>
 80099f0:	9800      	ldr	r0, [sp, #0]
 80099f2:	a903      	add	r1, sp, #12
 80099f4:	ec55 4b10 	vmov	r4, r5, d0
 80099f8:	f7ff ff50 	bl	800989c <__b2d>
 80099fc:	9b01      	ldr	r3, [sp, #4]
 80099fe:	6919      	ldr	r1, [r3, #16]
 8009a00:	9b00      	ldr	r3, [sp, #0]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	1ac9      	subs	r1, r1, r3
 8009a06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009a0a:	1a9b      	subs	r3, r3, r2
 8009a0c:	ec5b ab10 	vmov	sl, fp, d0
 8009a10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bfce      	itee	gt
 8009a18:	462a      	movgt	r2, r5
 8009a1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009a1e:	465a      	movle	r2, fp
 8009a20:	462f      	mov	r7, r5
 8009a22:	46d9      	mov	r9, fp
 8009a24:	bfcc      	ite	gt
 8009a26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009a2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009a2e:	464b      	mov	r3, r9
 8009a30:	4652      	mov	r2, sl
 8009a32:	4620      	mov	r0, r4
 8009a34:	4639      	mov	r1, r7
 8009a36:	f7f6 ff11 	bl	800085c <__aeabi_ddiv>
 8009a3a:	ec41 0b10 	vmov	d0, r0, r1
 8009a3e:	b005      	add	sp, #20
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009a44 <__copybits>:
 8009a44:	3901      	subs	r1, #1
 8009a46:	b570      	push	{r4, r5, r6, lr}
 8009a48:	1149      	asrs	r1, r1, #5
 8009a4a:	6914      	ldr	r4, [r2, #16]
 8009a4c:	3101      	adds	r1, #1
 8009a4e:	f102 0314 	add.w	r3, r2, #20
 8009a52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009a56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009a5a:	1f05      	subs	r5, r0, #4
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	d30c      	bcc.n	8009a7a <__copybits+0x36>
 8009a60:	1aa3      	subs	r3, r4, r2
 8009a62:	3b11      	subs	r3, #17
 8009a64:	f023 0303 	bic.w	r3, r3, #3
 8009a68:	3211      	adds	r2, #17
 8009a6a:	42a2      	cmp	r2, r4
 8009a6c:	bf88      	it	hi
 8009a6e:	2300      	movhi	r3, #0
 8009a70:	4418      	add	r0, r3
 8009a72:	2300      	movs	r3, #0
 8009a74:	4288      	cmp	r0, r1
 8009a76:	d305      	bcc.n	8009a84 <__copybits+0x40>
 8009a78:	bd70      	pop	{r4, r5, r6, pc}
 8009a7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8009a7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009a82:	e7eb      	b.n	8009a5c <__copybits+0x18>
 8009a84:	f840 3b04 	str.w	r3, [r0], #4
 8009a88:	e7f4      	b.n	8009a74 <__copybits+0x30>

08009a8a <__any_on>:
 8009a8a:	f100 0214 	add.w	r2, r0, #20
 8009a8e:	6900      	ldr	r0, [r0, #16]
 8009a90:	114b      	asrs	r3, r1, #5
 8009a92:	4298      	cmp	r0, r3
 8009a94:	b510      	push	{r4, lr}
 8009a96:	db11      	blt.n	8009abc <__any_on+0x32>
 8009a98:	dd0a      	ble.n	8009ab0 <__any_on+0x26>
 8009a9a:	f011 011f 	ands.w	r1, r1, #31
 8009a9e:	d007      	beq.n	8009ab0 <__any_on+0x26>
 8009aa0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009aa4:	fa24 f001 	lsr.w	r0, r4, r1
 8009aa8:	fa00 f101 	lsl.w	r1, r0, r1
 8009aac:	428c      	cmp	r4, r1
 8009aae:	d10b      	bne.n	8009ac8 <__any_on+0x3e>
 8009ab0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d803      	bhi.n	8009ac0 <__any_on+0x36>
 8009ab8:	2000      	movs	r0, #0
 8009aba:	bd10      	pop	{r4, pc}
 8009abc:	4603      	mov	r3, r0
 8009abe:	e7f7      	b.n	8009ab0 <__any_on+0x26>
 8009ac0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	d0f5      	beq.n	8009ab4 <__any_on+0x2a>
 8009ac8:	2001      	movs	r0, #1
 8009aca:	e7f6      	b.n	8009aba <__any_on+0x30>

08009acc <sulp>:
 8009acc:	b570      	push	{r4, r5, r6, lr}
 8009ace:	4604      	mov	r4, r0
 8009ad0:	460d      	mov	r5, r1
 8009ad2:	ec45 4b10 	vmov	d0, r4, r5
 8009ad6:	4616      	mov	r6, r2
 8009ad8:	f7ff feba 	bl	8009850 <__ulp>
 8009adc:	ec51 0b10 	vmov	r0, r1, d0
 8009ae0:	b17e      	cbz	r6, 8009b02 <sulp+0x36>
 8009ae2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009ae6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	dd09      	ble.n	8009b02 <sulp+0x36>
 8009aee:	051b      	lsls	r3, r3, #20
 8009af0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009af4:	2400      	movs	r4, #0
 8009af6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009afa:	4622      	mov	r2, r4
 8009afc:	462b      	mov	r3, r5
 8009afe:	f7f6 fd83 	bl	8000608 <__aeabi_dmul>
 8009b02:	ec41 0b10 	vmov	d0, r0, r1
 8009b06:	bd70      	pop	{r4, r5, r6, pc}

08009b08 <_strtod_l>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	b09f      	sub	sp, #124	@ 0x7c
 8009b0e:	460c      	mov	r4, r1
 8009b10:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009b12:	2200      	movs	r2, #0
 8009b14:	921a      	str	r2, [sp, #104]	@ 0x68
 8009b16:	9005      	str	r0, [sp, #20]
 8009b18:	f04f 0a00 	mov.w	sl, #0
 8009b1c:	f04f 0b00 	mov.w	fp, #0
 8009b20:	460a      	mov	r2, r1
 8009b22:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b24:	7811      	ldrb	r1, [r2, #0]
 8009b26:	292b      	cmp	r1, #43	@ 0x2b
 8009b28:	d04a      	beq.n	8009bc0 <_strtod_l+0xb8>
 8009b2a:	d838      	bhi.n	8009b9e <_strtod_l+0x96>
 8009b2c:	290d      	cmp	r1, #13
 8009b2e:	d832      	bhi.n	8009b96 <_strtod_l+0x8e>
 8009b30:	2908      	cmp	r1, #8
 8009b32:	d832      	bhi.n	8009b9a <_strtod_l+0x92>
 8009b34:	2900      	cmp	r1, #0
 8009b36:	d03b      	beq.n	8009bb0 <_strtod_l+0xa8>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009b3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009b3e:	782a      	ldrb	r2, [r5, #0]
 8009b40:	2a30      	cmp	r2, #48	@ 0x30
 8009b42:	f040 80b3 	bne.w	8009cac <_strtod_l+0x1a4>
 8009b46:	786a      	ldrb	r2, [r5, #1]
 8009b48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009b4c:	2a58      	cmp	r2, #88	@ 0x58
 8009b4e:	d16e      	bne.n	8009c2e <_strtod_l+0x126>
 8009b50:	9302      	str	r3, [sp, #8]
 8009b52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	ab1a      	add	r3, sp, #104	@ 0x68
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	4a8e      	ldr	r2, [pc, #568]	@ (8009d94 <_strtod_l+0x28c>)
 8009b5c:	9805      	ldr	r0, [sp, #20]
 8009b5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009b60:	a919      	add	r1, sp, #100	@ 0x64
 8009b62:	f001 fca7 	bl	800b4b4 <__gethex>
 8009b66:	f010 060f 	ands.w	r6, r0, #15
 8009b6a:	4604      	mov	r4, r0
 8009b6c:	d005      	beq.n	8009b7a <_strtod_l+0x72>
 8009b6e:	2e06      	cmp	r6, #6
 8009b70:	d128      	bne.n	8009bc4 <_strtod_l+0xbc>
 8009b72:	3501      	adds	r5, #1
 8009b74:	2300      	movs	r3, #0
 8009b76:	9519      	str	r5, [sp, #100]	@ 0x64
 8009b78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f040 858e 	bne.w	800a69e <_strtod_l+0xb96>
 8009b82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b84:	b1cb      	cbz	r3, 8009bba <_strtod_l+0xb2>
 8009b86:	4652      	mov	r2, sl
 8009b88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009b8c:	ec43 2b10 	vmov	d0, r2, r3
 8009b90:	b01f      	add	sp, #124	@ 0x7c
 8009b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	2920      	cmp	r1, #32
 8009b98:	d1ce      	bne.n	8009b38 <_strtod_l+0x30>
 8009b9a:	3201      	adds	r2, #1
 8009b9c:	e7c1      	b.n	8009b22 <_strtod_l+0x1a>
 8009b9e:	292d      	cmp	r1, #45	@ 0x2d
 8009ba0:	d1ca      	bne.n	8009b38 <_strtod_l+0x30>
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009ba6:	1c51      	adds	r1, r2, #1
 8009ba8:	9119      	str	r1, [sp, #100]	@ 0x64
 8009baa:	7852      	ldrb	r2, [r2, #1]
 8009bac:	2a00      	cmp	r2, #0
 8009bae:	d1c5      	bne.n	8009b3c <_strtod_l+0x34>
 8009bb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009bb2:	9419      	str	r4, [sp, #100]	@ 0x64
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f040 8570 	bne.w	800a69a <_strtod_l+0xb92>
 8009bba:	4652      	mov	r2, sl
 8009bbc:	465b      	mov	r3, fp
 8009bbe:	e7e5      	b.n	8009b8c <_strtod_l+0x84>
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	e7ef      	b.n	8009ba4 <_strtod_l+0x9c>
 8009bc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009bc6:	b13a      	cbz	r2, 8009bd8 <_strtod_l+0xd0>
 8009bc8:	2135      	movs	r1, #53	@ 0x35
 8009bca:	a81c      	add	r0, sp, #112	@ 0x70
 8009bcc:	f7ff ff3a 	bl	8009a44 <__copybits>
 8009bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009bd2:	9805      	ldr	r0, [sp, #20]
 8009bd4:	f7ff fb08 	bl	80091e8 <_Bfree>
 8009bd8:	3e01      	subs	r6, #1
 8009bda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009bdc:	2e04      	cmp	r6, #4
 8009bde:	d806      	bhi.n	8009bee <_strtod_l+0xe6>
 8009be0:	e8df f006 	tbb	[pc, r6]
 8009be4:	201d0314 	.word	0x201d0314
 8009be8:	14          	.byte	0x14
 8009be9:	00          	.byte	0x00
 8009bea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009bee:	05e1      	lsls	r1, r4, #23
 8009bf0:	bf48      	it	mi
 8009bf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009bf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bfa:	0d1b      	lsrs	r3, r3, #20
 8009bfc:	051b      	lsls	r3, r3, #20
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1bb      	bne.n	8009b7a <_strtod_l+0x72>
 8009c02:	f7fe fb23 	bl	800824c <__errno>
 8009c06:	2322      	movs	r3, #34	@ 0x22
 8009c08:	6003      	str	r3, [r0, #0]
 8009c0a:	e7b6      	b.n	8009b7a <_strtod_l+0x72>
 8009c0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009c10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009c14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009c18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009c1c:	e7e7      	b.n	8009bee <_strtod_l+0xe6>
 8009c1e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009d9c <_strtod_l+0x294>
 8009c22:	e7e4      	b.n	8009bee <_strtod_l+0xe6>
 8009c24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009c28:	f04f 3aff 	mov.w	sl, #4294967295
 8009c2c:	e7df      	b.n	8009bee <_strtod_l+0xe6>
 8009c2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c34:	785b      	ldrb	r3, [r3, #1]
 8009c36:	2b30      	cmp	r3, #48	@ 0x30
 8009c38:	d0f9      	beq.n	8009c2e <_strtod_l+0x126>
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d09d      	beq.n	8009b7a <_strtod_l+0x72>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009c44:	930c      	str	r3, [sp, #48]	@ 0x30
 8009c46:	2300      	movs	r3, #0
 8009c48:	9308      	str	r3, [sp, #32]
 8009c4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c4c:	461f      	mov	r7, r3
 8009c4e:	220a      	movs	r2, #10
 8009c50:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009c52:	7805      	ldrb	r5, [r0, #0]
 8009c54:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009c58:	b2d9      	uxtb	r1, r3
 8009c5a:	2909      	cmp	r1, #9
 8009c5c:	d928      	bls.n	8009cb0 <_strtod_l+0x1a8>
 8009c5e:	494e      	ldr	r1, [pc, #312]	@ (8009d98 <_strtod_l+0x290>)
 8009c60:	2201      	movs	r2, #1
 8009c62:	f001 fb62 	bl	800b32a <strncmp>
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d032      	beq.n	8009cd0 <_strtod_l+0x1c8>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	462a      	mov	r2, r5
 8009c6e:	4681      	mov	r9, r0
 8009c70:	463d      	mov	r5, r7
 8009c72:	4603      	mov	r3, r0
 8009c74:	2a65      	cmp	r2, #101	@ 0x65
 8009c76:	d001      	beq.n	8009c7c <_strtod_l+0x174>
 8009c78:	2a45      	cmp	r2, #69	@ 0x45
 8009c7a:	d114      	bne.n	8009ca6 <_strtod_l+0x19e>
 8009c7c:	b91d      	cbnz	r5, 8009c86 <_strtod_l+0x17e>
 8009c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c80:	4302      	orrs	r2, r0
 8009c82:	d095      	beq.n	8009bb0 <_strtod_l+0xa8>
 8009c84:	2500      	movs	r5, #0
 8009c86:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009c88:	1c62      	adds	r2, r4, #1
 8009c8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c8c:	7862      	ldrb	r2, [r4, #1]
 8009c8e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009c90:	d077      	beq.n	8009d82 <_strtod_l+0x27a>
 8009c92:	2a2d      	cmp	r2, #45	@ 0x2d
 8009c94:	d07b      	beq.n	8009d8e <_strtod_l+0x286>
 8009c96:	f04f 0c00 	mov.w	ip, #0
 8009c9a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009c9e:	2909      	cmp	r1, #9
 8009ca0:	f240 8082 	bls.w	8009da8 <_strtod_l+0x2a0>
 8009ca4:	9419      	str	r4, [sp, #100]	@ 0x64
 8009ca6:	f04f 0800 	mov.w	r8, #0
 8009caa:	e0a2      	b.n	8009df2 <_strtod_l+0x2ea>
 8009cac:	2300      	movs	r3, #0
 8009cae:	e7c7      	b.n	8009c40 <_strtod_l+0x138>
 8009cb0:	2f08      	cmp	r7, #8
 8009cb2:	bfd5      	itete	le
 8009cb4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009cb6:	9908      	ldrgt	r1, [sp, #32]
 8009cb8:	fb02 3301 	mlale	r3, r2, r1, r3
 8009cbc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009cc0:	f100 0001 	add.w	r0, r0, #1
 8009cc4:	bfd4      	ite	le
 8009cc6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009cc8:	9308      	strgt	r3, [sp, #32]
 8009cca:	3701      	adds	r7, #1
 8009ccc:	9019      	str	r0, [sp, #100]	@ 0x64
 8009cce:	e7bf      	b.n	8009c50 <_strtod_l+0x148>
 8009cd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cd6:	785a      	ldrb	r2, [r3, #1]
 8009cd8:	b37f      	cbz	r7, 8009d3a <_strtod_l+0x232>
 8009cda:	4681      	mov	r9, r0
 8009cdc:	463d      	mov	r5, r7
 8009cde:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009ce2:	2b09      	cmp	r3, #9
 8009ce4:	d912      	bls.n	8009d0c <_strtod_l+0x204>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e7c4      	b.n	8009c74 <_strtod_l+0x16c>
 8009cea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cec:	1c5a      	adds	r2, r3, #1
 8009cee:	9219      	str	r2, [sp, #100]	@ 0x64
 8009cf0:	785a      	ldrb	r2, [r3, #1]
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	2a30      	cmp	r2, #48	@ 0x30
 8009cf6:	d0f8      	beq.n	8009cea <_strtod_l+0x1e2>
 8009cf8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	f200 84d3 	bhi.w	800a6a8 <_strtod_l+0xba0>
 8009d02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d04:	930c      	str	r3, [sp, #48]	@ 0x30
 8009d06:	4681      	mov	r9, r0
 8009d08:	2000      	movs	r0, #0
 8009d0a:	4605      	mov	r5, r0
 8009d0c:	3a30      	subs	r2, #48	@ 0x30
 8009d0e:	f100 0301 	add.w	r3, r0, #1
 8009d12:	d02a      	beq.n	8009d6a <_strtod_l+0x262>
 8009d14:	4499      	add	r9, r3
 8009d16:	eb00 0c05 	add.w	ip, r0, r5
 8009d1a:	462b      	mov	r3, r5
 8009d1c:	210a      	movs	r1, #10
 8009d1e:	4563      	cmp	r3, ip
 8009d20:	d10d      	bne.n	8009d3e <_strtod_l+0x236>
 8009d22:	1c69      	adds	r1, r5, #1
 8009d24:	4401      	add	r1, r0
 8009d26:	4428      	add	r0, r5
 8009d28:	2808      	cmp	r0, #8
 8009d2a:	dc16      	bgt.n	8009d5a <_strtod_l+0x252>
 8009d2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009d2e:	230a      	movs	r3, #10
 8009d30:	fb03 2300 	mla	r3, r3, r0, r2
 8009d34:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d36:	2300      	movs	r3, #0
 8009d38:	e018      	b.n	8009d6c <_strtod_l+0x264>
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	e7da      	b.n	8009cf4 <_strtod_l+0x1ec>
 8009d3e:	2b08      	cmp	r3, #8
 8009d40:	f103 0301 	add.w	r3, r3, #1
 8009d44:	dc03      	bgt.n	8009d4e <_strtod_l+0x246>
 8009d46:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009d48:	434e      	muls	r6, r1
 8009d4a:	960a      	str	r6, [sp, #40]	@ 0x28
 8009d4c:	e7e7      	b.n	8009d1e <_strtod_l+0x216>
 8009d4e:	2b10      	cmp	r3, #16
 8009d50:	bfde      	ittt	le
 8009d52:	9e08      	ldrle	r6, [sp, #32]
 8009d54:	434e      	mulle	r6, r1
 8009d56:	9608      	strle	r6, [sp, #32]
 8009d58:	e7e1      	b.n	8009d1e <_strtod_l+0x216>
 8009d5a:	280f      	cmp	r0, #15
 8009d5c:	dceb      	bgt.n	8009d36 <_strtod_l+0x22e>
 8009d5e:	9808      	ldr	r0, [sp, #32]
 8009d60:	230a      	movs	r3, #10
 8009d62:	fb03 2300 	mla	r3, r3, r0, r2
 8009d66:	9308      	str	r3, [sp, #32]
 8009d68:	e7e5      	b.n	8009d36 <_strtod_l+0x22e>
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009d6e:	1c50      	adds	r0, r2, #1
 8009d70:	9019      	str	r0, [sp, #100]	@ 0x64
 8009d72:	7852      	ldrb	r2, [r2, #1]
 8009d74:	4618      	mov	r0, r3
 8009d76:	460d      	mov	r5, r1
 8009d78:	e7b1      	b.n	8009cde <_strtod_l+0x1d6>
 8009d7a:	f04f 0900 	mov.w	r9, #0
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e77d      	b.n	8009c7e <_strtod_l+0x176>
 8009d82:	f04f 0c00 	mov.w	ip, #0
 8009d86:	1ca2      	adds	r2, r4, #2
 8009d88:	9219      	str	r2, [sp, #100]	@ 0x64
 8009d8a:	78a2      	ldrb	r2, [r4, #2]
 8009d8c:	e785      	b.n	8009c9a <_strtod_l+0x192>
 8009d8e:	f04f 0c01 	mov.w	ip, #1
 8009d92:	e7f8      	b.n	8009d86 <_strtod_l+0x27e>
 8009d94:	0800c940 	.word	0x0800c940
 8009d98:	0800c928 	.word	0x0800c928
 8009d9c:	7ff00000 	.word	0x7ff00000
 8009da0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009da2:	1c51      	adds	r1, r2, #1
 8009da4:	9119      	str	r1, [sp, #100]	@ 0x64
 8009da6:	7852      	ldrb	r2, [r2, #1]
 8009da8:	2a30      	cmp	r2, #48	@ 0x30
 8009daa:	d0f9      	beq.n	8009da0 <_strtod_l+0x298>
 8009dac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009db0:	2908      	cmp	r1, #8
 8009db2:	f63f af78 	bhi.w	8009ca6 <_strtod_l+0x19e>
 8009db6:	3a30      	subs	r2, #48	@ 0x30
 8009db8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009dba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009dbc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009dbe:	f04f 080a 	mov.w	r8, #10
 8009dc2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009dc4:	1c56      	adds	r6, r2, #1
 8009dc6:	9619      	str	r6, [sp, #100]	@ 0x64
 8009dc8:	7852      	ldrb	r2, [r2, #1]
 8009dca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009dce:	f1be 0f09 	cmp.w	lr, #9
 8009dd2:	d939      	bls.n	8009e48 <_strtod_l+0x340>
 8009dd4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009dd6:	1a76      	subs	r6, r6, r1
 8009dd8:	2e08      	cmp	r6, #8
 8009dda:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009dde:	dc03      	bgt.n	8009de8 <_strtod_l+0x2e0>
 8009de0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009de2:	4588      	cmp	r8, r1
 8009de4:	bfa8      	it	ge
 8009de6:	4688      	movge	r8, r1
 8009de8:	f1bc 0f00 	cmp.w	ip, #0
 8009dec:	d001      	beq.n	8009df2 <_strtod_l+0x2ea>
 8009dee:	f1c8 0800 	rsb	r8, r8, #0
 8009df2:	2d00      	cmp	r5, #0
 8009df4:	d14e      	bne.n	8009e94 <_strtod_l+0x38c>
 8009df6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009df8:	4308      	orrs	r0, r1
 8009dfa:	f47f aebe 	bne.w	8009b7a <_strtod_l+0x72>
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f47f aed6 	bne.w	8009bb0 <_strtod_l+0xa8>
 8009e04:	2a69      	cmp	r2, #105	@ 0x69
 8009e06:	d028      	beq.n	8009e5a <_strtod_l+0x352>
 8009e08:	dc25      	bgt.n	8009e56 <_strtod_l+0x34e>
 8009e0a:	2a49      	cmp	r2, #73	@ 0x49
 8009e0c:	d025      	beq.n	8009e5a <_strtod_l+0x352>
 8009e0e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009e10:	f47f aece 	bne.w	8009bb0 <_strtod_l+0xa8>
 8009e14:	499b      	ldr	r1, [pc, #620]	@ (800a084 <_strtod_l+0x57c>)
 8009e16:	a819      	add	r0, sp, #100	@ 0x64
 8009e18:	f001 fd6e 	bl	800b8f8 <__match>
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	f43f aec7 	beq.w	8009bb0 <_strtod_l+0xa8>
 8009e22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b28      	cmp	r3, #40	@ 0x28
 8009e28:	d12e      	bne.n	8009e88 <_strtod_l+0x380>
 8009e2a:	4997      	ldr	r1, [pc, #604]	@ (800a088 <_strtod_l+0x580>)
 8009e2c:	aa1c      	add	r2, sp, #112	@ 0x70
 8009e2e:	a819      	add	r0, sp, #100	@ 0x64
 8009e30:	f001 fd76 	bl	800b920 <__hexnan>
 8009e34:	2805      	cmp	r0, #5
 8009e36:	d127      	bne.n	8009e88 <_strtod_l+0x380>
 8009e38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009e3a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009e3e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009e42:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009e46:	e698      	b.n	8009b7a <_strtod_l+0x72>
 8009e48:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009e4a:	fb08 2101 	mla	r1, r8, r1, r2
 8009e4e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009e52:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e54:	e7b5      	b.n	8009dc2 <_strtod_l+0x2ba>
 8009e56:	2a6e      	cmp	r2, #110	@ 0x6e
 8009e58:	e7da      	b.n	8009e10 <_strtod_l+0x308>
 8009e5a:	498c      	ldr	r1, [pc, #560]	@ (800a08c <_strtod_l+0x584>)
 8009e5c:	a819      	add	r0, sp, #100	@ 0x64
 8009e5e:	f001 fd4b 	bl	800b8f8 <__match>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f43f aea4 	beq.w	8009bb0 <_strtod_l+0xa8>
 8009e68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e6a:	4989      	ldr	r1, [pc, #548]	@ (800a090 <_strtod_l+0x588>)
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	a819      	add	r0, sp, #100	@ 0x64
 8009e70:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e72:	f001 fd41 	bl	800b8f8 <__match>
 8009e76:	b910      	cbnz	r0, 8009e7e <_strtod_l+0x376>
 8009e78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e7e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a0a0 <_strtod_l+0x598>
 8009e82:	f04f 0a00 	mov.w	sl, #0
 8009e86:	e678      	b.n	8009b7a <_strtod_l+0x72>
 8009e88:	4882      	ldr	r0, [pc, #520]	@ (800a094 <_strtod_l+0x58c>)
 8009e8a:	f001 fa71 	bl	800b370 <nan>
 8009e8e:	ec5b ab10 	vmov	sl, fp, d0
 8009e92:	e672      	b.n	8009b7a <_strtod_l+0x72>
 8009e94:	eba8 0309 	sub.w	r3, r8, r9
 8009e98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009e9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e9c:	2f00      	cmp	r7, #0
 8009e9e:	bf08      	it	eq
 8009ea0:	462f      	moveq	r7, r5
 8009ea2:	2d10      	cmp	r5, #16
 8009ea4:	462c      	mov	r4, r5
 8009ea6:	bfa8      	it	ge
 8009ea8:	2410      	movge	r4, #16
 8009eaa:	f7f6 fb33 	bl	8000514 <__aeabi_ui2d>
 8009eae:	2d09      	cmp	r5, #9
 8009eb0:	4682      	mov	sl, r0
 8009eb2:	468b      	mov	fp, r1
 8009eb4:	dc13      	bgt.n	8009ede <_strtod_l+0x3d6>
 8009eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	f43f ae5e 	beq.w	8009b7a <_strtod_l+0x72>
 8009ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ec0:	dd78      	ble.n	8009fb4 <_strtod_l+0x4ac>
 8009ec2:	2b16      	cmp	r3, #22
 8009ec4:	dc5f      	bgt.n	8009f86 <_strtod_l+0x47e>
 8009ec6:	4974      	ldr	r1, [pc, #464]	@ (800a098 <_strtod_l+0x590>)
 8009ec8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009ecc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ed0:	4652      	mov	r2, sl
 8009ed2:	465b      	mov	r3, fp
 8009ed4:	f7f6 fb98 	bl	8000608 <__aeabi_dmul>
 8009ed8:	4682      	mov	sl, r0
 8009eda:	468b      	mov	fp, r1
 8009edc:	e64d      	b.n	8009b7a <_strtod_l+0x72>
 8009ede:	4b6e      	ldr	r3, [pc, #440]	@ (800a098 <_strtod_l+0x590>)
 8009ee0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ee4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009ee8:	f7f6 fb8e 	bl	8000608 <__aeabi_dmul>
 8009eec:	4682      	mov	sl, r0
 8009eee:	9808      	ldr	r0, [sp, #32]
 8009ef0:	468b      	mov	fp, r1
 8009ef2:	f7f6 fb0f 	bl	8000514 <__aeabi_ui2d>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4650      	mov	r0, sl
 8009efc:	4659      	mov	r1, fp
 8009efe:	f7f6 f9cd 	bl	800029c <__adddf3>
 8009f02:	2d0f      	cmp	r5, #15
 8009f04:	4682      	mov	sl, r0
 8009f06:	468b      	mov	fp, r1
 8009f08:	ddd5      	ble.n	8009eb6 <_strtod_l+0x3ae>
 8009f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f0c:	1b2c      	subs	r4, r5, r4
 8009f0e:	441c      	add	r4, r3
 8009f10:	2c00      	cmp	r4, #0
 8009f12:	f340 8096 	ble.w	800a042 <_strtod_l+0x53a>
 8009f16:	f014 030f 	ands.w	r3, r4, #15
 8009f1a:	d00a      	beq.n	8009f32 <_strtod_l+0x42a>
 8009f1c:	495e      	ldr	r1, [pc, #376]	@ (800a098 <_strtod_l+0x590>)
 8009f1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009f22:	4652      	mov	r2, sl
 8009f24:	465b      	mov	r3, fp
 8009f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f2a:	f7f6 fb6d 	bl	8000608 <__aeabi_dmul>
 8009f2e:	4682      	mov	sl, r0
 8009f30:	468b      	mov	fp, r1
 8009f32:	f034 040f 	bics.w	r4, r4, #15
 8009f36:	d073      	beq.n	800a020 <_strtod_l+0x518>
 8009f38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009f3c:	dd48      	ble.n	8009fd0 <_strtod_l+0x4c8>
 8009f3e:	2400      	movs	r4, #0
 8009f40:	46a0      	mov	r8, r4
 8009f42:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f44:	46a1      	mov	r9, r4
 8009f46:	9a05      	ldr	r2, [sp, #20]
 8009f48:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a0a0 <_strtod_l+0x598>
 8009f4c:	2322      	movs	r3, #34	@ 0x22
 8009f4e:	6013      	str	r3, [r2, #0]
 8009f50:	f04f 0a00 	mov.w	sl, #0
 8009f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f43f ae0f 	beq.w	8009b7a <_strtod_l+0x72>
 8009f5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f5e:	9805      	ldr	r0, [sp, #20]
 8009f60:	f7ff f942 	bl	80091e8 <_Bfree>
 8009f64:	9805      	ldr	r0, [sp, #20]
 8009f66:	4649      	mov	r1, r9
 8009f68:	f7ff f93e 	bl	80091e8 <_Bfree>
 8009f6c:	9805      	ldr	r0, [sp, #20]
 8009f6e:	4641      	mov	r1, r8
 8009f70:	f7ff f93a 	bl	80091e8 <_Bfree>
 8009f74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009f76:	9805      	ldr	r0, [sp, #20]
 8009f78:	f7ff f936 	bl	80091e8 <_Bfree>
 8009f7c:	9805      	ldr	r0, [sp, #20]
 8009f7e:	4621      	mov	r1, r4
 8009f80:	f7ff f932 	bl	80091e8 <_Bfree>
 8009f84:	e5f9      	b.n	8009b7a <_strtod_l+0x72>
 8009f86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	dbbc      	blt.n	8009f0a <_strtod_l+0x402>
 8009f90:	4c41      	ldr	r4, [pc, #260]	@ (800a098 <_strtod_l+0x590>)
 8009f92:	f1c5 050f 	rsb	r5, r5, #15
 8009f96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009f9a:	4652      	mov	r2, sl
 8009f9c:	465b      	mov	r3, fp
 8009f9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009fa2:	f7f6 fb31 	bl	8000608 <__aeabi_dmul>
 8009fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa8:	1b5d      	subs	r5, r3, r5
 8009faa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009fae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009fb2:	e78f      	b.n	8009ed4 <_strtod_l+0x3cc>
 8009fb4:	3316      	adds	r3, #22
 8009fb6:	dba8      	blt.n	8009f0a <_strtod_l+0x402>
 8009fb8:	4b37      	ldr	r3, [pc, #220]	@ (800a098 <_strtod_l+0x590>)
 8009fba:	eba9 0808 	sub.w	r8, r9, r8
 8009fbe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009fc2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009fc6:	4650      	mov	r0, sl
 8009fc8:	4659      	mov	r1, fp
 8009fca:	f7f6 fc47 	bl	800085c <__aeabi_ddiv>
 8009fce:	e783      	b.n	8009ed8 <_strtod_l+0x3d0>
 8009fd0:	4b32      	ldr	r3, [pc, #200]	@ (800a09c <_strtod_l+0x594>)
 8009fd2:	9308      	str	r3, [sp, #32]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	1124      	asrs	r4, r4, #4
 8009fd8:	4650      	mov	r0, sl
 8009fda:	4659      	mov	r1, fp
 8009fdc:	461e      	mov	r6, r3
 8009fde:	2c01      	cmp	r4, #1
 8009fe0:	dc21      	bgt.n	800a026 <_strtod_l+0x51e>
 8009fe2:	b10b      	cbz	r3, 8009fe8 <_strtod_l+0x4e0>
 8009fe4:	4682      	mov	sl, r0
 8009fe6:	468b      	mov	fp, r1
 8009fe8:	492c      	ldr	r1, [pc, #176]	@ (800a09c <_strtod_l+0x594>)
 8009fea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009fee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009ff2:	4652      	mov	r2, sl
 8009ff4:	465b      	mov	r3, fp
 8009ff6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ffa:	f7f6 fb05 	bl	8000608 <__aeabi_dmul>
 8009ffe:	4b28      	ldr	r3, [pc, #160]	@ (800a0a0 <_strtod_l+0x598>)
 800a000:	460a      	mov	r2, r1
 800a002:	400b      	ands	r3, r1
 800a004:	4927      	ldr	r1, [pc, #156]	@ (800a0a4 <_strtod_l+0x59c>)
 800a006:	428b      	cmp	r3, r1
 800a008:	4682      	mov	sl, r0
 800a00a:	d898      	bhi.n	8009f3e <_strtod_l+0x436>
 800a00c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a010:	428b      	cmp	r3, r1
 800a012:	bf86      	itte	hi
 800a014:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a0a8 <_strtod_l+0x5a0>
 800a018:	f04f 3aff 	movhi.w	sl, #4294967295
 800a01c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a020:	2300      	movs	r3, #0
 800a022:	9308      	str	r3, [sp, #32]
 800a024:	e07a      	b.n	800a11c <_strtod_l+0x614>
 800a026:	07e2      	lsls	r2, r4, #31
 800a028:	d505      	bpl.n	800a036 <_strtod_l+0x52e>
 800a02a:	9b08      	ldr	r3, [sp, #32]
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	f7f6 faea 	bl	8000608 <__aeabi_dmul>
 800a034:	2301      	movs	r3, #1
 800a036:	9a08      	ldr	r2, [sp, #32]
 800a038:	3208      	adds	r2, #8
 800a03a:	3601      	adds	r6, #1
 800a03c:	1064      	asrs	r4, r4, #1
 800a03e:	9208      	str	r2, [sp, #32]
 800a040:	e7cd      	b.n	8009fde <_strtod_l+0x4d6>
 800a042:	d0ed      	beq.n	800a020 <_strtod_l+0x518>
 800a044:	4264      	negs	r4, r4
 800a046:	f014 020f 	ands.w	r2, r4, #15
 800a04a:	d00a      	beq.n	800a062 <_strtod_l+0x55a>
 800a04c:	4b12      	ldr	r3, [pc, #72]	@ (800a098 <_strtod_l+0x590>)
 800a04e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a052:	4650      	mov	r0, sl
 800a054:	4659      	mov	r1, fp
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	f7f6 fbff 	bl	800085c <__aeabi_ddiv>
 800a05e:	4682      	mov	sl, r0
 800a060:	468b      	mov	fp, r1
 800a062:	1124      	asrs	r4, r4, #4
 800a064:	d0dc      	beq.n	800a020 <_strtod_l+0x518>
 800a066:	2c1f      	cmp	r4, #31
 800a068:	dd20      	ble.n	800a0ac <_strtod_l+0x5a4>
 800a06a:	2400      	movs	r4, #0
 800a06c:	46a0      	mov	r8, r4
 800a06e:	940a      	str	r4, [sp, #40]	@ 0x28
 800a070:	46a1      	mov	r9, r4
 800a072:	9a05      	ldr	r2, [sp, #20]
 800a074:	2322      	movs	r3, #34	@ 0x22
 800a076:	f04f 0a00 	mov.w	sl, #0
 800a07a:	f04f 0b00 	mov.w	fp, #0
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	e768      	b.n	8009f54 <_strtod_l+0x44c>
 800a082:	bf00      	nop
 800a084:	0800c715 	.word	0x0800c715
 800a088:	0800c92c 	.word	0x0800c92c
 800a08c:	0800c70d 	.word	0x0800c70d
 800a090:	0800c742 	.word	0x0800c742
 800a094:	0800caf0 	.word	0x0800caf0
 800a098:	0800c860 	.word	0x0800c860
 800a09c:	0800c838 	.word	0x0800c838
 800a0a0:	7ff00000 	.word	0x7ff00000
 800a0a4:	7ca00000 	.word	0x7ca00000
 800a0a8:	7fefffff 	.word	0x7fefffff
 800a0ac:	f014 0310 	ands.w	r3, r4, #16
 800a0b0:	bf18      	it	ne
 800a0b2:	236a      	movne	r3, #106	@ 0x6a
 800a0b4:	4ea9      	ldr	r6, [pc, #676]	@ (800a35c <_strtod_l+0x854>)
 800a0b6:	9308      	str	r3, [sp, #32]
 800a0b8:	4650      	mov	r0, sl
 800a0ba:	4659      	mov	r1, fp
 800a0bc:	2300      	movs	r3, #0
 800a0be:	07e2      	lsls	r2, r4, #31
 800a0c0:	d504      	bpl.n	800a0cc <_strtod_l+0x5c4>
 800a0c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0c6:	f7f6 fa9f 	bl	8000608 <__aeabi_dmul>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	1064      	asrs	r4, r4, #1
 800a0ce:	f106 0608 	add.w	r6, r6, #8
 800a0d2:	d1f4      	bne.n	800a0be <_strtod_l+0x5b6>
 800a0d4:	b10b      	cbz	r3, 800a0da <_strtod_l+0x5d2>
 800a0d6:	4682      	mov	sl, r0
 800a0d8:	468b      	mov	fp, r1
 800a0da:	9b08      	ldr	r3, [sp, #32]
 800a0dc:	b1b3      	cbz	r3, 800a10c <_strtod_l+0x604>
 800a0de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a0e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	4659      	mov	r1, fp
 800a0ea:	dd0f      	ble.n	800a10c <_strtod_l+0x604>
 800a0ec:	2b1f      	cmp	r3, #31
 800a0ee:	dd55      	ble.n	800a19c <_strtod_l+0x694>
 800a0f0:	2b34      	cmp	r3, #52	@ 0x34
 800a0f2:	bfde      	ittt	le
 800a0f4:	f04f 33ff 	movle.w	r3, #4294967295
 800a0f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a0fc:	4093      	lslle	r3, r2
 800a0fe:	f04f 0a00 	mov.w	sl, #0
 800a102:	bfcc      	ite	gt
 800a104:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a108:	ea03 0b01 	andle.w	fp, r3, r1
 800a10c:	2200      	movs	r2, #0
 800a10e:	2300      	movs	r3, #0
 800a110:	4650      	mov	r0, sl
 800a112:	4659      	mov	r1, fp
 800a114:	f7f6 fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d1a6      	bne.n	800a06a <_strtod_l+0x562>
 800a11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a122:	9805      	ldr	r0, [sp, #20]
 800a124:	462b      	mov	r3, r5
 800a126:	463a      	mov	r2, r7
 800a128:	f7ff f8c6 	bl	80092b8 <__s2b>
 800a12c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a12e:	2800      	cmp	r0, #0
 800a130:	f43f af05 	beq.w	8009f3e <_strtod_l+0x436>
 800a134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a136:	2a00      	cmp	r2, #0
 800a138:	eba9 0308 	sub.w	r3, r9, r8
 800a13c:	bfa8      	it	ge
 800a13e:	2300      	movge	r3, #0
 800a140:	9312      	str	r3, [sp, #72]	@ 0x48
 800a142:	2400      	movs	r4, #0
 800a144:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a148:	9316      	str	r3, [sp, #88]	@ 0x58
 800a14a:	46a0      	mov	r8, r4
 800a14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a14e:	9805      	ldr	r0, [sp, #20]
 800a150:	6859      	ldr	r1, [r3, #4]
 800a152:	f7ff f809 	bl	8009168 <_Balloc>
 800a156:	4681      	mov	r9, r0
 800a158:	2800      	cmp	r0, #0
 800a15a:	f43f aef4 	beq.w	8009f46 <_strtod_l+0x43e>
 800a15e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a160:	691a      	ldr	r2, [r3, #16]
 800a162:	3202      	adds	r2, #2
 800a164:	f103 010c 	add.w	r1, r3, #12
 800a168:	0092      	lsls	r2, r2, #2
 800a16a:	300c      	adds	r0, #12
 800a16c:	f7fe f89b 	bl	80082a6 <memcpy>
 800a170:	ec4b ab10 	vmov	d0, sl, fp
 800a174:	9805      	ldr	r0, [sp, #20]
 800a176:	aa1c      	add	r2, sp, #112	@ 0x70
 800a178:	a91b      	add	r1, sp, #108	@ 0x6c
 800a17a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a17e:	f7ff fbd7 	bl	8009930 <__d2b>
 800a182:	901a      	str	r0, [sp, #104]	@ 0x68
 800a184:	2800      	cmp	r0, #0
 800a186:	f43f aede 	beq.w	8009f46 <_strtod_l+0x43e>
 800a18a:	9805      	ldr	r0, [sp, #20]
 800a18c:	2101      	movs	r1, #1
 800a18e:	f7ff f929 	bl	80093e4 <__i2b>
 800a192:	4680      	mov	r8, r0
 800a194:	b948      	cbnz	r0, 800a1aa <_strtod_l+0x6a2>
 800a196:	f04f 0800 	mov.w	r8, #0
 800a19a:	e6d4      	b.n	8009f46 <_strtod_l+0x43e>
 800a19c:	f04f 32ff 	mov.w	r2, #4294967295
 800a1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a4:	ea03 0a0a 	and.w	sl, r3, sl
 800a1a8:	e7b0      	b.n	800a10c <_strtod_l+0x604>
 800a1aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a1ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a1ae:	2d00      	cmp	r5, #0
 800a1b0:	bfab      	itete	ge
 800a1b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a1b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a1b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a1b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a1ba:	bfac      	ite	ge
 800a1bc:	18ef      	addge	r7, r5, r3
 800a1be:	1b5e      	sublt	r6, r3, r5
 800a1c0:	9b08      	ldr	r3, [sp, #32]
 800a1c2:	1aed      	subs	r5, r5, r3
 800a1c4:	4415      	add	r5, r2
 800a1c6:	4b66      	ldr	r3, [pc, #408]	@ (800a360 <_strtod_l+0x858>)
 800a1c8:	3d01      	subs	r5, #1
 800a1ca:	429d      	cmp	r5, r3
 800a1cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a1d0:	da50      	bge.n	800a274 <_strtod_l+0x76c>
 800a1d2:	1b5b      	subs	r3, r3, r5
 800a1d4:	2b1f      	cmp	r3, #31
 800a1d6:	eba2 0203 	sub.w	r2, r2, r3
 800a1da:	f04f 0101 	mov.w	r1, #1
 800a1de:	dc3d      	bgt.n	800a25c <_strtod_l+0x754>
 800a1e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a1e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1ea:	18bd      	adds	r5, r7, r2
 800a1ec:	9b08      	ldr	r3, [sp, #32]
 800a1ee:	42af      	cmp	r7, r5
 800a1f0:	4416      	add	r6, r2
 800a1f2:	441e      	add	r6, r3
 800a1f4:	463b      	mov	r3, r7
 800a1f6:	bfa8      	it	ge
 800a1f8:	462b      	movge	r3, r5
 800a1fa:	42b3      	cmp	r3, r6
 800a1fc:	bfa8      	it	ge
 800a1fe:	4633      	movge	r3, r6
 800a200:	2b00      	cmp	r3, #0
 800a202:	bfc2      	ittt	gt
 800a204:	1aed      	subgt	r5, r5, r3
 800a206:	1af6      	subgt	r6, r6, r3
 800a208:	1aff      	subgt	r7, r7, r3
 800a20a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd16      	ble.n	800a23e <_strtod_l+0x736>
 800a210:	4641      	mov	r1, r8
 800a212:	9805      	ldr	r0, [sp, #20]
 800a214:	461a      	mov	r2, r3
 800a216:	f7ff f9a5 	bl	8009564 <__pow5mult>
 800a21a:	4680      	mov	r8, r0
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d0ba      	beq.n	800a196 <_strtod_l+0x68e>
 800a220:	4601      	mov	r1, r0
 800a222:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a224:	9805      	ldr	r0, [sp, #20]
 800a226:	f7ff f8f3 	bl	8009410 <__multiply>
 800a22a:	900e      	str	r0, [sp, #56]	@ 0x38
 800a22c:	2800      	cmp	r0, #0
 800a22e:	f43f ae8a 	beq.w	8009f46 <_strtod_l+0x43e>
 800a232:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a234:	9805      	ldr	r0, [sp, #20]
 800a236:	f7fe ffd7 	bl	80091e8 <_Bfree>
 800a23a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a23c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a23e:	2d00      	cmp	r5, #0
 800a240:	dc1d      	bgt.n	800a27e <_strtod_l+0x776>
 800a242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a244:	2b00      	cmp	r3, #0
 800a246:	dd23      	ble.n	800a290 <_strtod_l+0x788>
 800a248:	4649      	mov	r1, r9
 800a24a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a24c:	9805      	ldr	r0, [sp, #20]
 800a24e:	f7ff f989 	bl	8009564 <__pow5mult>
 800a252:	4681      	mov	r9, r0
 800a254:	b9e0      	cbnz	r0, 800a290 <_strtod_l+0x788>
 800a256:	f04f 0900 	mov.w	r9, #0
 800a25a:	e674      	b.n	8009f46 <_strtod_l+0x43e>
 800a25c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a260:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a264:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a268:	35e2      	adds	r5, #226	@ 0xe2
 800a26a:	fa01 f305 	lsl.w	r3, r1, r5
 800a26e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a270:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a272:	e7ba      	b.n	800a1ea <_strtod_l+0x6e2>
 800a274:	2300      	movs	r3, #0
 800a276:	9310      	str	r3, [sp, #64]	@ 0x40
 800a278:	2301      	movs	r3, #1
 800a27a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a27c:	e7b5      	b.n	800a1ea <_strtod_l+0x6e2>
 800a27e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a280:	9805      	ldr	r0, [sp, #20]
 800a282:	462a      	mov	r2, r5
 800a284:	f7ff f9c8 	bl	8009618 <__lshift>
 800a288:	901a      	str	r0, [sp, #104]	@ 0x68
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d1d9      	bne.n	800a242 <_strtod_l+0x73a>
 800a28e:	e65a      	b.n	8009f46 <_strtod_l+0x43e>
 800a290:	2e00      	cmp	r6, #0
 800a292:	dd07      	ble.n	800a2a4 <_strtod_l+0x79c>
 800a294:	4649      	mov	r1, r9
 800a296:	9805      	ldr	r0, [sp, #20]
 800a298:	4632      	mov	r2, r6
 800a29a:	f7ff f9bd 	bl	8009618 <__lshift>
 800a29e:	4681      	mov	r9, r0
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	d0d8      	beq.n	800a256 <_strtod_l+0x74e>
 800a2a4:	2f00      	cmp	r7, #0
 800a2a6:	dd08      	ble.n	800a2ba <_strtod_l+0x7b2>
 800a2a8:	4641      	mov	r1, r8
 800a2aa:	9805      	ldr	r0, [sp, #20]
 800a2ac:	463a      	mov	r2, r7
 800a2ae:	f7ff f9b3 	bl	8009618 <__lshift>
 800a2b2:	4680      	mov	r8, r0
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	f43f ae46 	beq.w	8009f46 <_strtod_l+0x43e>
 800a2ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a2bc:	9805      	ldr	r0, [sp, #20]
 800a2be:	464a      	mov	r2, r9
 800a2c0:	f7ff fa32 	bl	8009728 <__mdiff>
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	f43f ae3d 	beq.w	8009f46 <_strtod_l+0x43e>
 800a2cc:	68c3      	ldr	r3, [r0, #12]
 800a2ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	60c3      	str	r3, [r0, #12]
 800a2d4:	4641      	mov	r1, r8
 800a2d6:	f7ff fa0b 	bl	80096f0 <__mcmp>
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	da46      	bge.n	800a36c <_strtod_l+0x864>
 800a2de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2e0:	ea53 030a 	orrs.w	r3, r3, sl
 800a2e4:	d16c      	bne.n	800a3c0 <_strtod_l+0x8b8>
 800a2e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d168      	bne.n	800a3c0 <_strtod_l+0x8b8>
 800a2ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a2f2:	0d1b      	lsrs	r3, r3, #20
 800a2f4:	051b      	lsls	r3, r3, #20
 800a2f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a2fa:	d961      	bls.n	800a3c0 <_strtod_l+0x8b8>
 800a2fc:	6963      	ldr	r3, [r4, #20]
 800a2fe:	b913      	cbnz	r3, 800a306 <_strtod_l+0x7fe>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	2b01      	cmp	r3, #1
 800a304:	dd5c      	ble.n	800a3c0 <_strtod_l+0x8b8>
 800a306:	4621      	mov	r1, r4
 800a308:	2201      	movs	r2, #1
 800a30a:	9805      	ldr	r0, [sp, #20]
 800a30c:	f7ff f984 	bl	8009618 <__lshift>
 800a310:	4641      	mov	r1, r8
 800a312:	4604      	mov	r4, r0
 800a314:	f7ff f9ec 	bl	80096f0 <__mcmp>
 800a318:	2800      	cmp	r0, #0
 800a31a:	dd51      	ble.n	800a3c0 <_strtod_l+0x8b8>
 800a31c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a320:	9a08      	ldr	r2, [sp, #32]
 800a322:	0d1b      	lsrs	r3, r3, #20
 800a324:	051b      	lsls	r3, r3, #20
 800a326:	2a00      	cmp	r2, #0
 800a328:	d06b      	beq.n	800a402 <_strtod_l+0x8fa>
 800a32a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a32e:	d868      	bhi.n	800a402 <_strtod_l+0x8fa>
 800a330:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a334:	f67f ae9d 	bls.w	800a072 <_strtod_l+0x56a>
 800a338:	4b0a      	ldr	r3, [pc, #40]	@ (800a364 <_strtod_l+0x85c>)
 800a33a:	4650      	mov	r0, sl
 800a33c:	4659      	mov	r1, fp
 800a33e:	2200      	movs	r2, #0
 800a340:	f7f6 f962 	bl	8000608 <__aeabi_dmul>
 800a344:	4b08      	ldr	r3, [pc, #32]	@ (800a368 <_strtod_l+0x860>)
 800a346:	400b      	ands	r3, r1
 800a348:	4682      	mov	sl, r0
 800a34a:	468b      	mov	fp, r1
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f47f ae05 	bne.w	8009f5c <_strtod_l+0x454>
 800a352:	9a05      	ldr	r2, [sp, #20]
 800a354:	2322      	movs	r3, #34	@ 0x22
 800a356:	6013      	str	r3, [r2, #0]
 800a358:	e600      	b.n	8009f5c <_strtod_l+0x454>
 800a35a:	bf00      	nop
 800a35c:	0800c958 	.word	0x0800c958
 800a360:	fffffc02 	.word	0xfffffc02
 800a364:	39500000 	.word	0x39500000
 800a368:	7ff00000 	.word	0x7ff00000
 800a36c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a370:	d165      	bne.n	800a43e <_strtod_l+0x936>
 800a372:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a378:	b35a      	cbz	r2, 800a3d2 <_strtod_l+0x8ca>
 800a37a:	4a9f      	ldr	r2, [pc, #636]	@ (800a5f8 <_strtod_l+0xaf0>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d12b      	bne.n	800a3d8 <_strtod_l+0x8d0>
 800a380:	9b08      	ldr	r3, [sp, #32]
 800a382:	4651      	mov	r1, sl
 800a384:	b303      	cbz	r3, 800a3c8 <_strtod_l+0x8c0>
 800a386:	4b9d      	ldr	r3, [pc, #628]	@ (800a5fc <_strtod_l+0xaf4>)
 800a388:	465a      	mov	r2, fp
 800a38a:	4013      	ands	r3, r2
 800a38c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a390:	f04f 32ff 	mov.w	r2, #4294967295
 800a394:	d81b      	bhi.n	800a3ce <_strtod_l+0x8c6>
 800a396:	0d1b      	lsrs	r3, r3, #20
 800a398:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a39c:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a0:	4299      	cmp	r1, r3
 800a3a2:	d119      	bne.n	800a3d8 <_strtod_l+0x8d0>
 800a3a4:	4b96      	ldr	r3, [pc, #600]	@ (800a600 <_strtod_l+0xaf8>)
 800a3a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d102      	bne.n	800a3b2 <_strtod_l+0x8aa>
 800a3ac:	3101      	adds	r1, #1
 800a3ae:	f43f adca 	beq.w	8009f46 <_strtod_l+0x43e>
 800a3b2:	4b92      	ldr	r3, [pc, #584]	@ (800a5fc <_strtod_l+0xaf4>)
 800a3b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3b6:	401a      	ands	r2, r3
 800a3b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a3bc:	f04f 0a00 	mov.w	sl, #0
 800a3c0:	9b08      	ldr	r3, [sp, #32]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1b8      	bne.n	800a338 <_strtod_l+0x830>
 800a3c6:	e5c9      	b.n	8009f5c <_strtod_l+0x454>
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a3cc:	e7e8      	b.n	800a3a0 <_strtod_l+0x898>
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	e7e6      	b.n	800a3a0 <_strtod_l+0x898>
 800a3d2:	ea53 030a 	orrs.w	r3, r3, sl
 800a3d6:	d0a1      	beq.n	800a31c <_strtod_l+0x814>
 800a3d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3da:	b1db      	cbz	r3, 800a414 <_strtod_l+0x90c>
 800a3dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3de:	4213      	tst	r3, r2
 800a3e0:	d0ee      	beq.n	800a3c0 <_strtod_l+0x8b8>
 800a3e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3e4:	9a08      	ldr	r2, [sp, #32]
 800a3e6:	4650      	mov	r0, sl
 800a3e8:	4659      	mov	r1, fp
 800a3ea:	b1bb      	cbz	r3, 800a41c <_strtod_l+0x914>
 800a3ec:	f7ff fb6e 	bl	8009acc <sulp>
 800a3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a3f4:	ec53 2b10 	vmov	r2, r3, d0
 800a3f8:	f7f5 ff50 	bl	800029c <__adddf3>
 800a3fc:	4682      	mov	sl, r0
 800a3fe:	468b      	mov	fp, r1
 800a400:	e7de      	b.n	800a3c0 <_strtod_l+0x8b8>
 800a402:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a406:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a40a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a40e:	f04f 3aff 	mov.w	sl, #4294967295
 800a412:	e7d5      	b.n	800a3c0 <_strtod_l+0x8b8>
 800a414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a416:	ea13 0f0a 	tst.w	r3, sl
 800a41a:	e7e1      	b.n	800a3e0 <_strtod_l+0x8d8>
 800a41c:	f7ff fb56 	bl	8009acc <sulp>
 800a420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a424:	ec53 2b10 	vmov	r2, r3, d0
 800a428:	f7f5 ff36 	bl	8000298 <__aeabi_dsub>
 800a42c:	2200      	movs	r2, #0
 800a42e:	2300      	movs	r3, #0
 800a430:	4682      	mov	sl, r0
 800a432:	468b      	mov	fp, r1
 800a434:	f7f6 fb50 	bl	8000ad8 <__aeabi_dcmpeq>
 800a438:	2800      	cmp	r0, #0
 800a43a:	d0c1      	beq.n	800a3c0 <_strtod_l+0x8b8>
 800a43c:	e619      	b.n	800a072 <_strtod_l+0x56a>
 800a43e:	4641      	mov	r1, r8
 800a440:	4620      	mov	r0, r4
 800a442:	f7ff facd 	bl	80099e0 <__ratio>
 800a446:	ec57 6b10 	vmov	r6, r7, d0
 800a44a:	2200      	movs	r2, #0
 800a44c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a450:	4630      	mov	r0, r6
 800a452:	4639      	mov	r1, r7
 800a454:	f7f6 fb54 	bl	8000b00 <__aeabi_dcmple>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d06f      	beq.n	800a53c <_strtod_l+0xa34>
 800a45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d17a      	bne.n	800a558 <_strtod_l+0xa50>
 800a462:	f1ba 0f00 	cmp.w	sl, #0
 800a466:	d158      	bne.n	800a51a <_strtod_l+0xa12>
 800a468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a46a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d15a      	bne.n	800a528 <_strtod_l+0xa20>
 800a472:	4b64      	ldr	r3, [pc, #400]	@ (800a604 <_strtod_l+0xafc>)
 800a474:	2200      	movs	r2, #0
 800a476:	4630      	mov	r0, r6
 800a478:	4639      	mov	r1, r7
 800a47a:	f7f6 fb37 	bl	8000aec <__aeabi_dcmplt>
 800a47e:	2800      	cmp	r0, #0
 800a480:	d159      	bne.n	800a536 <_strtod_l+0xa2e>
 800a482:	4630      	mov	r0, r6
 800a484:	4639      	mov	r1, r7
 800a486:	4b60      	ldr	r3, [pc, #384]	@ (800a608 <_strtod_l+0xb00>)
 800a488:	2200      	movs	r2, #0
 800a48a:	f7f6 f8bd 	bl	8000608 <__aeabi_dmul>
 800a48e:	4606      	mov	r6, r0
 800a490:	460f      	mov	r7, r1
 800a492:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a496:	9606      	str	r6, [sp, #24]
 800a498:	9307      	str	r3, [sp, #28]
 800a49a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a49e:	4d57      	ldr	r5, [pc, #348]	@ (800a5fc <_strtod_l+0xaf4>)
 800a4a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a4a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4a6:	401d      	ands	r5, r3
 800a4a8:	4b58      	ldr	r3, [pc, #352]	@ (800a60c <_strtod_l+0xb04>)
 800a4aa:	429d      	cmp	r5, r3
 800a4ac:	f040 80b2 	bne.w	800a614 <_strtod_l+0xb0c>
 800a4b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a4b6:	ec4b ab10 	vmov	d0, sl, fp
 800a4ba:	f7ff f9c9 	bl	8009850 <__ulp>
 800a4be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4c2:	ec51 0b10 	vmov	r0, r1, d0
 800a4c6:	f7f6 f89f 	bl	8000608 <__aeabi_dmul>
 800a4ca:	4652      	mov	r2, sl
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	f7f5 fee5 	bl	800029c <__adddf3>
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4949      	ldr	r1, [pc, #292]	@ (800a5fc <_strtod_l+0xaf4>)
 800a4d6:	4a4e      	ldr	r2, [pc, #312]	@ (800a610 <_strtod_l+0xb08>)
 800a4d8:	4019      	ands	r1, r3
 800a4da:	4291      	cmp	r1, r2
 800a4dc:	4682      	mov	sl, r0
 800a4de:	d942      	bls.n	800a566 <_strtod_l+0xa5e>
 800a4e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4e2:	4b47      	ldr	r3, [pc, #284]	@ (800a600 <_strtod_l+0xaf8>)
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d103      	bne.n	800a4f0 <_strtod_l+0x9e8>
 800a4e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	f43f ad2b 	beq.w	8009f46 <_strtod_l+0x43e>
 800a4f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a600 <_strtod_l+0xaf8>
 800a4f4:	f04f 3aff 	mov.w	sl, #4294967295
 800a4f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4fa:	9805      	ldr	r0, [sp, #20]
 800a4fc:	f7fe fe74 	bl	80091e8 <_Bfree>
 800a500:	9805      	ldr	r0, [sp, #20]
 800a502:	4649      	mov	r1, r9
 800a504:	f7fe fe70 	bl	80091e8 <_Bfree>
 800a508:	9805      	ldr	r0, [sp, #20]
 800a50a:	4641      	mov	r1, r8
 800a50c:	f7fe fe6c 	bl	80091e8 <_Bfree>
 800a510:	9805      	ldr	r0, [sp, #20]
 800a512:	4621      	mov	r1, r4
 800a514:	f7fe fe68 	bl	80091e8 <_Bfree>
 800a518:	e618      	b.n	800a14c <_strtod_l+0x644>
 800a51a:	f1ba 0f01 	cmp.w	sl, #1
 800a51e:	d103      	bne.n	800a528 <_strtod_l+0xa20>
 800a520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a522:	2b00      	cmp	r3, #0
 800a524:	f43f ada5 	beq.w	800a072 <_strtod_l+0x56a>
 800a528:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a5d8 <_strtod_l+0xad0>
 800a52c:	4f35      	ldr	r7, [pc, #212]	@ (800a604 <_strtod_l+0xafc>)
 800a52e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a532:	2600      	movs	r6, #0
 800a534:	e7b1      	b.n	800a49a <_strtod_l+0x992>
 800a536:	4f34      	ldr	r7, [pc, #208]	@ (800a608 <_strtod_l+0xb00>)
 800a538:	2600      	movs	r6, #0
 800a53a:	e7aa      	b.n	800a492 <_strtod_l+0x98a>
 800a53c:	4b32      	ldr	r3, [pc, #200]	@ (800a608 <_strtod_l+0xb00>)
 800a53e:	4630      	mov	r0, r6
 800a540:	4639      	mov	r1, r7
 800a542:	2200      	movs	r2, #0
 800a544:	f7f6 f860 	bl	8000608 <__aeabi_dmul>
 800a548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a54a:	4606      	mov	r6, r0
 800a54c:	460f      	mov	r7, r1
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d09f      	beq.n	800a492 <_strtod_l+0x98a>
 800a552:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a556:	e7a0      	b.n	800a49a <_strtod_l+0x992>
 800a558:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a5e0 <_strtod_l+0xad8>
 800a55c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a560:	ec57 6b17 	vmov	r6, r7, d7
 800a564:	e799      	b.n	800a49a <_strtod_l+0x992>
 800a566:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a56a:	9b08      	ldr	r3, [sp, #32]
 800a56c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1c1      	bne.n	800a4f8 <_strtod_l+0x9f0>
 800a574:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a578:	0d1b      	lsrs	r3, r3, #20
 800a57a:	051b      	lsls	r3, r3, #20
 800a57c:	429d      	cmp	r5, r3
 800a57e:	d1bb      	bne.n	800a4f8 <_strtod_l+0x9f0>
 800a580:	4630      	mov	r0, r6
 800a582:	4639      	mov	r1, r7
 800a584:	f7f6 fba0 	bl	8000cc8 <__aeabi_d2lz>
 800a588:	f7f6 f810 	bl	80005ac <__aeabi_l2d>
 800a58c:	4602      	mov	r2, r0
 800a58e:	460b      	mov	r3, r1
 800a590:	4630      	mov	r0, r6
 800a592:	4639      	mov	r1, r7
 800a594:	f7f5 fe80 	bl	8000298 <__aeabi_dsub>
 800a598:	460b      	mov	r3, r1
 800a59a:	4602      	mov	r2, r0
 800a59c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a5a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a5a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5a6:	ea46 060a 	orr.w	r6, r6, sl
 800a5aa:	431e      	orrs	r6, r3
 800a5ac:	d06f      	beq.n	800a68e <_strtod_l+0xb86>
 800a5ae:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5e8 <_strtod_l+0xae0>)
 800a5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b4:	f7f6 fa9a 	bl	8000aec <__aeabi_dcmplt>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	f47f accf 	bne.w	8009f5c <_strtod_l+0x454>
 800a5be:	a30c      	add	r3, pc, #48	@ (adr r3, 800a5f0 <_strtod_l+0xae8>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a5c8:	f7f6 faae 	bl	8000b28 <__aeabi_dcmpgt>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d093      	beq.n	800a4f8 <_strtod_l+0x9f0>
 800a5d0:	e4c4      	b.n	8009f5c <_strtod_l+0x454>
 800a5d2:	bf00      	nop
 800a5d4:	f3af 8000 	nop.w
 800a5d8:	00000000 	.word	0x00000000
 800a5dc:	bff00000 	.word	0xbff00000
 800a5e0:	00000000 	.word	0x00000000
 800a5e4:	3ff00000 	.word	0x3ff00000
 800a5e8:	94a03595 	.word	0x94a03595
 800a5ec:	3fdfffff 	.word	0x3fdfffff
 800a5f0:	35afe535 	.word	0x35afe535
 800a5f4:	3fe00000 	.word	0x3fe00000
 800a5f8:	000fffff 	.word	0x000fffff
 800a5fc:	7ff00000 	.word	0x7ff00000
 800a600:	7fefffff 	.word	0x7fefffff
 800a604:	3ff00000 	.word	0x3ff00000
 800a608:	3fe00000 	.word	0x3fe00000
 800a60c:	7fe00000 	.word	0x7fe00000
 800a610:	7c9fffff 	.word	0x7c9fffff
 800a614:	9b08      	ldr	r3, [sp, #32]
 800a616:	b323      	cbz	r3, 800a662 <_strtod_l+0xb5a>
 800a618:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a61c:	d821      	bhi.n	800a662 <_strtod_l+0xb5a>
 800a61e:	a328      	add	r3, pc, #160	@ (adr r3, 800a6c0 <_strtod_l+0xbb8>)
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f7f6 fa6a 	bl	8000b00 <__aeabi_dcmple>
 800a62c:	b1a0      	cbz	r0, 800a658 <_strtod_l+0xb50>
 800a62e:	4639      	mov	r1, r7
 800a630:	4630      	mov	r0, r6
 800a632:	f7f6 fac1 	bl	8000bb8 <__aeabi_d2uiz>
 800a636:	2801      	cmp	r0, #1
 800a638:	bf38      	it	cc
 800a63a:	2001      	movcc	r0, #1
 800a63c:	f7f5 ff6a 	bl	8000514 <__aeabi_ui2d>
 800a640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a642:	4606      	mov	r6, r0
 800a644:	460f      	mov	r7, r1
 800a646:	b9fb      	cbnz	r3, 800a688 <_strtod_l+0xb80>
 800a648:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a64c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a64e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a650:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a654:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a658:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a65a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a65e:	1b5b      	subs	r3, r3, r5
 800a660:	9311      	str	r3, [sp, #68]	@ 0x44
 800a662:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a666:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a66a:	f7ff f8f1 	bl	8009850 <__ulp>
 800a66e:	4650      	mov	r0, sl
 800a670:	ec53 2b10 	vmov	r2, r3, d0
 800a674:	4659      	mov	r1, fp
 800a676:	f7f5 ffc7 	bl	8000608 <__aeabi_dmul>
 800a67a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a67e:	f7f5 fe0d 	bl	800029c <__adddf3>
 800a682:	4682      	mov	sl, r0
 800a684:	468b      	mov	fp, r1
 800a686:	e770      	b.n	800a56a <_strtod_l+0xa62>
 800a688:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a68c:	e7e0      	b.n	800a650 <_strtod_l+0xb48>
 800a68e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a6c8 <_strtod_l+0xbc0>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f6 fa2a 	bl	8000aec <__aeabi_dcmplt>
 800a698:	e798      	b.n	800a5cc <_strtod_l+0xac4>
 800a69a:	2300      	movs	r3, #0
 800a69c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a69e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a6a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	f7ff ba6d 	b.w	8009b82 <_strtod_l+0x7a>
 800a6a8:	2a65      	cmp	r2, #101	@ 0x65
 800a6aa:	f43f ab66 	beq.w	8009d7a <_strtod_l+0x272>
 800a6ae:	2a45      	cmp	r2, #69	@ 0x45
 800a6b0:	f43f ab63 	beq.w	8009d7a <_strtod_l+0x272>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	f7ff bb9e 	b.w	8009df6 <_strtod_l+0x2ee>
 800a6ba:	bf00      	nop
 800a6bc:	f3af 8000 	nop.w
 800a6c0:	ffc00000 	.word	0xffc00000
 800a6c4:	41dfffff 	.word	0x41dfffff
 800a6c8:	94a03595 	.word	0x94a03595
 800a6cc:	3fcfffff 	.word	0x3fcfffff

0800a6d0 <_strtod_r>:
 800a6d0:	4b01      	ldr	r3, [pc, #4]	@ (800a6d8 <_strtod_r+0x8>)
 800a6d2:	f7ff ba19 	b.w	8009b08 <_strtod_l>
 800a6d6:	bf00      	nop
 800a6d8:	20000084 	.word	0x20000084

0800a6dc <_strtol_l.constprop.0>:
 800a6dc:	2b24      	cmp	r3, #36	@ 0x24
 800a6de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e2:	4686      	mov	lr, r0
 800a6e4:	4690      	mov	r8, r2
 800a6e6:	d801      	bhi.n	800a6ec <_strtol_l.constprop.0+0x10>
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d106      	bne.n	800a6fa <_strtol_l.constprop.0+0x1e>
 800a6ec:	f7fd fdae 	bl	800824c <__errno>
 800a6f0:	2316      	movs	r3, #22
 800a6f2:	6003      	str	r3, [r0, #0]
 800a6f4:	2000      	movs	r0, #0
 800a6f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6fa:	4834      	ldr	r0, [pc, #208]	@ (800a7cc <_strtol_l.constprop.0+0xf0>)
 800a6fc:	460d      	mov	r5, r1
 800a6fe:	462a      	mov	r2, r5
 800a700:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a704:	5d06      	ldrb	r6, [r0, r4]
 800a706:	f016 0608 	ands.w	r6, r6, #8
 800a70a:	d1f8      	bne.n	800a6fe <_strtol_l.constprop.0+0x22>
 800a70c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a70e:	d12d      	bne.n	800a76c <_strtol_l.constprop.0+0x90>
 800a710:	782c      	ldrb	r4, [r5, #0]
 800a712:	2601      	movs	r6, #1
 800a714:	1c95      	adds	r5, r2, #2
 800a716:	f033 0210 	bics.w	r2, r3, #16
 800a71a:	d109      	bne.n	800a730 <_strtol_l.constprop.0+0x54>
 800a71c:	2c30      	cmp	r4, #48	@ 0x30
 800a71e:	d12a      	bne.n	800a776 <_strtol_l.constprop.0+0x9a>
 800a720:	782a      	ldrb	r2, [r5, #0]
 800a722:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a726:	2a58      	cmp	r2, #88	@ 0x58
 800a728:	d125      	bne.n	800a776 <_strtol_l.constprop.0+0x9a>
 800a72a:	786c      	ldrb	r4, [r5, #1]
 800a72c:	2310      	movs	r3, #16
 800a72e:	3502      	adds	r5, #2
 800a730:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a734:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a738:	2200      	movs	r2, #0
 800a73a:	fbbc f9f3 	udiv	r9, ip, r3
 800a73e:	4610      	mov	r0, r2
 800a740:	fb03 ca19 	mls	sl, r3, r9, ip
 800a744:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a748:	2f09      	cmp	r7, #9
 800a74a:	d81b      	bhi.n	800a784 <_strtol_l.constprop.0+0xa8>
 800a74c:	463c      	mov	r4, r7
 800a74e:	42a3      	cmp	r3, r4
 800a750:	dd27      	ble.n	800a7a2 <_strtol_l.constprop.0+0xc6>
 800a752:	1c57      	adds	r7, r2, #1
 800a754:	d007      	beq.n	800a766 <_strtol_l.constprop.0+0x8a>
 800a756:	4581      	cmp	r9, r0
 800a758:	d320      	bcc.n	800a79c <_strtol_l.constprop.0+0xc0>
 800a75a:	d101      	bne.n	800a760 <_strtol_l.constprop.0+0x84>
 800a75c:	45a2      	cmp	sl, r4
 800a75e:	db1d      	blt.n	800a79c <_strtol_l.constprop.0+0xc0>
 800a760:	fb00 4003 	mla	r0, r0, r3, r4
 800a764:	2201      	movs	r2, #1
 800a766:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a76a:	e7eb      	b.n	800a744 <_strtol_l.constprop.0+0x68>
 800a76c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a76e:	bf04      	itt	eq
 800a770:	782c      	ldrbeq	r4, [r5, #0]
 800a772:	1c95      	addeq	r5, r2, #2
 800a774:	e7cf      	b.n	800a716 <_strtol_l.constprop.0+0x3a>
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1da      	bne.n	800a730 <_strtol_l.constprop.0+0x54>
 800a77a:	2c30      	cmp	r4, #48	@ 0x30
 800a77c:	bf0c      	ite	eq
 800a77e:	2308      	moveq	r3, #8
 800a780:	230a      	movne	r3, #10
 800a782:	e7d5      	b.n	800a730 <_strtol_l.constprop.0+0x54>
 800a784:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a788:	2f19      	cmp	r7, #25
 800a78a:	d801      	bhi.n	800a790 <_strtol_l.constprop.0+0xb4>
 800a78c:	3c37      	subs	r4, #55	@ 0x37
 800a78e:	e7de      	b.n	800a74e <_strtol_l.constprop.0+0x72>
 800a790:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a794:	2f19      	cmp	r7, #25
 800a796:	d804      	bhi.n	800a7a2 <_strtol_l.constprop.0+0xc6>
 800a798:	3c57      	subs	r4, #87	@ 0x57
 800a79a:	e7d8      	b.n	800a74e <_strtol_l.constprop.0+0x72>
 800a79c:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a0:	e7e1      	b.n	800a766 <_strtol_l.constprop.0+0x8a>
 800a7a2:	1c53      	adds	r3, r2, #1
 800a7a4:	d108      	bne.n	800a7b8 <_strtol_l.constprop.0+0xdc>
 800a7a6:	2322      	movs	r3, #34	@ 0x22
 800a7a8:	f8ce 3000 	str.w	r3, [lr]
 800a7ac:	4660      	mov	r0, ip
 800a7ae:	f1b8 0f00 	cmp.w	r8, #0
 800a7b2:	d0a0      	beq.n	800a6f6 <_strtol_l.constprop.0+0x1a>
 800a7b4:	1e69      	subs	r1, r5, #1
 800a7b6:	e006      	b.n	800a7c6 <_strtol_l.constprop.0+0xea>
 800a7b8:	b106      	cbz	r6, 800a7bc <_strtol_l.constprop.0+0xe0>
 800a7ba:	4240      	negs	r0, r0
 800a7bc:	f1b8 0f00 	cmp.w	r8, #0
 800a7c0:	d099      	beq.n	800a6f6 <_strtol_l.constprop.0+0x1a>
 800a7c2:	2a00      	cmp	r2, #0
 800a7c4:	d1f6      	bne.n	800a7b4 <_strtol_l.constprop.0+0xd8>
 800a7c6:	f8c8 1000 	str.w	r1, [r8]
 800a7ca:	e794      	b.n	800a6f6 <_strtol_l.constprop.0+0x1a>
 800a7cc:	0800c981 	.word	0x0800c981

0800a7d0 <_strtol_r>:
 800a7d0:	f7ff bf84 	b.w	800a6dc <_strtol_l.constprop.0>

0800a7d4 <__ssputs_r>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	688e      	ldr	r6, [r1, #8]
 800a7da:	461f      	mov	r7, r3
 800a7dc:	42be      	cmp	r6, r7
 800a7de:	680b      	ldr	r3, [r1, #0]
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	4690      	mov	r8, r2
 800a7e6:	d82d      	bhi.n	800a844 <__ssputs_r+0x70>
 800a7e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7f0:	d026      	beq.n	800a840 <__ssputs_r+0x6c>
 800a7f2:	6965      	ldr	r5, [r4, #20]
 800a7f4:	6909      	ldr	r1, [r1, #16]
 800a7f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7fa:	eba3 0901 	sub.w	r9, r3, r1
 800a7fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a802:	1c7b      	adds	r3, r7, #1
 800a804:	444b      	add	r3, r9
 800a806:	106d      	asrs	r5, r5, #1
 800a808:	429d      	cmp	r5, r3
 800a80a:	bf38      	it	cc
 800a80c:	461d      	movcc	r5, r3
 800a80e:	0553      	lsls	r3, r2, #21
 800a810:	d527      	bpl.n	800a862 <__ssputs_r+0x8e>
 800a812:	4629      	mov	r1, r5
 800a814:	f7fe fc1c 	bl	8009050 <_malloc_r>
 800a818:	4606      	mov	r6, r0
 800a81a:	b360      	cbz	r0, 800a876 <__ssputs_r+0xa2>
 800a81c:	6921      	ldr	r1, [r4, #16]
 800a81e:	464a      	mov	r2, r9
 800a820:	f7fd fd41 	bl	80082a6 <memcpy>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a82a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a82e:	81a3      	strh	r3, [r4, #12]
 800a830:	6126      	str	r6, [r4, #16]
 800a832:	6165      	str	r5, [r4, #20]
 800a834:	444e      	add	r6, r9
 800a836:	eba5 0509 	sub.w	r5, r5, r9
 800a83a:	6026      	str	r6, [r4, #0]
 800a83c:	60a5      	str	r5, [r4, #8]
 800a83e:	463e      	mov	r6, r7
 800a840:	42be      	cmp	r6, r7
 800a842:	d900      	bls.n	800a846 <__ssputs_r+0x72>
 800a844:	463e      	mov	r6, r7
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	4632      	mov	r2, r6
 800a84a:	4641      	mov	r1, r8
 800a84c:	f000 fd53 	bl	800b2f6 <memmove>
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	1b9b      	subs	r3, r3, r6
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	4433      	add	r3, r6
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	2000      	movs	r0, #0
 800a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a862:	462a      	mov	r2, r5
 800a864:	f001 f909 	bl	800ba7a <_realloc_r>
 800a868:	4606      	mov	r6, r0
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d1e0      	bne.n	800a830 <__ssputs_r+0x5c>
 800a86e:	6921      	ldr	r1, [r4, #16]
 800a870:	4650      	mov	r0, sl
 800a872:	f7fe fb79 	bl	8008f68 <_free_r>
 800a876:	230c      	movs	r3, #12
 800a878:	f8ca 3000 	str.w	r3, [sl]
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	e7e9      	b.n	800a85e <__ssputs_r+0x8a>
	...

0800a88c <_svfiprintf_r>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	4698      	mov	r8, r3
 800a892:	898b      	ldrh	r3, [r1, #12]
 800a894:	061b      	lsls	r3, r3, #24
 800a896:	b09d      	sub	sp, #116	@ 0x74
 800a898:	4607      	mov	r7, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	4614      	mov	r4, r2
 800a89e:	d510      	bpl.n	800a8c2 <_svfiprintf_r+0x36>
 800a8a0:	690b      	ldr	r3, [r1, #16]
 800a8a2:	b973      	cbnz	r3, 800a8c2 <_svfiprintf_r+0x36>
 800a8a4:	2140      	movs	r1, #64	@ 0x40
 800a8a6:	f7fe fbd3 	bl	8009050 <_malloc_r>
 800a8aa:	6028      	str	r0, [r5, #0]
 800a8ac:	6128      	str	r0, [r5, #16]
 800a8ae:	b930      	cbnz	r0, 800a8be <_svfiprintf_r+0x32>
 800a8b0:	230c      	movs	r3, #12
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	b01d      	add	sp, #116	@ 0x74
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	2340      	movs	r3, #64	@ 0x40
 800a8c0:	616b      	str	r3, [r5, #20]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c6:	2320      	movs	r3, #32
 800a8c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8d0:	2330      	movs	r3, #48	@ 0x30
 800a8d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa70 <_svfiprintf_r+0x1e4>
 800a8d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8da:	f04f 0901 	mov.w	r9, #1
 800a8de:	4623      	mov	r3, r4
 800a8e0:	469a      	mov	sl, r3
 800a8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8e6:	b10a      	cbz	r2, 800a8ec <_svfiprintf_r+0x60>
 800a8e8:	2a25      	cmp	r2, #37	@ 0x25
 800a8ea:	d1f9      	bne.n	800a8e0 <_svfiprintf_r+0x54>
 800a8ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a8f0:	d00b      	beq.n	800a90a <_svfiprintf_r+0x7e>
 800a8f2:	465b      	mov	r3, fp
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	f7ff ff6b 	bl	800a7d4 <__ssputs_r>
 800a8fe:	3001      	adds	r0, #1
 800a900:	f000 80a7 	beq.w	800aa52 <_svfiprintf_r+0x1c6>
 800a904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a906:	445a      	add	r2, fp
 800a908:	9209      	str	r2, [sp, #36]	@ 0x24
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 809f 	beq.w	800aa52 <_svfiprintf_r+0x1c6>
 800a914:	2300      	movs	r3, #0
 800a916:	f04f 32ff 	mov.w	r2, #4294967295
 800a91a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a91e:	f10a 0a01 	add.w	sl, sl, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	9307      	str	r3, [sp, #28]
 800a926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a92a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a92c:	4654      	mov	r4, sl
 800a92e:	2205      	movs	r2, #5
 800a930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a934:	484e      	ldr	r0, [pc, #312]	@ (800aa70 <_svfiprintf_r+0x1e4>)
 800a936:	f7f5 fc53 	bl	80001e0 <memchr>
 800a93a:	9a04      	ldr	r2, [sp, #16]
 800a93c:	b9d8      	cbnz	r0, 800a976 <_svfiprintf_r+0xea>
 800a93e:	06d0      	lsls	r0, r2, #27
 800a940:	bf44      	itt	mi
 800a942:	2320      	movmi	r3, #32
 800a944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a948:	0711      	lsls	r1, r2, #28
 800a94a:	bf44      	itt	mi
 800a94c:	232b      	movmi	r3, #43	@ 0x2b
 800a94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a952:	f89a 3000 	ldrb.w	r3, [sl]
 800a956:	2b2a      	cmp	r3, #42	@ 0x2a
 800a958:	d015      	beq.n	800a986 <_svfiprintf_r+0xfa>
 800a95a:	9a07      	ldr	r2, [sp, #28]
 800a95c:	4654      	mov	r4, sl
 800a95e:	2000      	movs	r0, #0
 800a960:	f04f 0c0a 	mov.w	ip, #10
 800a964:	4621      	mov	r1, r4
 800a966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a96a:	3b30      	subs	r3, #48	@ 0x30
 800a96c:	2b09      	cmp	r3, #9
 800a96e:	d94b      	bls.n	800aa08 <_svfiprintf_r+0x17c>
 800a970:	b1b0      	cbz	r0, 800a9a0 <_svfiprintf_r+0x114>
 800a972:	9207      	str	r2, [sp, #28]
 800a974:	e014      	b.n	800a9a0 <_svfiprintf_r+0x114>
 800a976:	eba0 0308 	sub.w	r3, r0, r8
 800a97a:	fa09 f303 	lsl.w	r3, r9, r3
 800a97e:	4313      	orrs	r3, r2
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	46a2      	mov	sl, r4
 800a984:	e7d2      	b.n	800a92c <_svfiprintf_r+0xa0>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	1d19      	adds	r1, r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	9103      	str	r1, [sp, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfbb      	ittet	lt
 800a992:	425b      	neglt	r3, r3
 800a994:	f042 0202 	orrlt.w	r2, r2, #2
 800a998:	9307      	strge	r3, [sp, #28]
 800a99a:	9307      	strlt	r3, [sp, #28]
 800a99c:	bfb8      	it	lt
 800a99e:	9204      	strlt	r2, [sp, #16]
 800a9a0:	7823      	ldrb	r3, [r4, #0]
 800a9a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9a4:	d10a      	bne.n	800a9bc <_svfiprintf_r+0x130>
 800a9a6:	7863      	ldrb	r3, [r4, #1]
 800a9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9aa:	d132      	bne.n	800aa12 <_svfiprintf_r+0x186>
 800a9ac:	9b03      	ldr	r3, [sp, #12]
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	9203      	str	r2, [sp, #12]
 800a9b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9b8:	3402      	adds	r4, #2
 800a9ba:	9305      	str	r3, [sp, #20]
 800a9bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa80 <_svfiprintf_r+0x1f4>
 800a9c0:	7821      	ldrb	r1, [r4, #0]
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	4650      	mov	r0, sl
 800a9c6:	f7f5 fc0b 	bl	80001e0 <memchr>
 800a9ca:	b138      	cbz	r0, 800a9dc <_svfiprintf_r+0x150>
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	eba0 000a 	sub.w	r0, r0, sl
 800a9d2:	2240      	movs	r2, #64	@ 0x40
 800a9d4:	4082      	lsls	r2, r0
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	3401      	adds	r4, #1
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e0:	4824      	ldr	r0, [pc, #144]	@ (800aa74 <_svfiprintf_r+0x1e8>)
 800a9e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9e6:	2206      	movs	r2, #6
 800a9e8:	f7f5 fbfa 	bl	80001e0 <memchr>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d036      	beq.n	800aa5e <_svfiprintf_r+0x1d2>
 800a9f0:	4b21      	ldr	r3, [pc, #132]	@ (800aa78 <_svfiprintf_r+0x1ec>)
 800a9f2:	bb1b      	cbnz	r3, 800aa3c <_svfiprintf_r+0x1b0>
 800a9f4:	9b03      	ldr	r3, [sp, #12]
 800a9f6:	3307      	adds	r3, #7
 800a9f8:	f023 0307 	bic.w	r3, r3, #7
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	9303      	str	r3, [sp, #12]
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	4433      	add	r3, r6
 800aa04:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa06:	e76a      	b.n	800a8de <_svfiprintf_r+0x52>
 800aa08:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	2001      	movs	r0, #1
 800aa10:	e7a8      	b.n	800a964 <_svfiprintf_r+0xd8>
 800aa12:	2300      	movs	r3, #0
 800aa14:	3401      	adds	r4, #1
 800aa16:	9305      	str	r3, [sp, #20]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	f04f 0c0a 	mov.w	ip, #10
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa24:	3a30      	subs	r2, #48	@ 0x30
 800aa26:	2a09      	cmp	r2, #9
 800aa28:	d903      	bls.n	800aa32 <_svfiprintf_r+0x1a6>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0c6      	beq.n	800a9bc <_svfiprintf_r+0x130>
 800aa2e:	9105      	str	r1, [sp, #20]
 800aa30:	e7c4      	b.n	800a9bc <_svfiprintf_r+0x130>
 800aa32:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa36:	4604      	mov	r4, r0
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e7f0      	b.n	800aa1e <_svfiprintf_r+0x192>
 800aa3c:	ab03      	add	r3, sp, #12
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	462a      	mov	r2, r5
 800aa42:	4b0e      	ldr	r3, [pc, #56]	@ (800aa7c <_svfiprintf_r+0x1f0>)
 800aa44:	a904      	add	r1, sp, #16
 800aa46:	4638      	mov	r0, r7
 800aa48:	f7fc fc90 	bl	800736c <_printf_float>
 800aa4c:	1c42      	adds	r2, r0, #1
 800aa4e:	4606      	mov	r6, r0
 800aa50:	d1d6      	bne.n	800aa00 <_svfiprintf_r+0x174>
 800aa52:	89ab      	ldrh	r3, [r5, #12]
 800aa54:	065b      	lsls	r3, r3, #25
 800aa56:	f53f af2d 	bmi.w	800a8b4 <_svfiprintf_r+0x28>
 800aa5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa5c:	e72c      	b.n	800a8b8 <_svfiprintf_r+0x2c>
 800aa5e:	ab03      	add	r3, sp, #12
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	462a      	mov	r2, r5
 800aa64:	4b05      	ldr	r3, [pc, #20]	@ (800aa7c <_svfiprintf_r+0x1f0>)
 800aa66:	a904      	add	r1, sp, #16
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f7fc ff17 	bl	800789c <_printf_i>
 800aa6e:	e7ed      	b.n	800aa4c <_svfiprintf_r+0x1c0>
 800aa70:	0800ca81 	.word	0x0800ca81
 800aa74:	0800ca8b 	.word	0x0800ca8b
 800aa78:	0800736d 	.word	0x0800736d
 800aa7c:	0800a7d5 	.word	0x0800a7d5
 800aa80:	0800ca87 	.word	0x0800ca87

0800aa84 <_sungetc_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	1c4b      	adds	r3, r1, #1
 800aa88:	4614      	mov	r4, r2
 800aa8a:	d103      	bne.n	800aa94 <_sungetc_r+0x10>
 800aa8c:	f04f 35ff 	mov.w	r5, #4294967295
 800aa90:	4628      	mov	r0, r5
 800aa92:	bd38      	pop	{r3, r4, r5, pc}
 800aa94:	8993      	ldrh	r3, [r2, #12]
 800aa96:	f023 0320 	bic.w	r3, r3, #32
 800aa9a:	8193      	strh	r3, [r2, #12]
 800aa9c:	6853      	ldr	r3, [r2, #4]
 800aa9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800aaa0:	b2cd      	uxtb	r5, r1
 800aaa2:	b18a      	cbz	r2, 800aac8 <_sungetc_r+0x44>
 800aaa4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	dd08      	ble.n	800aabc <_sungetc_r+0x38>
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	1e5a      	subs	r2, r3, #1
 800aaae:	6022      	str	r2, [r4, #0]
 800aab0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aab4:	6863      	ldr	r3, [r4, #4]
 800aab6:	3301      	adds	r3, #1
 800aab8:	6063      	str	r3, [r4, #4]
 800aaba:	e7e9      	b.n	800aa90 <_sungetc_r+0xc>
 800aabc:	4621      	mov	r1, r4
 800aabe:	f000 fbe0 	bl	800b282 <__submore>
 800aac2:	2800      	cmp	r0, #0
 800aac4:	d0f1      	beq.n	800aaaa <_sungetc_r+0x26>
 800aac6:	e7e1      	b.n	800aa8c <_sungetc_r+0x8>
 800aac8:	6921      	ldr	r1, [r4, #16]
 800aaca:	6822      	ldr	r2, [r4, #0]
 800aacc:	b141      	cbz	r1, 800aae0 <_sungetc_r+0x5c>
 800aace:	4291      	cmp	r1, r2
 800aad0:	d206      	bcs.n	800aae0 <_sungetc_r+0x5c>
 800aad2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800aad6:	42a9      	cmp	r1, r5
 800aad8:	d102      	bne.n	800aae0 <_sungetc_r+0x5c>
 800aada:	3a01      	subs	r2, #1
 800aadc:	6022      	str	r2, [r4, #0]
 800aade:	e7ea      	b.n	800aab6 <_sungetc_r+0x32>
 800aae0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800aae4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aae8:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaea:	2303      	movs	r3, #3
 800aaec:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aaee:	4623      	mov	r3, r4
 800aaf0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800aaf4:	6023      	str	r3, [r4, #0]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e7de      	b.n	800aab8 <_sungetc_r+0x34>

0800aafa <__ssrefill_r>:
 800aafa:	b510      	push	{r4, lr}
 800aafc:	460c      	mov	r4, r1
 800aafe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ab00:	b169      	cbz	r1, 800ab1e <__ssrefill_r+0x24>
 800ab02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab06:	4299      	cmp	r1, r3
 800ab08:	d001      	beq.n	800ab0e <__ssrefill_r+0x14>
 800ab0a:	f7fe fa2d 	bl	8008f68 <_free_r>
 800ab0e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab10:	6063      	str	r3, [r4, #4]
 800ab12:	2000      	movs	r0, #0
 800ab14:	6360      	str	r0, [r4, #52]	@ 0x34
 800ab16:	b113      	cbz	r3, 800ab1e <__ssrefill_r+0x24>
 800ab18:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	bd10      	pop	{r4, pc}
 800ab1e:	6923      	ldr	r3, [r4, #16]
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	2300      	movs	r3, #0
 800ab24:	6063      	str	r3, [r4, #4]
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	f043 0320 	orr.w	r3, r3, #32
 800ab2c:	81a3      	strh	r3, [r4, #12]
 800ab2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab32:	e7f3      	b.n	800ab1c <__ssrefill_r+0x22>

0800ab34 <__ssvfiscanf_r>:
 800ab34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab38:	460c      	mov	r4, r1
 800ab3a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800ab3e:	2100      	movs	r1, #0
 800ab40:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800ab44:	49a5      	ldr	r1, [pc, #660]	@ (800addc <__ssvfiscanf_r+0x2a8>)
 800ab46:	91a0      	str	r1, [sp, #640]	@ 0x280
 800ab48:	f10d 0804 	add.w	r8, sp, #4
 800ab4c:	49a4      	ldr	r1, [pc, #656]	@ (800ade0 <__ssvfiscanf_r+0x2ac>)
 800ab4e:	4fa5      	ldr	r7, [pc, #660]	@ (800ade4 <__ssvfiscanf_r+0x2b0>)
 800ab50:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800ab54:	4606      	mov	r6, r0
 800ab56:	91a1      	str	r1, [sp, #644]	@ 0x284
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	7813      	ldrb	r3, [r2, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f000 8158 	beq.w	800ae12 <__ssvfiscanf_r+0x2de>
 800ab62:	5cf9      	ldrb	r1, [r7, r3]
 800ab64:	f011 0108 	ands.w	r1, r1, #8
 800ab68:	f102 0501 	add.w	r5, r2, #1
 800ab6c:	d019      	beq.n	800aba2 <__ssvfiscanf_r+0x6e>
 800ab6e:	6863      	ldr	r3, [r4, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	dd0f      	ble.n	800ab94 <__ssvfiscanf_r+0x60>
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	781a      	ldrb	r2, [r3, #0]
 800ab78:	5cba      	ldrb	r2, [r7, r2]
 800ab7a:	0712      	lsls	r2, r2, #28
 800ab7c:	d401      	bmi.n	800ab82 <__ssvfiscanf_r+0x4e>
 800ab7e:	462a      	mov	r2, r5
 800ab80:	e7eb      	b.n	800ab5a <__ssvfiscanf_r+0x26>
 800ab82:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ab84:	3201      	adds	r2, #1
 800ab86:	9245      	str	r2, [sp, #276]	@ 0x114
 800ab88:	6862      	ldr	r2, [r4, #4]
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	3a01      	subs	r2, #1
 800ab8e:	6062      	str	r2, [r4, #4]
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	e7ec      	b.n	800ab6e <__ssvfiscanf_r+0x3a>
 800ab94:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ab96:	4621      	mov	r1, r4
 800ab98:	4630      	mov	r0, r6
 800ab9a:	4798      	blx	r3
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d0e9      	beq.n	800ab74 <__ssvfiscanf_r+0x40>
 800aba0:	e7ed      	b.n	800ab7e <__ssvfiscanf_r+0x4a>
 800aba2:	2b25      	cmp	r3, #37	@ 0x25
 800aba4:	d012      	beq.n	800abcc <__ssvfiscanf_r+0x98>
 800aba6:	4699      	mov	r9, r3
 800aba8:	6863      	ldr	r3, [r4, #4]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f340 8093 	ble.w	800acd6 <__ssvfiscanf_r+0x1a2>
 800abb0:	6822      	ldr	r2, [r4, #0]
 800abb2:	7813      	ldrb	r3, [r2, #0]
 800abb4:	454b      	cmp	r3, r9
 800abb6:	f040 812c 	bne.w	800ae12 <__ssvfiscanf_r+0x2de>
 800abba:	6863      	ldr	r3, [r4, #4]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	6063      	str	r3, [r4, #4]
 800abc0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800abc2:	3201      	adds	r2, #1
 800abc4:	3301      	adds	r3, #1
 800abc6:	6022      	str	r2, [r4, #0]
 800abc8:	9345      	str	r3, [sp, #276]	@ 0x114
 800abca:	e7d8      	b.n	800ab7e <__ssvfiscanf_r+0x4a>
 800abcc:	9141      	str	r1, [sp, #260]	@ 0x104
 800abce:	9143      	str	r1, [sp, #268]	@ 0x10c
 800abd0:	7853      	ldrb	r3, [r2, #1]
 800abd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800abd4:	bf02      	ittt	eq
 800abd6:	2310      	moveq	r3, #16
 800abd8:	1c95      	addeq	r5, r2, #2
 800abda:	9341      	streq	r3, [sp, #260]	@ 0x104
 800abdc:	220a      	movs	r2, #10
 800abde:	46a9      	mov	r9, r5
 800abe0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800abe4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800abe8:	2b09      	cmp	r3, #9
 800abea:	d91e      	bls.n	800ac2a <__ssvfiscanf_r+0xf6>
 800abec:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800ade8 <__ssvfiscanf_r+0x2b4>
 800abf0:	2203      	movs	r2, #3
 800abf2:	4650      	mov	r0, sl
 800abf4:	f7f5 faf4 	bl	80001e0 <memchr>
 800abf8:	b138      	cbz	r0, 800ac0a <__ssvfiscanf_r+0xd6>
 800abfa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800abfc:	eba0 000a 	sub.w	r0, r0, sl
 800ac00:	2301      	movs	r3, #1
 800ac02:	4083      	lsls	r3, r0
 800ac04:	4313      	orrs	r3, r2
 800ac06:	9341      	str	r3, [sp, #260]	@ 0x104
 800ac08:	464d      	mov	r5, r9
 800ac0a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ac0e:	2b78      	cmp	r3, #120	@ 0x78
 800ac10:	d806      	bhi.n	800ac20 <__ssvfiscanf_r+0xec>
 800ac12:	2b57      	cmp	r3, #87	@ 0x57
 800ac14:	d810      	bhi.n	800ac38 <__ssvfiscanf_r+0x104>
 800ac16:	2b25      	cmp	r3, #37	@ 0x25
 800ac18:	d0c5      	beq.n	800aba6 <__ssvfiscanf_r+0x72>
 800ac1a:	d857      	bhi.n	800accc <__ssvfiscanf_r+0x198>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d065      	beq.n	800acec <__ssvfiscanf_r+0x1b8>
 800ac20:	2303      	movs	r3, #3
 800ac22:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ac24:	230a      	movs	r3, #10
 800ac26:	9342      	str	r3, [sp, #264]	@ 0x108
 800ac28:	e078      	b.n	800ad1c <__ssvfiscanf_r+0x1e8>
 800ac2a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800ac2c:	fb02 1103 	mla	r1, r2, r3, r1
 800ac30:	3930      	subs	r1, #48	@ 0x30
 800ac32:	9143      	str	r1, [sp, #268]	@ 0x10c
 800ac34:	464d      	mov	r5, r9
 800ac36:	e7d2      	b.n	800abde <__ssvfiscanf_r+0xaa>
 800ac38:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800ac3c:	2a20      	cmp	r2, #32
 800ac3e:	d8ef      	bhi.n	800ac20 <__ssvfiscanf_r+0xec>
 800ac40:	a101      	add	r1, pc, #4	@ (adr r1, 800ac48 <__ssvfiscanf_r+0x114>)
 800ac42:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac46:	bf00      	nop
 800ac48:	0800acfb 	.word	0x0800acfb
 800ac4c:	0800ac21 	.word	0x0800ac21
 800ac50:	0800ac21 	.word	0x0800ac21
 800ac54:	0800ad55 	.word	0x0800ad55
 800ac58:	0800ac21 	.word	0x0800ac21
 800ac5c:	0800ac21 	.word	0x0800ac21
 800ac60:	0800ac21 	.word	0x0800ac21
 800ac64:	0800ac21 	.word	0x0800ac21
 800ac68:	0800ac21 	.word	0x0800ac21
 800ac6c:	0800ac21 	.word	0x0800ac21
 800ac70:	0800ac21 	.word	0x0800ac21
 800ac74:	0800ad6b 	.word	0x0800ad6b
 800ac78:	0800ad51 	.word	0x0800ad51
 800ac7c:	0800acd3 	.word	0x0800acd3
 800ac80:	0800acd3 	.word	0x0800acd3
 800ac84:	0800acd3 	.word	0x0800acd3
 800ac88:	0800ac21 	.word	0x0800ac21
 800ac8c:	0800ad0d 	.word	0x0800ad0d
 800ac90:	0800ac21 	.word	0x0800ac21
 800ac94:	0800ac21 	.word	0x0800ac21
 800ac98:	0800ac21 	.word	0x0800ac21
 800ac9c:	0800ac21 	.word	0x0800ac21
 800aca0:	0800ad7b 	.word	0x0800ad7b
 800aca4:	0800ad15 	.word	0x0800ad15
 800aca8:	0800acf3 	.word	0x0800acf3
 800acac:	0800ac21 	.word	0x0800ac21
 800acb0:	0800ac21 	.word	0x0800ac21
 800acb4:	0800ad77 	.word	0x0800ad77
 800acb8:	0800ac21 	.word	0x0800ac21
 800acbc:	0800ad51 	.word	0x0800ad51
 800acc0:	0800ac21 	.word	0x0800ac21
 800acc4:	0800ac21 	.word	0x0800ac21
 800acc8:	0800acfb 	.word	0x0800acfb
 800accc:	3b45      	subs	r3, #69	@ 0x45
 800acce:	2b02      	cmp	r3, #2
 800acd0:	d8a6      	bhi.n	800ac20 <__ssvfiscanf_r+0xec>
 800acd2:	2305      	movs	r3, #5
 800acd4:	e021      	b.n	800ad1a <__ssvfiscanf_r+0x1e6>
 800acd6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800acd8:	4621      	mov	r1, r4
 800acda:	4630      	mov	r0, r6
 800acdc:	4798      	blx	r3
 800acde:	2800      	cmp	r0, #0
 800ace0:	f43f af66 	beq.w	800abb0 <__ssvfiscanf_r+0x7c>
 800ace4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ace6:	2800      	cmp	r0, #0
 800ace8:	f040 808b 	bne.w	800ae02 <__ssvfiscanf_r+0x2ce>
 800acec:	f04f 30ff 	mov.w	r0, #4294967295
 800acf0:	e08b      	b.n	800ae0a <__ssvfiscanf_r+0x2d6>
 800acf2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800acf4:	f042 0220 	orr.w	r2, r2, #32
 800acf8:	9241      	str	r2, [sp, #260]	@ 0x104
 800acfa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800acfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad00:	9241      	str	r2, [sp, #260]	@ 0x104
 800ad02:	2210      	movs	r2, #16
 800ad04:	2b6e      	cmp	r3, #110	@ 0x6e
 800ad06:	9242      	str	r2, [sp, #264]	@ 0x108
 800ad08:	d902      	bls.n	800ad10 <__ssvfiscanf_r+0x1dc>
 800ad0a:	e005      	b.n	800ad18 <__ssvfiscanf_r+0x1e4>
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ad10:	2303      	movs	r3, #3
 800ad12:	e002      	b.n	800ad1a <__ssvfiscanf_r+0x1e6>
 800ad14:	2308      	movs	r3, #8
 800ad16:	9342      	str	r3, [sp, #264]	@ 0x108
 800ad18:	2304      	movs	r3, #4
 800ad1a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ad1c:	6863      	ldr	r3, [r4, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	dd39      	ble.n	800ad96 <__ssvfiscanf_r+0x262>
 800ad22:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ad24:	0659      	lsls	r1, r3, #25
 800ad26:	d404      	bmi.n	800ad32 <__ssvfiscanf_r+0x1fe>
 800ad28:	6823      	ldr	r3, [r4, #0]
 800ad2a:	781a      	ldrb	r2, [r3, #0]
 800ad2c:	5cba      	ldrb	r2, [r7, r2]
 800ad2e:	0712      	lsls	r2, r2, #28
 800ad30:	d438      	bmi.n	800ada4 <__ssvfiscanf_r+0x270>
 800ad32:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	dc47      	bgt.n	800adc8 <__ssvfiscanf_r+0x294>
 800ad38:	466b      	mov	r3, sp
 800ad3a:	4622      	mov	r2, r4
 800ad3c:	a941      	add	r1, sp, #260	@ 0x104
 800ad3e:	4630      	mov	r0, r6
 800ad40:	f000 f86c 	bl	800ae1c <_scanf_chars>
 800ad44:	2801      	cmp	r0, #1
 800ad46:	d064      	beq.n	800ae12 <__ssvfiscanf_r+0x2de>
 800ad48:	2802      	cmp	r0, #2
 800ad4a:	f47f af18 	bne.w	800ab7e <__ssvfiscanf_r+0x4a>
 800ad4e:	e7c9      	b.n	800ace4 <__ssvfiscanf_r+0x1b0>
 800ad50:	220a      	movs	r2, #10
 800ad52:	e7d7      	b.n	800ad04 <__ssvfiscanf_r+0x1d0>
 800ad54:	4629      	mov	r1, r5
 800ad56:	4640      	mov	r0, r8
 800ad58:	f000 fa5a 	bl	800b210 <__sccl>
 800ad5c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ad5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad62:	9341      	str	r3, [sp, #260]	@ 0x104
 800ad64:	4605      	mov	r5, r0
 800ad66:	2301      	movs	r3, #1
 800ad68:	e7d7      	b.n	800ad1a <__ssvfiscanf_r+0x1e6>
 800ad6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ad6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad70:	9341      	str	r3, [sp, #260]	@ 0x104
 800ad72:	2300      	movs	r3, #0
 800ad74:	e7d1      	b.n	800ad1a <__ssvfiscanf_r+0x1e6>
 800ad76:	2302      	movs	r3, #2
 800ad78:	e7cf      	b.n	800ad1a <__ssvfiscanf_r+0x1e6>
 800ad7a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800ad7c:	06c3      	lsls	r3, r0, #27
 800ad7e:	f53f aefe 	bmi.w	800ab7e <__ssvfiscanf_r+0x4a>
 800ad82:	9b00      	ldr	r3, [sp, #0]
 800ad84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ad86:	1d19      	adds	r1, r3, #4
 800ad88:	9100      	str	r1, [sp, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	07c0      	lsls	r0, r0, #31
 800ad8e:	bf4c      	ite	mi
 800ad90:	801a      	strhmi	r2, [r3, #0]
 800ad92:	601a      	strpl	r2, [r3, #0]
 800ad94:	e6f3      	b.n	800ab7e <__ssvfiscanf_r+0x4a>
 800ad96:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4798      	blx	r3
 800ad9e:	2800      	cmp	r0, #0
 800ada0:	d0bf      	beq.n	800ad22 <__ssvfiscanf_r+0x1ee>
 800ada2:	e79f      	b.n	800ace4 <__ssvfiscanf_r+0x1b0>
 800ada4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ada6:	3201      	adds	r2, #1
 800ada8:	9245      	str	r2, [sp, #276]	@ 0x114
 800adaa:	6862      	ldr	r2, [r4, #4]
 800adac:	3a01      	subs	r2, #1
 800adae:	2a00      	cmp	r2, #0
 800adb0:	6062      	str	r2, [r4, #4]
 800adb2:	dd02      	ble.n	800adba <__ssvfiscanf_r+0x286>
 800adb4:	3301      	adds	r3, #1
 800adb6:	6023      	str	r3, [r4, #0]
 800adb8:	e7b6      	b.n	800ad28 <__ssvfiscanf_r+0x1f4>
 800adba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800adbc:	4621      	mov	r1, r4
 800adbe:	4630      	mov	r0, r6
 800adc0:	4798      	blx	r3
 800adc2:	2800      	cmp	r0, #0
 800adc4:	d0b0      	beq.n	800ad28 <__ssvfiscanf_r+0x1f4>
 800adc6:	e78d      	b.n	800ace4 <__ssvfiscanf_r+0x1b0>
 800adc8:	2b04      	cmp	r3, #4
 800adca:	dc0f      	bgt.n	800adec <__ssvfiscanf_r+0x2b8>
 800adcc:	466b      	mov	r3, sp
 800adce:	4622      	mov	r2, r4
 800add0:	a941      	add	r1, sp, #260	@ 0x104
 800add2:	4630      	mov	r0, r6
 800add4:	f000 f87c 	bl	800aed0 <_scanf_i>
 800add8:	e7b4      	b.n	800ad44 <__ssvfiscanf_r+0x210>
 800adda:	bf00      	nop
 800addc:	0800aa85 	.word	0x0800aa85
 800ade0:	0800aafb 	.word	0x0800aafb
 800ade4:	0800c981 	.word	0x0800c981
 800ade8:	0800ca87 	.word	0x0800ca87
 800adec:	4b0a      	ldr	r3, [pc, #40]	@ (800ae18 <__ssvfiscanf_r+0x2e4>)
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f43f aec5 	beq.w	800ab7e <__ssvfiscanf_r+0x4a>
 800adf4:	466b      	mov	r3, sp
 800adf6:	4622      	mov	r2, r4
 800adf8:	a941      	add	r1, sp, #260	@ 0x104
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7fc fe6e 	bl	8007adc <_scanf_float>
 800ae00:	e7a0      	b.n	800ad44 <__ssvfiscanf_r+0x210>
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	065b      	lsls	r3, r3, #25
 800ae06:	f53f af71 	bmi.w	800acec <__ssvfiscanf_r+0x1b8>
 800ae0a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ae0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae12:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ae14:	e7f9      	b.n	800ae0a <__ssvfiscanf_r+0x2d6>
 800ae16:	bf00      	nop
 800ae18:	08007add 	.word	0x08007add

0800ae1c <_scanf_chars>:
 800ae1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae20:	4615      	mov	r5, r2
 800ae22:	688a      	ldr	r2, [r1, #8]
 800ae24:	4680      	mov	r8, r0
 800ae26:	460c      	mov	r4, r1
 800ae28:	b932      	cbnz	r2, 800ae38 <_scanf_chars+0x1c>
 800ae2a:	698a      	ldr	r2, [r1, #24]
 800ae2c:	2a00      	cmp	r2, #0
 800ae2e:	bf14      	ite	ne
 800ae30:	f04f 32ff 	movne.w	r2, #4294967295
 800ae34:	2201      	moveq	r2, #1
 800ae36:	608a      	str	r2, [r1, #8]
 800ae38:	6822      	ldr	r2, [r4, #0]
 800ae3a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800aecc <_scanf_chars+0xb0>
 800ae3e:	06d1      	lsls	r1, r2, #27
 800ae40:	bf5f      	itttt	pl
 800ae42:	681a      	ldrpl	r2, [r3, #0]
 800ae44:	1d11      	addpl	r1, r2, #4
 800ae46:	6019      	strpl	r1, [r3, #0]
 800ae48:	6816      	ldrpl	r6, [r2, #0]
 800ae4a:	2700      	movs	r7, #0
 800ae4c:	69a0      	ldr	r0, [r4, #24]
 800ae4e:	b188      	cbz	r0, 800ae74 <_scanf_chars+0x58>
 800ae50:	2801      	cmp	r0, #1
 800ae52:	d107      	bne.n	800ae64 <_scanf_chars+0x48>
 800ae54:	682b      	ldr	r3, [r5, #0]
 800ae56:	781a      	ldrb	r2, [r3, #0]
 800ae58:	6963      	ldr	r3, [r4, #20]
 800ae5a:	5c9b      	ldrb	r3, [r3, r2]
 800ae5c:	b953      	cbnz	r3, 800ae74 <_scanf_chars+0x58>
 800ae5e:	2f00      	cmp	r7, #0
 800ae60:	d031      	beq.n	800aec6 <_scanf_chars+0xaa>
 800ae62:	e022      	b.n	800aeaa <_scanf_chars+0x8e>
 800ae64:	2802      	cmp	r0, #2
 800ae66:	d120      	bne.n	800aeaa <_scanf_chars+0x8e>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ae70:	071b      	lsls	r3, r3, #28
 800ae72:	d41a      	bmi.n	800aeaa <_scanf_chars+0x8e>
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	06da      	lsls	r2, r3, #27
 800ae78:	bf5e      	ittt	pl
 800ae7a:	682b      	ldrpl	r3, [r5, #0]
 800ae7c:	781b      	ldrbpl	r3, [r3, #0]
 800ae7e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ae82:	682a      	ldr	r2, [r5, #0]
 800ae84:	686b      	ldr	r3, [r5, #4]
 800ae86:	3201      	adds	r2, #1
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	68a2      	ldr	r2, [r4, #8]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	3a01      	subs	r2, #1
 800ae90:	606b      	str	r3, [r5, #4]
 800ae92:	3701      	adds	r7, #1
 800ae94:	60a2      	str	r2, [r4, #8]
 800ae96:	b142      	cbz	r2, 800aeaa <_scanf_chars+0x8e>
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dcd7      	bgt.n	800ae4c <_scanf_chars+0x30>
 800ae9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aea0:	4629      	mov	r1, r5
 800aea2:	4640      	mov	r0, r8
 800aea4:	4798      	blx	r3
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d0d0      	beq.n	800ae4c <_scanf_chars+0x30>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	f013 0310 	ands.w	r3, r3, #16
 800aeb0:	d105      	bne.n	800aebe <_scanf_chars+0xa2>
 800aeb2:	68e2      	ldr	r2, [r4, #12]
 800aeb4:	3201      	adds	r2, #1
 800aeb6:	60e2      	str	r2, [r4, #12]
 800aeb8:	69a2      	ldr	r2, [r4, #24]
 800aeba:	b102      	cbz	r2, 800aebe <_scanf_chars+0xa2>
 800aebc:	7033      	strb	r3, [r6, #0]
 800aebe:	6923      	ldr	r3, [r4, #16]
 800aec0:	443b      	add	r3, r7
 800aec2:	6123      	str	r3, [r4, #16]
 800aec4:	2000      	movs	r0, #0
 800aec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeca:	bf00      	nop
 800aecc:	0800c981 	.word	0x0800c981

0800aed0 <_scanf_i>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	4698      	mov	r8, r3
 800aed6:	4b74      	ldr	r3, [pc, #464]	@ (800b0a8 <_scanf_i+0x1d8>)
 800aed8:	460c      	mov	r4, r1
 800aeda:	4682      	mov	sl, r0
 800aedc:	4616      	mov	r6, r2
 800aede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aee2:	b087      	sub	sp, #28
 800aee4:	ab03      	add	r3, sp, #12
 800aee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aeea:	4b70      	ldr	r3, [pc, #448]	@ (800b0ac <_scanf_i+0x1dc>)
 800aeec:	69a1      	ldr	r1, [r4, #24]
 800aeee:	4a70      	ldr	r2, [pc, #448]	@ (800b0b0 <_scanf_i+0x1e0>)
 800aef0:	2903      	cmp	r1, #3
 800aef2:	bf08      	it	eq
 800aef4:	461a      	moveq	r2, r3
 800aef6:	68a3      	ldr	r3, [r4, #8]
 800aef8:	9201      	str	r2, [sp, #4]
 800aefa:	1e5a      	subs	r2, r3, #1
 800aefc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800af00:	bf88      	it	hi
 800af02:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800af06:	4627      	mov	r7, r4
 800af08:	bf82      	ittt	hi
 800af0a:	eb03 0905 	addhi.w	r9, r3, r5
 800af0e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800af12:	60a3      	strhi	r3, [r4, #8]
 800af14:	f857 3b1c 	ldr.w	r3, [r7], #28
 800af18:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800af1c:	bf98      	it	ls
 800af1e:	f04f 0900 	movls.w	r9, #0
 800af22:	6023      	str	r3, [r4, #0]
 800af24:	463d      	mov	r5, r7
 800af26:	f04f 0b00 	mov.w	fp, #0
 800af2a:	6831      	ldr	r1, [r6, #0]
 800af2c:	ab03      	add	r3, sp, #12
 800af2e:	7809      	ldrb	r1, [r1, #0]
 800af30:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800af34:	2202      	movs	r2, #2
 800af36:	f7f5 f953 	bl	80001e0 <memchr>
 800af3a:	b328      	cbz	r0, 800af88 <_scanf_i+0xb8>
 800af3c:	f1bb 0f01 	cmp.w	fp, #1
 800af40:	d159      	bne.n	800aff6 <_scanf_i+0x126>
 800af42:	6862      	ldr	r2, [r4, #4]
 800af44:	b92a      	cbnz	r2, 800af52 <_scanf_i+0x82>
 800af46:	6822      	ldr	r2, [r4, #0]
 800af48:	2108      	movs	r1, #8
 800af4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af4e:	6061      	str	r1, [r4, #4]
 800af50:	6022      	str	r2, [r4, #0]
 800af52:	6822      	ldr	r2, [r4, #0]
 800af54:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800af58:	6022      	str	r2, [r4, #0]
 800af5a:	68a2      	ldr	r2, [r4, #8]
 800af5c:	1e51      	subs	r1, r2, #1
 800af5e:	60a1      	str	r1, [r4, #8]
 800af60:	b192      	cbz	r2, 800af88 <_scanf_i+0xb8>
 800af62:	6832      	ldr	r2, [r6, #0]
 800af64:	1c51      	adds	r1, r2, #1
 800af66:	6031      	str	r1, [r6, #0]
 800af68:	7812      	ldrb	r2, [r2, #0]
 800af6a:	f805 2b01 	strb.w	r2, [r5], #1
 800af6e:	6872      	ldr	r2, [r6, #4]
 800af70:	3a01      	subs	r2, #1
 800af72:	2a00      	cmp	r2, #0
 800af74:	6072      	str	r2, [r6, #4]
 800af76:	dc07      	bgt.n	800af88 <_scanf_i+0xb8>
 800af78:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800af7c:	4631      	mov	r1, r6
 800af7e:	4650      	mov	r0, sl
 800af80:	4790      	blx	r2
 800af82:	2800      	cmp	r0, #0
 800af84:	f040 8085 	bne.w	800b092 <_scanf_i+0x1c2>
 800af88:	f10b 0b01 	add.w	fp, fp, #1
 800af8c:	f1bb 0f03 	cmp.w	fp, #3
 800af90:	d1cb      	bne.n	800af2a <_scanf_i+0x5a>
 800af92:	6863      	ldr	r3, [r4, #4]
 800af94:	b90b      	cbnz	r3, 800af9a <_scanf_i+0xca>
 800af96:	230a      	movs	r3, #10
 800af98:	6063      	str	r3, [r4, #4]
 800af9a:	6863      	ldr	r3, [r4, #4]
 800af9c:	4945      	ldr	r1, [pc, #276]	@ (800b0b4 <_scanf_i+0x1e4>)
 800af9e:	6960      	ldr	r0, [r4, #20]
 800afa0:	1ac9      	subs	r1, r1, r3
 800afa2:	f000 f935 	bl	800b210 <__sccl>
 800afa6:	f04f 0b00 	mov.w	fp, #0
 800afaa:	68a3      	ldr	r3, [r4, #8]
 800afac:	6822      	ldr	r2, [r4, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d03d      	beq.n	800b02e <_scanf_i+0x15e>
 800afb2:	6831      	ldr	r1, [r6, #0]
 800afb4:	6960      	ldr	r0, [r4, #20]
 800afb6:	f891 c000 	ldrb.w	ip, [r1]
 800afba:	f810 000c 	ldrb.w	r0, [r0, ip]
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d035      	beq.n	800b02e <_scanf_i+0x15e>
 800afc2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800afc6:	d124      	bne.n	800b012 <_scanf_i+0x142>
 800afc8:	0510      	lsls	r0, r2, #20
 800afca:	d522      	bpl.n	800b012 <_scanf_i+0x142>
 800afcc:	f10b 0b01 	add.w	fp, fp, #1
 800afd0:	f1b9 0f00 	cmp.w	r9, #0
 800afd4:	d003      	beq.n	800afde <_scanf_i+0x10e>
 800afd6:	3301      	adds	r3, #1
 800afd8:	f109 39ff 	add.w	r9, r9, #4294967295
 800afdc:	60a3      	str	r3, [r4, #8]
 800afde:	6873      	ldr	r3, [r6, #4]
 800afe0:	3b01      	subs	r3, #1
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	6073      	str	r3, [r6, #4]
 800afe6:	dd1b      	ble.n	800b020 <_scanf_i+0x150>
 800afe8:	6833      	ldr	r3, [r6, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	6033      	str	r3, [r6, #0]
 800afee:	68a3      	ldr	r3, [r4, #8]
 800aff0:	3b01      	subs	r3, #1
 800aff2:	60a3      	str	r3, [r4, #8]
 800aff4:	e7d9      	b.n	800afaa <_scanf_i+0xda>
 800aff6:	f1bb 0f02 	cmp.w	fp, #2
 800affa:	d1ae      	bne.n	800af5a <_scanf_i+0x8a>
 800affc:	6822      	ldr	r2, [r4, #0]
 800affe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b002:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b006:	d1bf      	bne.n	800af88 <_scanf_i+0xb8>
 800b008:	2110      	movs	r1, #16
 800b00a:	6061      	str	r1, [r4, #4]
 800b00c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b010:	e7a2      	b.n	800af58 <_scanf_i+0x88>
 800b012:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b016:	6022      	str	r2, [r4, #0]
 800b018:	780b      	ldrb	r3, [r1, #0]
 800b01a:	f805 3b01 	strb.w	r3, [r5], #1
 800b01e:	e7de      	b.n	800afde <_scanf_i+0x10e>
 800b020:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b024:	4631      	mov	r1, r6
 800b026:	4650      	mov	r0, sl
 800b028:	4798      	blx	r3
 800b02a:	2800      	cmp	r0, #0
 800b02c:	d0df      	beq.n	800afee <_scanf_i+0x11e>
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	05d9      	lsls	r1, r3, #23
 800b032:	d50d      	bpl.n	800b050 <_scanf_i+0x180>
 800b034:	42bd      	cmp	r5, r7
 800b036:	d909      	bls.n	800b04c <_scanf_i+0x17c>
 800b038:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b03c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b040:	4632      	mov	r2, r6
 800b042:	4650      	mov	r0, sl
 800b044:	4798      	blx	r3
 800b046:	f105 39ff 	add.w	r9, r5, #4294967295
 800b04a:	464d      	mov	r5, r9
 800b04c:	42bd      	cmp	r5, r7
 800b04e:	d028      	beq.n	800b0a2 <_scanf_i+0x1d2>
 800b050:	6822      	ldr	r2, [r4, #0]
 800b052:	f012 0210 	ands.w	r2, r2, #16
 800b056:	d113      	bne.n	800b080 <_scanf_i+0x1b0>
 800b058:	702a      	strb	r2, [r5, #0]
 800b05a:	6863      	ldr	r3, [r4, #4]
 800b05c:	9e01      	ldr	r6, [sp, #4]
 800b05e:	4639      	mov	r1, r7
 800b060:	4650      	mov	r0, sl
 800b062:	47b0      	blx	r6
 800b064:	f8d8 3000 	ldr.w	r3, [r8]
 800b068:	6821      	ldr	r1, [r4, #0]
 800b06a:	1d1a      	adds	r2, r3, #4
 800b06c:	f8c8 2000 	str.w	r2, [r8]
 800b070:	f011 0f20 	tst.w	r1, #32
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	d00f      	beq.n	800b098 <_scanf_i+0x1c8>
 800b078:	6018      	str	r0, [r3, #0]
 800b07a:	68e3      	ldr	r3, [r4, #12]
 800b07c:	3301      	adds	r3, #1
 800b07e:	60e3      	str	r3, [r4, #12]
 800b080:	6923      	ldr	r3, [r4, #16]
 800b082:	1bed      	subs	r5, r5, r7
 800b084:	445d      	add	r5, fp
 800b086:	442b      	add	r3, r5
 800b088:	6123      	str	r3, [r4, #16]
 800b08a:	2000      	movs	r0, #0
 800b08c:	b007      	add	sp, #28
 800b08e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b092:	f04f 0b00 	mov.w	fp, #0
 800b096:	e7ca      	b.n	800b02e <_scanf_i+0x15e>
 800b098:	07ca      	lsls	r2, r1, #31
 800b09a:	bf4c      	ite	mi
 800b09c:	8018      	strhmi	r0, [r3, #0]
 800b09e:	6018      	strpl	r0, [r3, #0]
 800b0a0:	e7eb      	b.n	800b07a <_scanf_i+0x1aa>
 800b0a2:	2001      	movs	r0, #1
 800b0a4:	e7f2      	b.n	800b08c <_scanf_i+0x1bc>
 800b0a6:	bf00      	nop
 800b0a8:	0800c6e4 	.word	0x0800c6e4
 800b0ac:	0800a7d1 	.word	0x0800a7d1
 800b0b0:	0800bbb5 	.word	0x0800bbb5
 800b0b4:	0800caa2 	.word	0x0800caa2

0800b0b8 <__sflush_r>:
 800b0b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c0:	0716      	lsls	r6, r2, #28
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	d454      	bmi.n	800b172 <__sflush_r+0xba>
 800b0c8:	684b      	ldr	r3, [r1, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	dc02      	bgt.n	800b0d4 <__sflush_r+0x1c>
 800b0ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	dd48      	ble.n	800b166 <__sflush_r+0xae>
 800b0d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0d6:	2e00      	cmp	r6, #0
 800b0d8:	d045      	beq.n	800b166 <__sflush_r+0xae>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0e0:	682f      	ldr	r7, [r5, #0]
 800b0e2:	6a21      	ldr	r1, [r4, #32]
 800b0e4:	602b      	str	r3, [r5, #0]
 800b0e6:	d030      	beq.n	800b14a <__sflush_r+0x92>
 800b0e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0ea:	89a3      	ldrh	r3, [r4, #12]
 800b0ec:	0759      	lsls	r1, r3, #29
 800b0ee:	d505      	bpl.n	800b0fc <__sflush_r+0x44>
 800b0f0:	6863      	ldr	r3, [r4, #4]
 800b0f2:	1ad2      	subs	r2, r2, r3
 800b0f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0f6:	b10b      	cbz	r3, 800b0fc <__sflush_r+0x44>
 800b0f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0fa:	1ad2      	subs	r2, r2, r3
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b100:	6a21      	ldr	r1, [r4, #32]
 800b102:	4628      	mov	r0, r5
 800b104:	47b0      	blx	r6
 800b106:	1c43      	adds	r3, r0, #1
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	d106      	bne.n	800b11a <__sflush_r+0x62>
 800b10c:	6829      	ldr	r1, [r5, #0]
 800b10e:	291d      	cmp	r1, #29
 800b110:	d82b      	bhi.n	800b16a <__sflush_r+0xb2>
 800b112:	4a2a      	ldr	r2, [pc, #168]	@ (800b1bc <__sflush_r+0x104>)
 800b114:	410a      	asrs	r2, r1
 800b116:	07d6      	lsls	r6, r2, #31
 800b118:	d427      	bmi.n	800b16a <__sflush_r+0xb2>
 800b11a:	2200      	movs	r2, #0
 800b11c:	6062      	str	r2, [r4, #4]
 800b11e:	04d9      	lsls	r1, r3, #19
 800b120:	6922      	ldr	r2, [r4, #16]
 800b122:	6022      	str	r2, [r4, #0]
 800b124:	d504      	bpl.n	800b130 <__sflush_r+0x78>
 800b126:	1c42      	adds	r2, r0, #1
 800b128:	d101      	bne.n	800b12e <__sflush_r+0x76>
 800b12a:	682b      	ldr	r3, [r5, #0]
 800b12c:	b903      	cbnz	r3, 800b130 <__sflush_r+0x78>
 800b12e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b132:	602f      	str	r7, [r5, #0]
 800b134:	b1b9      	cbz	r1, 800b166 <__sflush_r+0xae>
 800b136:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b13a:	4299      	cmp	r1, r3
 800b13c:	d002      	beq.n	800b144 <__sflush_r+0x8c>
 800b13e:	4628      	mov	r0, r5
 800b140:	f7fd ff12 	bl	8008f68 <_free_r>
 800b144:	2300      	movs	r3, #0
 800b146:	6363      	str	r3, [r4, #52]	@ 0x34
 800b148:	e00d      	b.n	800b166 <__sflush_r+0xae>
 800b14a:	2301      	movs	r3, #1
 800b14c:	4628      	mov	r0, r5
 800b14e:	47b0      	blx	r6
 800b150:	4602      	mov	r2, r0
 800b152:	1c50      	adds	r0, r2, #1
 800b154:	d1c9      	bne.n	800b0ea <__sflush_r+0x32>
 800b156:	682b      	ldr	r3, [r5, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d0c6      	beq.n	800b0ea <__sflush_r+0x32>
 800b15c:	2b1d      	cmp	r3, #29
 800b15e:	d001      	beq.n	800b164 <__sflush_r+0xac>
 800b160:	2b16      	cmp	r3, #22
 800b162:	d11e      	bne.n	800b1a2 <__sflush_r+0xea>
 800b164:	602f      	str	r7, [r5, #0]
 800b166:	2000      	movs	r0, #0
 800b168:	e022      	b.n	800b1b0 <__sflush_r+0xf8>
 800b16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b16e:	b21b      	sxth	r3, r3
 800b170:	e01b      	b.n	800b1aa <__sflush_r+0xf2>
 800b172:	690f      	ldr	r7, [r1, #16]
 800b174:	2f00      	cmp	r7, #0
 800b176:	d0f6      	beq.n	800b166 <__sflush_r+0xae>
 800b178:	0793      	lsls	r3, r2, #30
 800b17a:	680e      	ldr	r6, [r1, #0]
 800b17c:	bf08      	it	eq
 800b17e:	694b      	ldreq	r3, [r1, #20]
 800b180:	600f      	str	r7, [r1, #0]
 800b182:	bf18      	it	ne
 800b184:	2300      	movne	r3, #0
 800b186:	eba6 0807 	sub.w	r8, r6, r7
 800b18a:	608b      	str	r3, [r1, #8]
 800b18c:	f1b8 0f00 	cmp.w	r8, #0
 800b190:	dde9      	ble.n	800b166 <__sflush_r+0xae>
 800b192:	6a21      	ldr	r1, [r4, #32]
 800b194:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b196:	4643      	mov	r3, r8
 800b198:	463a      	mov	r2, r7
 800b19a:	4628      	mov	r0, r5
 800b19c:	47b0      	blx	r6
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	dc08      	bgt.n	800b1b4 <__sflush_r+0xfc>
 800b1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1aa:	81a3      	strh	r3, [r4, #12]
 800b1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1b4:	4407      	add	r7, r0
 800b1b6:	eba8 0800 	sub.w	r8, r8, r0
 800b1ba:	e7e7      	b.n	800b18c <__sflush_r+0xd4>
 800b1bc:	dfbffffe 	.word	0xdfbffffe

0800b1c0 <_fflush_r>:
 800b1c0:	b538      	push	{r3, r4, r5, lr}
 800b1c2:	690b      	ldr	r3, [r1, #16]
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	b913      	cbnz	r3, 800b1d0 <_fflush_r+0x10>
 800b1ca:	2500      	movs	r5, #0
 800b1cc:	4628      	mov	r0, r5
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	b118      	cbz	r0, 800b1da <_fflush_r+0x1a>
 800b1d2:	6a03      	ldr	r3, [r0, #32]
 800b1d4:	b90b      	cbnz	r3, 800b1da <_fflush_r+0x1a>
 800b1d6:	f7fc ff21 	bl	800801c <__sinit>
 800b1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0f3      	beq.n	800b1ca <_fflush_r+0xa>
 800b1e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1e4:	07d0      	lsls	r0, r2, #31
 800b1e6:	d404      	bmi.n	800b1f2 <_fflush_r+0x32>
 800b1e8:	0599      	lsls	r1, r3, #22
 800b1ea:	d402      	bmi.n	800b1f2 <_fflush_r+0x32>
 800b1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1ee:	f7fd f858 	bl	80082a2 <__retarget_lock_acquire_recursive>
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	f7ff ff5f 	bl	800b0b8 <__sflush_r>
 800b1fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1fc:	07da      	lsls	r2, r3, #31
 800b1fe:	4605      	mov	r5, r0
 800b200:	d4e4      	bmi.n	800b1cc <_fflush_r+0xc>
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	059b      	lsls	r3, r3, #22
 800b206:	d4e1      	bmi.n	800b1cc <_fflush_r+0xc>
 800b208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b20a:	f7fd f84b 	bl	80082a4 <__retarget_lock_release_recursive>
 800b20e:	e7dd      	b.n	800b1cc <_fflush_r+0xc>

0800b210 <__sccl>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	780b      	ldrb	r3, [r1, #0]
 800b214:	4604      	mov	r4, r0
 800b216:	2b5e      	cmp	r3, #94	@ 0x5e
 800b218:	bf0b      	itete	eq
 800b21a:	784b      	ldrbeq	r3, [r1, #1]
 800b21c:	1c4a      	addne	r2, r1, #1
 800b21e:	1c8a      	addeq	r2, r1, #2
 800b220:	2100      	movne	r1, #0
 800b222:	bf08      	it	eq
 800b224:	2101      	moveq	r1, #1
 800b226:	3801      	subs	r0, #1
 800b228:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800b22c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800b230:	42a8      	cmp	r0, r5
 800b232:	d1fb      	bne.n	800b22c <__sccl+0x1c>
 800b234:	b90b      	cbnz	r3, 800b23a <__sccl+0x2a>
 800b236:	1e50      	subs	r0, r2, #1
 800b238:	bd70      	pop	{r4, r5, r6, pc}
 800b23a:	f081 0101 	eor.w	r1, r1, #1
 800b23e:	54e1      	strb	r1, [r4, r3]
 800b240:	4610      	mov	r0, r2
 800b242:	4602      	mov	r2, r0
 800b244:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b248:	2d2d      	cmp	r5, #45	@ 0x2d
 800b24a:	d005      	beq.n	800b258 <__sccl+0x48>
 800b24c:	2d5d      	cmp	r5, #93	@ 0x5d
 800b24e:	d016      	beq.n	800b27e <__sccl+0x6e>
 800b250:	2d00      	cmp	r5, #0
 800b252:	d0f1      	beq.n	800b238 <__sccl+0x28>
 800b254:	462b      	mov	r3, r5
 800b256:	e7f2      	b.n	800b23e <__sccl+0x2e>
 800b258:	7846      	ldrb	r6, [r0, #1]
 800b25a:	2e5d      	cmp	r6, #93	@ 0x5d
 800b25c:	d0fa      	beq.n	800b254 <__sccl+0x44>
 800b25e:	42b3      	cmp	r3, r6
 800b260:	dcf8      	bgt.n	800b254 <__sccl+0x44>
 800b262:	3002      	adds	r0, #2
 800b264:	461a      	mov	r2, r3
 800b266:	3201      	adds	r2, #1
 800b268:	4296      	cmp	r6, r2
 800b26a:	54a1      	strb	r1, [r4, r2]
 800b26c:	dcfb      	bgt.n	800b266 <__sccl+0x56>
 800b26e:	1af2      	subs	r2, r6, r3
 800b270:	3a01      	subs	r2, #1
 800b272:	1c5d      	adds	r5, r3, #1
 800b274:	42b3      	cmp	r3, r6
 800b276:	bfa8      	it	ge
 800b278:	2200      	movge	r2, #0
 800b27a:	18ab      	adds	r3, r5, r2
 800b27c:	e7e1      	b.n	800b242 <__sccl+0x32>
 800b27e:	4610      	mov	r0, r2
 800b280:	e7da      	b.n	800b238 <__sccl+0x28>

0800b282 <__submore>:
 800b282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b286:	460c      	mov	r4, r1
 800b288:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b28a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b28e:	4299      	cmp	r1, r3
 800b290:	d11d      	bne.n	800b2ce <__submore+0x4c>
 800b292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b296:	f7fd fedb 	bl	8009050 <_malloc_r>
 800b29a:	b918      	cbnz	r0, 800b2a4 <__submore+0x22>
 800b29c:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b2a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b2aa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b2ae:	6360      	str	r0, [r4, #52]	@ 0x34
 800b2b0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b2b4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b2b8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b2bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b2c0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b2c4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b2c8:	6020      	str	r0, [r4, #0]
 800b2ca:	2000      	movs	r0, #0
 800b2cc:	e7e8      	b.n	800b2a0 <__submore+0x1e>
 800b2ce:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b2d0:	0077      	lsls	r7, r6, #1
 800b2d2:	463a      	mov	r2, r7
 800b2d4:	f000 fbd1 	bl	800ba7a <_realloc_r>
 800b2d8:	4605      	mov	r5, r0
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d0de      	beq.n	800b29c <__submore+0x1a>
 800b2de:	eb00 0806 	add.w	r8, r0, r6
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	4632      	mov	r2, r6
 800b2e6:	4640      	mov	r0, r8
 800b2e8:	f7fc ffdd 	bl	80082a6 <memcpy>
 800b2ec:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b2f0:	f8c4 8000 	str.w	r8, [r4]
 800b2f4:	e7e9      	b.n	800b2ca <__submore+0x48>

0800b2f6 <memmove>:
 800b2f6:	4288      	cmp	r0, r1
 800b2f8:	b510      	push	{r4, lr}
 800b2fa:	eb01 0402 	add.w	r4, r1, r2
 800b2fe:	d902      	bls.n	800b306 <memmove+0x10>
 800b300:	4284      	cmp	r4, r0
 800b302:	4623      	mov	r3, r4
 800b304:	d807      	bhi.n	800b316 <memmove+0x20>
 800b306:	1e43      	subs	r3, r0, #1
 800b308:	42a1      	cmp	r1, r4
 800b30a:	d008      	beq.n	800b31e <memmove+0x28>
 800b30c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b310:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b314:	e7f8      	b.n	800b308 <memmove+0x12>
 800b316:	4402      	add	r2, r0
 800b318:	4601      	mov	r1, r0
 800b31a:	428a      	cmp	r2, r1
 800b31c:	d100      	bne.n	800b320 <memmove+0x2a>
 800b31e:	bd10      	pop	{r4, pc}
 800b320:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b324:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b328:	e7f7      	b.n	800b31a <memmove+0x24>

0800b32a <strncmp>:
 800b32a:	b510      	push	{r4, lr}
 800b32c:	b16a      	cbz	r2, 800b34a <strncmp+0x20>
 800b32e:	3901      	subs	r1, #1
 800b330:	1884      	adds	r4, r0, r2
 800b332:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b336:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d103      	bne.n	800b346 <strncmp+0x1c>
 800b33e:	42a0      	cmp	r0, r4
 800b340:	d001      	beq.n	800b346 <strncmp+0x1c>
 800b342:	2a00      	cmp	r2, #0
 800b344:	d1f5      	bne.n	800b332 <strncmp+0x8>
 800b346:	1ad0      	subs	r0, r2, r3
 800b348:	bd10      	pop	{r4, pc}
 800b34a:	4610      	mov	r0, r2
 800b34c:	e7fc      	b.n	800b348 <strncmp+0x1e>
	...

0800b350 <_sbrk_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d06      	ldr	r5, [pc, #24]	@ (800b36c <_sbrk_r+0x1c>)
 800b354:	2300      	movs	r3, #0
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	f7f7 fb4c 	bl	80029f8 <_sbrk>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d102      	bne.n	800b36a <_sbrk_r+0x1a>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	b103      	cbz	r3, 800b36a <_sbrk_r+0x1a>
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	200006bc 	.word	0x200006bc

0800b370 <nan>:
 800b370:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b378 <nan+0x8>
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	00000000 	.word	0x00000000
 800b37c:	7ff80000 	.word	0x7ff80000

0800b380 <__assert_func>:
 800b380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b382:	4614      	mov	r4, r2
 800b384:	461a      	mov	r2, r3
 800b386:	4b09      	ldr	r3, [pc, #36]	@ (800b3ac <__assert_func+0x2c>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4605      	mov	r5, r0
 800b38c:	68d8      	ldr	r0, [r3, #12]
 800b38e:	b954      	cbnz	r4, 800b3a6 <__assert_func+0x26>
 800b390:	4b07      	ldr	r3, [pc, #28]	@ (800b3b0 <__assert_func+0x30>)
 800b392:	461c      	mov	r4, r3
 800b394:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b398:	9100      	str	r1, [sp, #0]
 800b39a:	462b      	mov	r3, r5
 800b39c:	4905      	ldr	r1, [pc, #20]	@ (800b3b4 <__assert_func+0x34>)
 800b39e:	f000 fc19 	bl	800bbd4 <fiprintf>
 800b3a2:	f000 fc29 	bl	800bbf8 <abort>
 800b3a6:	4b04      	ldr	r3, [pc, #16]	@ (800b3b8 <__assert_func+0x38>)
 800b3a8:	e7f4      	b.n	800b394 <__assert_func+0x14>
 800b3aa:	bf00      	nop
 800b3ac:	20000034 	.word	0x20000034
 800b3b0:	0800caf0 	.word	0x0800caf0
 800b3b4:	0800cac2 	.word	0x0800cac2
 800b3b8:	0800cab5 	.word	0x0800cab5

0800b3bc <_calloc_r>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	fba1 5402 	umull	r5, r4, r1, r2
 800b3c2:	b93c      	cbnz	r4, 800b3d4 <_calloc_r+0x18>
 800b3c4:	4629      	mov	r1, r5
 800b3c6:	f7fd fe43 	bl	8009050 <_malloc_r>
 800b3ca:	4606      	mov	r6, r0
 800b3cc:	b928      	cbnz	r0, 800b3da <_calloc_r+0x1e>
 800b3ce:	2600      	movs	r6, #0
 800b3d0:	4630      	mov	r0, r6
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	220c      	movs	r2, #12
 800b3d6:	6002      	str	r2, [r0, #0]
 800b3d8:	e7f9      	b.n	800b3ce <_calloc_r+0x12>
 800b3da:	462a      	mov	r2, r5
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f7fc fee2 	bl	80081a6 <memset>
 800b3e2:	e7f5      	b.n	800b3d0 <_calloc_r+0x14>

0800b3e4 <rshift>:
 800b3e4:	6903      	ldr	r3, [r0, #16]
 800b3e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b3ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3ee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b3f2:	f100 0414 	add.w	r4, r0, #20
 800b3f6:	dd45      	ble.n	800b484 <rshift+0xa0>
 800b3f8:	f011 011f 	ands.w	r1, r1, #31
 800b3fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b400:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b404:	d10c      	bne.n	800b420 <rshift+0x3c>
 800b406:	f100 0710 	add.w	r7, r0, #16
 800b40a:	4629      	mov	r1, r5
 800b40c:	42b1      	cmp	r1, r6
 800b40e:	d334      	bcc.n	800b47a <rshift+0x96>
 800b410:	1a9b      	subs	r3, r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	1eea      	subs	r2, r5, #3
 800b416:	4296      	cmp	r6, r2
 800b418:	bf38      	it	cc
 800b41a:	2300      	movcc	r3, #0
 800b41c:	4423      	add	r3, r4
 800b41e:	e015      	b.n	800b44c <rshift+0x68>
 800b420:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b424:	f1c1 0820 	rsb	r8, r1, #32
 800b428:	40cf      	lsrs	r7, r1
 800b42a:	f105 0e04 	add.w	lr, r5, #4
 800b42e:	46a1      	mov	r9, r4
 800b430:	4576      	cmp	r6, lr
 800b432:	46f4      	mov	ip, lr
 800b434:	d815      	bhi.n	800b462 <rshift+0x7e>
 800b436:	1a9a      	subs	r2, r3, r2
 800b438:	0092      	lsls	r2, r2, #2
 800b43a:	3a04      	subs	r2, #4
 800b43c:	3501      	adds	r5, #1
 800b43e:	42ae      	cmp	r6, r5
 800b440:	bf38      	it	cc
 800b442:	2200      	movcc	r2, #0
 800b444:	18a3      	adds	r3, r4, r2
 800b446:	50a7      	str	r7, [r4, r2]
 800b448:	b107      	cbz	r7, 800b44c <rshift+0x68>
 800b44a:	3304      	adds	r3, #4
 800b44c:	1b1a      	subs	r2, r3, r4
 800b44e:	42a3      	cmp	r3, r4
 800b450:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b454:	bf08      	it	eq
 800b456:	2300      	moveq	r3, #0
 800b458:	6102      	str	r2, [r0, #16]
 800b45a:	bf08      	it	eq
 800b45c:	6143      	streq	r3, [r0, #20]
 800b45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b462:	f8dc c000 	ldr.w	ip, [ip]
 800b466:	fa0c fc08 	lsl.w	ip, ip, r8
 800b46a:	ea4c 0707 	orr.w	r7, ip, r7
 800b46e:	f849 7b04 	str.w	r7, [r9], #4
 800b472:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b476:	40cf      	lsrs	r7, r1
 800b478:	e7da      	b.n	800b430 <rshift+0x4c>
 800b47a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b47e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b482:	e7c3      	b.n	800b40c <rshift+0x28>
 800b484:	4623      	mov	r3, r4
 800b486:	e7e1      	b.n	800b44c <rshift+0x68>

0800b488 <__hexdig_fun>:
 800b488:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b48c:	2b09      	cmp	r3, #9
 800b48e:	d802      	bhi.n	800b496 <__hexdig_fun+0xe>
 800b490:	3820      	subs	r0, #32
 800b492:	b2c0      	uxtb	r0, r0
 800b494:	4770      	bx	lr
 800b496:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b49a:	2b05      	cmp	r3, #5
 800b49c:	d801      	bhi.n	800b4a2 <__hexdig_fun+0x1a>
 800b49e:	3847      	subs	r0, #71	@ 0x47
 800b4a0:	e7f7      	b.n	800b492 <__hexdig_fun+0xa>
 800b4a2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b4a6:	2b05      	cmp	r3, #5
 800b4a8:	d801      	bhi.n	800b4ae <__hexdig_fun+0x26>
 800b4aa:	3827      	subs	r0, #39	@ 0x27
 800b4ac:	e7f1      	b.n	800b492 <__hexdig_fun+0xa>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	4770      	bx	lr
	...

0800b4b4 <__gethex>:
 800b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	468a      	mov	sl, r1
 800b4bc:	9302      	str	r3, [sp, #8]
 800b4be:	680b      	ldr	r3, [r1, #0]
 800b4c0:	9001      	str	r0, [sp, #4]
 800b4c2:	4690      	mov	r8, r2
 800b4c4:	1c9c      	adds	r4, r3, #2
 800b4c6:	46a1      	mov	r9, r4
 800b4c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b4cc:	2830      	cmp	r0, #48	@ 0x30
 800b4ce:	d0fa      	beq.n	800b4c6 <__gethex+0x12>
 800b4d0:	eba9 0303 	sub.w	r3, r9, r3
 800b4d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b4d8:	f7ff ffd6 	bl	800b488 <__hexdig_fun>
 800b4dc:	4605      	mov	r5, r0
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d168      	bne.n	800b5b4 <__gethex+0x100>
 800b4e2:	49a0      	ldr	r1, [pc, #640]	@ (800b764 <__gethex+0x2b0>)
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	4648      	mov	r0, r9
 800b4e8:	f7ff ff1f 	bl	800b32a <strncmp>
 800b4ec:	4607      	mov	r7, r0
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	d167      	bne.n	800b5c2 <__gethex+0x10e>
 800b4f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b4f6:	4626      	mov	r6, r4
 800b4f8:	f7ff ffc6 	bl	800b488 <__hexdig_fun>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d062      	beq.n	800b5c6 <__gethex+0x112>
 800b500:	4623      	mov	r3, r4
 800b502:	7818      	ldrb	r0, [r3, #0]
 800b504:	2830      	cmp	r0, #48	@ 0x30
 800b506:	4699      	mov	r9, r3
 800b508:	f103 0301 	add.w	r3, r3, #1
 800b50c:	d0f9      	beq.n	800b502 <__gethex+0x4e>
 800b50e:	f7ff ffbb 	bl	800b488 <__hexdig_fun>
 800b512:	fab0 f580 	clz	r5, r0
 800b516:	096d      	lsrs	r5, r5, #5
 800b518:	f04f 0b01 	mov.w	fp, #1
 800b51c:	464a      	mov	r2, r9
 800b51e:	4616      	mov	r6, r2
 800b520:	3201      	adds	r2, #1
 800b522:	7830      	ldrb	r0, [r6, #0]
 800b524:	f7ff ffb0 	bl	800b488 <__hexdig_fun>
 800b528:	2800      	cmp	r0, #0
 800b52a:	d1f8      	bne.n	800b51e <__gethex+0x6a>
 800b52c:	498d      	ldr	r1, [pc, #564]	@ (800b764 <__gethex+0x2b0>)
 800b52e:	2201      	movs	r2, #1
 800b530:	4630      	mov	r0, r6
 800b532:	f7ff fefa 	bl	800b32a <strncmp>
 800b536:	2800      	cmp	r0, #0
 800b538:	d13f      	bne.n	800b5ba <__gethex+0x106>
 800b53a:	b944      	cbnz	r4, 800b54e <__gethex+0x9a>
 800b53c:	1c74      	adds	r4, r6, #1
 800b53e:	4622      	mov	r2, r4
 800b540:	4616      	mov	r6, r2
 800b542:	3201      	adds	r2, #1
 800b544:	7830      	ldrb	r0, [r6, #0]
 800b546:	f7ff ff9f 	bl	800b488 <__hexdig_fun>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d1f8      	bne.n	800b540 <__gethex+0x8c>
 800b54e:	1ba4      	subs	r4, r4, r6
 800b550:	00a7      	lsls	r7, r4, #2
 800b552:	7833      	ldrb	r3, [r6, #0]
 800b554:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b558:	2b50      	cmp	r3, #80	@ 0x50
 800b55a:	d13e      	bne.n	800b5da <__gethex+0x126>
 800b55c:	7873      	ldrb	r3, [r6, #1]
 800b55e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b560:	d033      	beq.n	800b5ca <__gethex+0x116>
 800b562:	2b2d      	cmp	r3, #45	@ 0x2d
 800b564:	d034      	beq.n	800b5d0 <__gethex+0x11c>
 800b566:	1c71      	adds	r1, r6, #1
 800b568:	2400      	movs	r4, #0
 800b56a:	7808      	ldrb	r0, [r1, #0]
 800b56c:	f7ff ff8c 	bl	800b488 <__hexdig_fun>
 800b570:	1e43      	subs	r3, r0, #1
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b18      	cmp	r3, #24
 800b576:	d830      	bhi.n	800b5da <__gethex+0x126>
 800b578:	f1a0 0210 	sub.w	r2, r0, #16
 800b57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b580:	f7ff ff82 	bl	800b488 <__hexdig_fun>
 800b584:	f100 3cff 	add.w	ip, r0, #4294967295
 800b588:	fa5f fc8c 	uxtb.w	ip, ip
 800b58c:	f1bc 0f18 	cmp.w	ip, #24
 800b590:	f04f 030a 	mov.w	r3, #10
 800b594:	d91e      	bls.n	800b5d4 <__gethex+0x120>
 800b596:	b104      	cbz	r4, 800b59a <__gethex+0xe6>
 800b598:	4252      	negs	r2, r2
 800b59a:	4417      	add	r7, r2
 800b59c:	f8ca 1000 	str.w	r1, [sl]
 800b5a0:	b1ed      	cbz	r5, 800b5de <__gethex+0x12a>
 800b5a2:	f1bb 0f00 	cmp.w	fp, #0
 800b5a6:	bf0c      	ite	eq
 800b5a8:	2506      	moveq	r5, #6
 800b5aa:	2500      	movne	r5, #0
 800b5ac:	4628      	mov	r0, r5
 800b5ae:	b005      	add	sp, #20
 800b5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b4:	2500      	movs	r5, #0
 800b5b6:	462c      	mov	r4, r5
 800b5b8:	e7b0      	b.n	800b51c <__gethex+0x68>
 800b5ba:	2c00      	cmp	r4, #0
 800b5bc:	d1c7      	bne.n	800b54e <__gethex+0x9a>
 800b5be:	4627      	mov	r7, r4
 800b5c0:	e7c7      	b.n	800b552 <__gethex+0x9e>
 800b5c2:	464e      	mov	r6, r9
 800b5c4:	462f      	mov	r7, r5
 800b5c6:	2501      	movs	r5, #1
 800b5c8:	e7c3      	b.n	800b552 <__gethex+0x9e>
 800b5ca:	2400      	movs	r4, #0
 800b5cc:	1cb1      	adds	r1, r6, #2
 800b5ce:	e7cc      	b.n	800b56a <__gethex+0xb6>
 800b5d0:	2401      	movs	r4, #1
 800b5d2:	e7fb      	b.n	800b5cc <__gethex+0x118>
 800b5d4:	fb03 0002 	mla	r0, r3, r2, r0
 800b5d8:	e7ce      	b.n	800b578 <__gethex+0xc4>
 800b5da:	4631      	mov	r1, r6
 800b5dc:	e7de      	b.n	800b59c <__gethex+0xe8>
 800b5de:	eba6 0309 	sub.w	r3, r6, r9
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	2b07      	cmp	r3, #7
 800b5e8:	dc0a      	bgt.n	800b600 <__gethex+0x14c>
 800b5ea:	9801      	ldr	r0, [sp, #4]
 800b5ec:	f7fd fdbc 	bl	8009168 <_Balloc>
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	b940      	cbnz	r0, 800b606 <__gethex+0x152>
 800b5f4:	4b5c      	ldr	r3, [pc, #368]	@ (800b768 <__gethex+0x2b4>)
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	21e4      	movs	r1, #228	@ 0xe4
 800b5fa:	485c      	ldr	r0, [pc, #368]	@ (800b76c <__gethex+0x2b8>)
 800b5fc:	f7ff fec0 	bl	800b380 <__assert_func>
 800b600:	3101      	adds	r1, #1
 800b602:	105b      	asrs	r3, r3, #1
 800b604:	e7ef      	b.n	800b5e6 <__gethex+0x132>
 800b606:	f100 0a14 	add.w	sl, r0, #20
 800b60a:	2300      	movs	r3, #0
 800b60c:	4655      	mov	r5, sl
 800b60e:	469b      	mov	fp, r3
 800b610:	45b1      	cmp	r9, r6
 800b612:	d337      	bcc.n	800b684 <__gethex+0x1d0>
 800b614:	f845 bb04 	str.w	fp, [r5], #4
 800b618:	eba5 050a 	sub.w	r5, r5, sl
 800b61c:	10ad      	asrs	r5, r5, #2
 800b61e:	6125      	str	r5, [r4, #16]
 800b620:	4658      	mov	r0, fp
 800b622:	f7fd fe93 	bl	800934c <__hi0bits>
 800b626:	016d      	lsls	r5, r5, #5
 800b628:	f8d8 6000 	ldr.w	r6, [r8]
 800b62c:	1a2d      	subs	r5, r5, r0
 800b62e:	42b5      	cmp	r5, r6
 800b630:	dd54      	ble.n	800b6dc <__gethex+0x228>
 800b632:	1bad      	subs	r5, r5, r6
 800b634:	4629      	mov	r1, r5
 800b636:	4620      	mov	r0, r4
 800b638:	f7fe fa27 	bl	8009a8a <__any_on>
 800b63c:	4681      	mov	r9, r0
 800b63e:	b178      	cbz	r0, 800b660 <__gethex+0x1ac>
 800b640:	1e6b      	subs	r3, r5, #1
 800b642:	1159      	asrs	r1, r3, #5
 800b644:	f003 021f 	and.w	r2, r3, #31
 800b648:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b64c:	f04f 0901 	mov.w	r9, #1
 800b650:	fa09 f202 	lsl.w	r2, r9, r2
 800b654:	420a      	tst	r2, r1
 800b656:	d003      	beq.n	800b660 <__gethex+0x1ac>
 800b658:	454b      	cmp	r3, r9
 800b65a:	dc36      	bgt.n	800b6ca <__gethex+0x216>
 800b65c:	f04f 0902 	mov.w	r9, #2
 800b660:	4629      	mov	r1, r5
 800b662:	4620      	mov	r0, r4
 800b664:	f7ff febe 	bl	800b3e4 <rshift>
 800b668:	442f      	add	r7, r5
 800b66a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b66e:	42bb      	cmp	r3, r7
 800b670:	da42      	bge.n	800b6f8 <__gethex+0x244>
 800b672:	9801      	ldr	r0, [sp, #4]
 800b674:	4621      	mov	r1, r4
 800b676:	f7fd fdb7 	bl	80091e8 <_Bfree>
 800b67a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b67c:	2300      	movs	r3, #0
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	25a3      	movs	r5, #163	@ 0xa3
 800b682:	e793      	b.n	800b5ac <__gethex+0xf8>
 800b684:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b688:	2a2e      	cmp	r2, #46	@ 0x2e
 800b68a:	d012      	beq.n	800b6b2 <__gethex+0x1fe>
 800b68c:	2b20      	cmp	r3, #32
 800b68e:	d104      	bne.n	800b69a <__gethex+0x1e6>
 800b690:	f845 bb04 	str.w	fp, [r5], #4
 800b694:	f04f 0b00 	mov.w	fp, #0
 800b698:	465b      	mov	r3, fp
 800b69a:	7830      	ldrb	r0, [r6, #0]
 800b69c:	9303      	str	r3, [sp, #12]
 800b69e:	f7ff fef3 	bl	800b488 <__hexdig_fun>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	f000 000f 	and.w	r0, r0, #15
 800b6a8:	4098      	lsls	r0, r3
 800b6aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800b6ae:	3304      	adds	r3, #4
 800b6b0:	e7ae      	b.n	800b610 <__gethex+0x15c>
 800b6b2:	45b1      	cmp	r9, r6
 800b6b4:	d8ea      	bhi.n	800b68c <__gethex+0x1d8>
 800b6b6:	492b      	ldr	r1, [pc, #172]	@ (800b764 <__gethex+0x2b0>)
 800b6b8:	9303      	str	r3, [sp, #12]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	4630      	mov	r0, r6
 800b6be:	f7ff fe34 	bl	800b32a <strncmp>
 800b6c2:	9b03      	ldr	r3, [sp, #12]
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d1e1      	bne.n	800b68c <__gethex+0x1d8>
 800b6c8:	e7a2      	b.n	800b610 <__gethex+0x15c>
 800b6ca:	1ea9      	subs	r1, r5, #2
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f7fe f9dc 	bl	8009a8a <__any_on>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d0c2      	beq.n	800b65c <__gethex+0x1a8>
 800b6d6:	f04f 0903 	mov.w	r9, #3
 800b6da:	e7c1      	b.n	800b660 <__gethex+0x1ac>
 800b6dc:	da09      	bge.n	800b6f2 <__gethex+0x23e>
 800b6de:	1b75      	subs	r5, r6, r5
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	9801      	ldr	r0, [sp, #4]
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	f7fd ff97 	bl	8009618 <__lshift>
 800b6ea:	1b7f      	subs	r7, r7, r5
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	f100 0a14 	add.w	sl, r0, #20
 800b6f2:	f04f 0900 	mov.w	r9, #0
 800b6f6:	e7b8      	b.n	800b66a <__gethex+0x1b6>
 800b6f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b6fc:	42bd      	cmp	r5, r7
 800b6fe:	dd6f      	ble.n	800b7e0 <__gethex+0x32c>
 800b700:	1bed      	subs	r5, r5, r7
 800b702:	42ae      	cmp	r6, r5
 800b704:	dc34      	bgt.n	800b770 <__gethex+0x2bc>
 800b706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d022      	beq.n	800b754 <__gethex+0x2a0>
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d024      	beq.n	800b75c <__gethex+0x2a8>
 800b712:	2b01      	cmp	r3, #1
 800b714:	d115      	bne.n	800b742 <__gethex+0x28e>
 800b716:	42ae      	cmp	r6, r5
 800b718:	d113      	bne.n	800b742 <__gethex+0x28e>
 800b71a:	2e01      	cmp	r6, #1
 800b71c:	d10b      	bne.n	800b736 <__gethex+0x282>
 800b71e:	9a02      	ldr	r2, [sp, #8]
 800b720:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b724:	6013      	str	r3, [r2, #0]
 800b726:	2301      	movs	r3, #1
 800b728:	6123      	str	r3, [r4, #16]
 800b72a:	f8ca 3000 	str.w	r3, [sl]
 800b72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b730:	2562      	movs	r5, #98	@ 0x62
 800b732:	601c      	str	r4, [r3, #0]
 800b734:	e73a      	b.n	800b5ac <__gethex+0xf8>
 800b736:	1e71      	subs	r1, r6, #1
 800b738:	4620      	mov	r0, r4
 800b73a:	f7fe f9a6 	bl	8009a8a <__any_on>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d1ed      	bne.n	800b71e <__gethex+0x26a>
 800b742:	9801      	ldr	r0, [sp, #4]
 800b744:	4621      	mov	r1, r4
 800b746:	f7fd fd4f 	bl	80091e8 <_Bfree>
 800b74a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b74c:	2300      	movs	r3, #0
 800b74e:	6013      	str	r3, [r2, #0]
 800b750:	2550      	movs	r5, #80	@ 0x50
 800b752:	e72b      	b.n	800b5ac <__gethex+0xf8>
 800b754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1f3      	bne.n	800b742 <__gethex+0x28e>
 800b75a:	e7e0      	b.n	800b71e <__gethex+0x26a>
 800b75c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1dd      	bne.n	800b71e <__gethex+0x26a>
 800b762:	e7ee      	b.n	800b742 <__gethex+0x28e>
 800b764:	0800c928 	.word	0x0800c928
 800b768:	0800c7bb 	.word	0x0800c7bb
 800b76c:	0800caf1 	.word	0x0800caf1
 800b770:	1e6f      	subs	r7, r5, #1
 800b772:	f1b9 0f00 	cmp.w	r9, #0
 800b776:	d130      	bne.n	800b7da <__gethex+0x326>
 800b778:	b127      	cbz	r7, 800b784 <__gethex+0x2d0>
 800b77a:	4639      	mov	r1, r7
 800b77c:	4620      	mov	r0, r4
 800b77e:	f7fe f984 	bl	8009a8a <__any_on>
 800b782:	4681      	mov	r9, r0
 800b784:	117a      	asrs	r2, r7, #5
 800b786:	2301      	movs	r3, #1
 800b788:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b78c:	f007 071f 	and.w	r7, r7, #31
 800b790:	40bb      	lsls	r3, r7
 800b792:	4213      	tst	r3, r2
 800b794:	4629      	mov	r1, r5
 800b796:	4620      	mov	r0, r4
 800b798:	bf18      	it	ne
 800b79a:	f049 0902 	orrne.w	r9, r9, #2
 800b79e:	f7ff fe21 	bl	800b3e4 <rshift>
 800b7a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b7a6:	1b76      	subs	r6, r6, r5
 800b7a8:	2502      	movs	r5, #2
 800b7aa:	f1b9 0f00 	cmp.w	r9, #0
 800b7ae:	d047      	beq.n	800b840 <__gethex+0x38c>
 800b7b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	d015      	beq.n	800b7e4 <__gethex+0x330>
 800b7b8:	2b03      	cmp	r3, #3
 800b7ba:	d017      	beq.n	800b7ec <__gethex+0x338>
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d109      	bne.n	800b7d4 <__gethex+0x320>
 800b7c0:	f019 0f02 	tst.w	r9, #2
 800b7c4:	d006      	beq.n	800b7d4 <__gethex+0x320>
 800b7c6:	f8da 3000 	ldr.w	r3, [sl]
 800b7ca:	ea49 0903 	orr.w	r9, r9, r3
 800b7ce:	f019 0f01 	tst.w	r9, #1
 800b7d2:	d10e      	bne.n	800b7f2 <__gethex+0x33e>
 800b7d4:	f045 0510 	orr.w	r5, r5, #16
 800b7d8:	e032      	b.n	800b840 <__gethex+0x38c>
 800b7da:	f04f 0901 	mov.w	r9, #1
 800b7de:	e7d1      	b.n	800b784 <__gethex+0x2d0>
 800b7e0:	2501      	movs	r5, #1
 800b7e2:	e7e2      	b.n	800b7aa <__gethex+0x2f6>
 800b7e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7e6:	f1c3 0301 	rsb	r3, r3, #1
 800b7ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b7ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d0f0      	beq.n	800b7d4 <__gethex+0x320>
 800b7f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b7f6:	f104 0314 	add.w	r3, r4, #20
 800b7fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b7fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b802:	f04f 0c00 	mov.w	ip, #0
 800b806:	4618      	mov	r0, r3
 800b808:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b810:	d01b      	beq.n	800b84a <__gethex+0x396>
 800b812:	3201      	adds	r2, #1
 800b814:	6002      	str	r2, [r0, #0]
 800b816:	2d02      	cmp	r5, #2
 800b818:	f104 0314 	add.w	r3, r4, #20
 800b81c:	d13c      	bne.n	800b898 <__gethex+0x3e4>
 800b81e:	f8d8 2000 	ldr.w	r2, [r8]
 800b822:	3a01      	subs	r2, #1
 800b824:	42b2      	cmp	r2, r6
 800b826:	d109      	bne.n	800b83c <__gethex+0x388>
 800b828:	1171      	asrs	r1, r6, #5
 800b82a:	2201      	movs	r2, #1
 800b82c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b830:	f006 061f 	and.w	r6, r6, #31
 800b834:	fa02 f606 	lsl.w	r6, r2, r6
 800b838:	421e      	tst	r6, r3
 800b83a:	d13a      	bne.n	800b8b2 <__gethex+0x3fe>
 800b83c:	f045 0520 	orr.w	r5, r5, #32
 800b840:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b842:	601c      	str	r4, [r3, #0]
 800b844:	9b02      	ldr	r3, [sp, #8]
 800b846:	601f      	str	r7, [r3, #0]
 800b848:	e6b0      	b.n	800b5ac <__gethex+0xf8>
 800b84a:	4299      	cmp	r1, r3
 800b84c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b850:	d8d9      	bhi.n	800b806 <__gethex+0x352>
 800b852:	68a3      	ldr	r3, [r4, #8]
 800b854:	459b      	cmp	fp, r3
 800b856:	db17      	blt.n	800b888 <__gethex+0x3d4>
 800b858:	6861      	ldr	r1, [r4, #4]
 800b85a:	9801      	ldr	r0, [sp, #4]
 800b85c:	3101      	adds	r1, #1
 800b85e:	f7fd fc83 	bl	8009168 <_Balloc>
 800b862:	4681      	mov	r9, r0
 800b864:	b918      	cbnz	r0, 800b86e <__gethex+0x3ba>
 800b866:	4b1a      	ldr	r3, [pc, #104]	@ (800b8d0 <__gethex+0x41c>)
 800b868:	4602      	mov	r2, r0
 800b86a:	2184      	movs	r1, #132	@ 0x84
 800b86c:	e6c5      	b.n	800b5fa <__gethex+0x146>
 800b86e:	6922      	ldr	r2, [r4, #16]
 800b870:	3202      	adds	r2, #2
 800b872:	f104 010c 	add.w	r1, r4, #12
 800b876:	0092      	lsls	r2, r2, #2
 800b878:	300c      	adds	r0, #12
 800b87a:	f7fc fd14 	bl	80082a6 <memcpy>
 800b87e:	4621      	mov	r1, r4
 800b880:	9801      	ldr	r0, [sp, #4]
 800b882:	f7fd fcb1 	bl	80091e8 <_Bfree>
 800b886:	464c      	mov	r4, r9
 800b888:	6923      	ldr	r3, [r4, #16]
 800b88a:	1c5a      	adds	r2, r3, #1
 800b88c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b890:	6122      	str	r2, [r4, #16]
 800b892:	2201      	movs	r2, #1
 800b894:	615a      	str	r2, [r3, #20]
 800b896:	e7be      	b.n	800b816 <__gethex+0x362>
 800b898:	6922      	ldr	r2, [r4, #16]
 800b89a:	455a      	cmp	r2, fp
 800b89c:	dd0b      	ble.n	800b8b6 <__gethex+0x402>
 800b89e:	2101      	movs	r1, #1
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f7ff fd9f 	bl	800b3e4 <rshift>
 800b8a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8aa:	3701      	adds	r7, #1
 800b8ac:	42bb      	cmp	r3, r7
 800b8ae:	f6ff aee0 	blt.w	800b672 <__gethex+0x1be>
 800b8b2:	2501      	movs	r5, #1
 800b8b4:	e7c2      	b.n	800b83c <__gethex+0x388>
 800b8b6:	f016 061f 	ands.w	r6, r6, #31
 800b8ba:	d0fa      	beq.n	800b8b2 <__gethex+0x3fe>
 800b8bc:	4453      	add	r3, sl
 800b8be:	f1c6 0620 	rsb	r6, r6, #32
 800b8c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b8c6:	f7fd fd41 	bl	800934c <__hi0bits>
 800b8ca:	42b0      	cmp	r0, r6
 800b8cc:	dbe7      	blt.n	800b89e <__gethex+0x3ea>
 800b8ce:	e7f0      	b.n	800b8b2 <__gethex+0x3fe>
 800b8d0:	0800c7bb 	.word	0x0800c7bb

0800b8d4 <L_shift>:
 800b8d4:	f1c2 0208 	rsb	r2, r2, #8
 800b8d8:	0092      	lsls	r2, r2, #2
 800b8da:	b570      	push	{r4, r5, r6, lr}
 800b8dc:	f1c2 0620 	rsb	r6, r2, #32
 800b8e0:	6843      	ldr	r3, [r0, #4]
 800b8e2:	6804      	ldr	r4, [r0, #0]
 800b8e4:	fa03 f506 	lsl.w	r5, r3, r6
 800b8e8:	432c      	orrs	r4, r5
 800b8ea:	40d3      	lsrs	r3, r2
 800b8ec:	6004      	str	r4, [r0, #0]
 800b8ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800b8f2:	4288      	cmp	r0, r1
 800b8f4:	d3f4      	bcc.n	800b8e0 <L_shift+0xc>
 800b8f6:	bd70      	pop	{r4, r5, r6, pc}

0800b8f8 <__match>:
 800b8f8:	b530      	push	{r4, r5, lr}
 800b8fa:	6803      	ldr	r3, [r0, #0]
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b902:	b914      	cbnz	r4, 800b90a <__match+0x12>
 800b904:	6003      	str	r3, [r0, #0]
 800b906:	2001      	movs	r0, #1
 800b908:	bd30      	pop	{r4, r5, pc}
 800b90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b90e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b912:	2d19      	cmp	r5, #25
 800b914:	bf98      	it	ls
 800b916:	3220      	addls	r2, #32
 800b918:	42a2      	cmp	r2, r4
 800b91a:	d0f0      	beq.n	800b8fe <__match+0x6>
 800b91c:	2000      	movs	r0, #0
 800b91e:	e7f3      	b.n	800b908 <__match+0x10>

0800b920 <__hexnan>:
 800b920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	680b      	ldr	r3, [r1, #0]
 800b926:	6801      	ldr	r1, [r0, #0]
 800b928:	115e      	asrs	r6, r3, #5
 800b92a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b92e:	f013 031f 	ands.w	r3, r3, #31
 800b932:	b087      	sub	sp, #28
 800b934:	bf18      	it	ne
 800b936:	3604      	addne	r6, #4
 800b938:	2500      	movs	r5, #0
 800b93a:	1f37      	subs	r7, r6, #4
 800b93c:	4682      	mov	sl, r0
 800b93e:	4690      	mov	r8, r2
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	f846 5c04 	str.w	r5, [r6, #-4]
 800b946:	46b9      	mov	r9, r7
 800b948:	463c      	mov	r4, r7
 800b94a:	9502      	str	r5, [sp, #8]
 800b94c:	46ab      	mov	fp, r5
 800b94e:	784a      	ldrb	r2, [r1, #1]
 800b950:	1c4b      	adds	r3, r1, #1
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	b342      	cbz	r2, 800b9a8 <__hexnan+0x88>
 800b956:	4610      	mov	r0, r2
 800b958:	9105      	str	r1, [sp, #20]
 800b95a:	9204      	str	r2, [sp, #16]
 800b95c:	f7ff fd94 	bl	800b488 <__hexdig_fun>
 800b960:	2800      	cmp	r0, #0
 800b962:	d151      	bne.n	800ba08 <__hexnan+0xe8>
 800b964:	9a04      	ldr	r2, [sp, #16]
 800b966:	9905      	ldr	r1, [sp, #20]
 800b968:	2a20      	cmp	r2, #32
 800b96a:	d818      	bhi.n	800b99e <__hexnan+0x7e>
 800b96c:	9b02      	ldr	r3, [sp, #8]
 800b96e:	459b      	cmp	fp, r3
 800b970:	dd13      	ble.n	800b99a <__hexnan+0x7a>
 800b972:	454c      	cmp	r4, r9
 800b974:	d206      	bcs.n	800b984 <__hexnan+0x64>
 800b976:	2d07      	cmp	r5, #7
 800b978:	dc04      	bgt.n	800b984 <__hexnan+0x64>
 800b97a:	462a      	mov	r2, r5
 800b97c:	4649      	mov	r1, r9
 800b97e:	4620      	mov	r0, r4
 800b980:	f7ff ffa8 	bl	800b8d4 <L_shift>
 800b984:	4544      	cmp	r4, r8
 800b986:	d952      	bls.n	800ba2e <__hexnan+0x10e>
 800b988:	2300      	movs	r3, #0
 800b98a:	f1a4 0904 	sub.w	r9, r4, #4
 800b98e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b992:	f8cd b008 	str.w	fp, [sp, #8]
 800b996:	464c      	mov	r4, r9
 800b998:	461d      	mov	r5, r3
 800b99a:	9903      	ldr	r1, [sp, #12]
 800b99c:	e7d7      	b.n	800b94e <__hexnan+0x2e>
 800b99e:	2a29      	cmp	r2, #41	@ 0x29
 800b9a0:	d157      	bne.n	800ba52 <__hexnan+0x132>
 800b9a2:	3102      	adds	r1, #2
 800b9a4:	f8ca 1000 	str.w	r1, [sl]
 800b9a8:	f1bb 0f00 	cmp.w	fp, #0
 800b9ac:	d051      	beq.n	800ba52 <__hexnan+0x132>
 800b9ae:	454c      	cmp	r4, r9
 800b9b0:	d206      	bcs.n	800b9c0 <__hexnan+0xa0>
 800b9b2:	2d07      	cmp	r5, #7
 800b9b4:	dc04      	bgt.n	800b9c0 <__hexnan+0xa0>
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	4649      	mov	r1, r9
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f7ff ff8a 	bl	800b8d4 <L_shift>
 800b9c0:	4544      	cmp	r4, r8
 800b9c2:	d936      	bls.n	800ba32 <__hexnan+0x112>
 800b9c4:	f1a8 0204 	sub.w	r2, r8, #4
 800b9c8:	4623      	mov	r3, r4
 800b9ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800b9ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800b9d2:	429f      	cmp	r7, r3
 800b9d4:	d2f9      	bcs.n	800b9ca <__hexnan+0xaa>
 800b9d6:	1b3b      	subs	r3, r7, r4
 800b9d8:	f023 0303 	bic.w	r3, r3, #3
 800b9dc:	3304      	adds	r3, #4
 800b9de:	3401      	adds	r4, #1
 800b9e0:	3e03      	subs	r6, #3
 800b9e2:	42b4      	cmp	r4, r6
 800b9e4:	bf88      	it	hi
 800b9e6:	2304      	movhi	r3, #4
 800b9e8:	4443      	add	r3, r8
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f843 2b04 	str.w	r2, [r3], #4
 800b9f0:	429f      	cmp	r7, r3
 800b9f2:	d2fb      	bcs.n	800b9ec <__hexnan+0xcc>
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	b91b      	cbnz	r3, 800ba00 <__hexnan+0xe0>
 800b9f8:	4547      	cmp	r7, r8
 800b9fa:	d128      	bne.n	800ba4e <__hexnan+0x12e>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	603b      	str	r3, [r7, #0]
 800ba00:	2005      	movs	r0, #5
 800ba02:	b007      	add	sp, #28
 800ba04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba08:	3501      	adds	r5, #1
 800ba0a:	2d08      	cmp	r5, #8
 800ba0c:	f10b 0b01 	add.w	fp, fp, #1
 800ba10:	dd06      	ble.n	800ba20 <__hexnan+0x100>
 800ba12:	4544      	cmp	r4, r8
 800ba14:	d9c1      	bls.n	800b99a <__hexnan+0x7a>
 800ba16:	2300      	movs	r3, #0
 800ba18:	f844 3c04 	str.w	r3, [r4, #-4]
 800ba1c:	2501      	movs	r5, #1
 800ba1e:	3c04      	subs	r4, #4
 800ba20:	6822      	ldr	r2, [r4, #0]
 800ba22:	f000 000f 	and.w	r0, r0, #15
 800ba26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ba2a:	6020      	str	r0, [r4, #0]
 800ba2c:	e7b5      	b.n	800b99a <__hexnan+0x7a>
 800ba2e:	2508      	movs	r5, #8
 800ba30:	e7b3      	b.n	800b99a <__hexnan+0x7a>
 800ba32:	9b01      	ldr	r3, [sp, #4]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d0dd      	beq.n	800b9f4 <__hexnan+0xd4>
 800ba38:	f1c3 0320 	rsb	r3, r3, #32
 800ba3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba40:	40da      	lsrs	r2, r3
 800ba42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ba46:	4013      	ands	r3, r2
 800ba48:	f846 3c04 	str.w	r3, [r6, #-4]
 800ba4c:	e7d2      	b.n	800b9f4 <__hexnan+0xd4>
 800ba4e:	3f04      	subs	r7, #4
 800ba50:	e7d0      	b.n	800b9f4 <__hexnan+0xd4>
 800ba52:	2004      	movs	r0, #4
 800ba54:	e7d5      	b.n	800ba02 <__hexnan+0xe2>

0800ba56 <__ascii_mbtowc>:
 800ba56:	b082      	sub	sp, #8
 800ba58:	b901      	cbnz	r1, 800ba5c <__ascii_mbtowc+0x6>
 800ba5a:	a901      	add	r1, sp, #4
 800ba5c:	b142      	cbz	r2, 800ba70 <__ascii_mbtowc+0x1a>
 800ba5e:	b14b      	cbz	r3, 800ba74 <__ascii_mbtowc+0x1e>
 800ba60:	7813      	ldrb	r3, [r2, #0]
 800ba62:	600b      	str	r3, [r1, #0]
 800ba64:	7812      	ldrb	r2, [r2, #0]
 800ba66:	1e10      	subs	r0, r2, #0
 800ba68:	bf18      	it	ne
 800ba6a:	2001      	movne	r0, #1
 800ba6c:	b002      	add	sp, #8
 800ba6e:	4770      	bx	lr
 800ba70:	4610      	mov	r0, r2
 800ba72:	e7fb      	b.n	800ba6c <__ascii_mbtowc+0x16>
 800ba74:	f06f 0001 	mvn.w	r0, #1
 800ba78:	e7f8      	b.n	800ba6c <__ascii_mbtowc+0x16>

0800ba7a <_realloc_r>:
 800ba7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7e:	4680      	mov	r8, r0
 800ba80:	4615      	mov	r5, r2
 800ba82:	460c      	mov	r4, r1
 800ba84:	b921      	cbnz	r1, 800ba90 <_realloc_r+0x16>
 800ba86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8a:	4611      	mov	r1, r2
 800ba8c:	f7fd bae0 	b.w	8009050 <_malloc_r>
 800ba90:	b92a      	cbnz	r2, 800ba9e <_realloc_r+0x24>
 800ba92:	f7fd fa69 	bl	8008f68 <_free_r>
 800ba96:	2400      	movs	r4, #0
 800ba98:	4620      	mov	r0, r4
 800ba9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba9e:	f000 f8b2 	bl	800bc06 <_malloc_usable_size_r>
 800baa2:	4285      	cmp	r5, r0
 800baa4:	4606      	mov	r6, r0
 800baa6:	d802      	bhi.n	800baae <_realloc_r+0x34>
 800baa8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800baac:	d8f4      	bhi.n	800ba98 <_realloc_r+0x1e>
 800baae:	4629      	mov	r1, r5
 800bab0:	4640      	mov	r0, r8
 800bab2:	f7fd facd 	bl	8009050 <_malloc_r>
 800bab6:	4607      	mov	r7, r0
 800bab8:	2800      	cmp	r0, #0
 800baba:	d0ec      	beq.n	800ba96 <_realloc_r+0x1c>
 800babc:	42b5      	cmp	r5, r6
 800babe:	462a      	mov	r2, r5
 800bac0:	4621      	mov	r1, r4
 800bac2:	bf28      	it	cs
 800bac4:	4632      	movcs	r2, r6
 800bac6:	f7fc fbee 	bl	80082a6 <memcpy>
 800baca:	4621      	mov	r1, r4
 800bacc:	4640      	mov	r0, r8
 800bace:	f7fd fa4b 	bl	8008f68 <_free_r>
 800bad2:	463c      	mov	r4, r7
 800bad4:	e7e0      	b.n	800ba98 <_realloc_r+0x1e>
	...

0800bad8 <_strtoul_l.constprop.0>:
 800bad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800badc:	4e34      	ldr	r6, [pc, #208]	@ (800bbb0 <_strtoul_l.constprop.0+0xd8>)
 800bade:	4686      	mov	lr, r0
 800bae0:	460d      	mov	r5, r1
 800bae2:	4628      	mov	r0, r5
 800bae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bae8:	5d37      	ldrb	r7, [r6, r4]
 800baea:	f017 0708 	ands.w	r7, r7, #8
 800baee:	d1f8      	bne.n	800bae2 <_strtoul_l.constprop.0+0xa>
 800baf0:	2c2d      	cmp	r4, #45	@ 0x2d
 800baf2:	d12f      	bne.n	800bb54 <_strtoul_l.constprop.0+0x7c>
 800baf4:	782c      	ldrb	r4, [r5, #0]
 800baf6:	2701      	movs	r7, #1
 800baf8:	1c85      	adds	r5, r0, #2
 800bafa:	f033 0010 	bics.w	r0, r3, #16
 800bafe:	d109      	bne.n	800bb14 <_strtoul_l.constprop.0+0x3c>
 800bb00:	2c30      	cmp	r4, #48	@ 0x30
 800bb02:	d12c      	bne.n	800bb5e <_strtoul_l.constprop.0+0x86>
 800bb04:	7828      	ldrb	r0, [r5, #0]
 800bb06:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bb0a:	2858      	cmp	r0, #88	@ 0x58
 800bb0c:	d127      	bne.n	800bb5e <_strtoul_l.constprop.0+0x86>
 800bb0e:	786c      	ldrb	r4, [r5, #1]
 800bb10:	2310      	movs	r3, #16
 800bb12:	3502      	adds	r5, #2
 800bb14:	f04f 38ff 	mov.w	r8, #4294967295
 800bb18:	2600      	movs	r6, #0
 800bb1a:	fbb8 f8f3 	udiv	r8, r8, r3
 800bb1e:	fb03 f908 	mul.w	r9, r3, r8
 800bb22:	ea6f 0909 	mvn.w	r9, r9
 800bb26:	4630      	mov	r0, r6
 800bb28:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bb2c:	f1bc 0f09 	cmp.w	ip, #9
 800bb30:	d81c      	bhi.n	800bb6c <_strtoul_l.constprop.0+0x94>
 800bb32:	4664      	mov	r4, ip
 800bb34:	42a3      	cmp	r3, r4
 800bb36:	dd2a      	ble.n	800bb8e <_strtoul_l.constprop.0+0xb6>
 800bb38:	f1b6 3fff 	cmp.w	r6, #4294967295
 800bb3c:	d007      	beq.n	800bb4e <_strtoul_l.constprop.0+0x76>
 800bb3e:	4580      	cmp	r8, r0
 800bb40:	d322      	bcc.n	800bb88 <_strtoul_l.constprop.0+0xb0>
 800bb42:	d101      	bne.n	800bb48 <_strtoul_l.constprop.0+0x70>
 800bb44:	45a1      	cmp	r9, r4
 800bb46:	db1f      	blt.n	800bb88 <_strtoul_l.constprop.0+0xb0>
 800bb48:	fb00 4003 	mla	r0, r0, r3, r4
 800bb4c:	2601      	movs	r6, #1
 800bb4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb52:	e7e9      	b.n	800bb28 <_strtoul_l.constprop.0+0x50>
 800bb54:	2c2b      	cmp	r4, #43	@ 0x2b
 800bb56:	bf04      	itt	eq
 800bb58:	782c      	ldrbeq	r4, [r5, #0]
 800bb5a:	1c85      	addeq	r5, r0, #2
 800bb5c:	e7cd      	b.n	800bafa <_strtoul_l.constprop.0+0x22>
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d1d8      	bne.n	800bb14 <_strtoul_l.constprop.0+0x3c>
 800bb62:	2c30      	cmp	r4, #48	@ 0x30
 800bb64:	bf0c      	ite	eq
 800bb66:	2308      	moveq	r3, #8
 800bb68:	230a      	movne	r3, #10
 800bb6a:	e7d3      	b.n	800bb14 <_strtoul_l.constprop.0+0x3c>
 800bb6c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bb70:	f1bc 0f19 	cmp.w	ip, #25
 800bb74:	d801      	bhi.n	800bb7a <_strtoul_l.constprop.0+0xa2>
 800bb76:	3c37      	subs	r4, #55	@ 0x37
 800bb78:	e7dc      	b.n	800bb34 <_strtoul_l.constprop.0+0x5c>
 800bb7a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800bb7e:	f1bc 0f19 	cmp.w	ip, #25
 800bb82:	d804      	bhi.n	800bb8e <_strtoul_l.constprop.0+0xb6>
 800bb84:	3c57      	subs	r4, #87	@ 0x57
 800bb86:	e7d5      	b.n	800bb34 <_strtoul_l.constprop.0+0x5c>
 800bb88:	f04f 36ff 	mov.w	r6, #4294967295
 800bb8c:	e7df      	b.n	800bb4e <_strtoul_l.constprop.0+0x76>
 800bb8e:	1c73      	adds	r3, r6, #1
 800bb90:	d106      	bne.n	800bba0 <_strtoul_l.constprop.0+0xc8>
 800bb92:	2322      	movs	r3, #34	@ 0x22
 800bb94:	f8ce 3000 	str.w	r3, [lr]
 800bb98:	4630      	mov	r0, r6
 800bb9a:	b932      	cbnz	r2, 800bbaa <_strtoul_l.constprop.0+0xd2>
 800bb9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bba0:	b107      	cbz	r7, 800bba4 <_strtoul_l.constprop.0+0xcc>
 800bba2:	4240      	negs	r0, r0
 800bba4:	2a00      	cmp	r2, #0
 800bba6:	d0f9      	beq.n	800bb9c <_strtoul_l.constprop.0+0xc4>
 800bba8:	b106      	cbz	r6, 800bbac <_strtoul_l.constprop.0+0xd4>
 800bbaa:	1e69      	subs	r1, r5, #1
 800bbac:	6011      	str	r1, [r2, #0]
 800bbae:	e7f5      	b.n	800bb9c <_strtoul_l.constprop.0+0xc4>
 800bbb0:	0800c981 	.word	0x0800c981

0800bbb4 <_strtoul_r>:
 800bbb4:	f7ff bf90 	b.w	800bad8 <_strtoul_l.constprop.0>

0800bbb8 <__ascii_wctomb>:
 800bbb8:	4603      	mov	r3, r0
 800bbba:	4608      	mov	r0, r1
 800bbbc:	b141      	cbz	r1, 800bbd0 <__ascii_wctomb+0x18>
 800bbbe:	2aff      	cmp	r2, #255	@ 0xff
 800bbc0:	d904      	bls.n	800bbcc <__ascii_wctomb+0x14>
 800bbc2:	228a      	movs	r2, #138	@ 0x8a
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbca:	4770      	bx	lr
 800bbcc:	700a      	strb	r2, [r1, #0]
 800bbce:	2001      	movs	r0, #1
 800bbd0:	4770      	bx	lr
	...

0800bbd4 <fiprintf>:
 800bbd4:	b40e      	push	{r1, r2, r3}
 800bbd6:	b503      	push	{r0, r1, lr}
 800bbd8:	4601      	mov	r1, r0
 800bbda:	ab03      	add	r3, sp, #12
 800bbdc:	4805      	ldr	r0, [pc, #20]	@ (800bbf4 <fiprintf+0x20>)
 800bbde:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe2:	6800      	ldr	r0, [r0, #0]
 800bbe4:	9301      	str	r3, [sp, #4]
 800bbe6:	f000 f83f 	bl	800bc68 <_vfiprintf_r>
 800bbea:	b002      	add	sp, #8
 800bbec:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbf0:	b003      	add	sp, #12
 800bbf2:	4770      	bx	lr
 800bbf4:	20000034 	.word	0x20000034

0800bbf8 <abort>:
 800bbf8:	b508      	push	{r3, lr}
 800bbfa:	2006      	movs	r0, #6
 800bbfc:	f000 fa08 	bl	800c010 <raise>
 800bc00:	2001      	movs	r0, #1
 800bc02:	f7f6 fe81 	bl	8002908 <_exit>

0800bc06 <_malloc_usable_size_r>:
 800bc06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc0a:	1f18      	subs	r0, r3, #4
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	bfbc      	itt	lt
 800bc10:	580b      	ldrlt	r3, [r1, r0]
 800bc12:	18c0      	addlt	r0, r0, r3
 800bc14:	4770      	bx	lr

0800bc16 <__sfputc_r>:
 800bc16:	6893      	ldr	r3, [r2, #8]
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	b410      	push	{r4}
 800bc1e:	6093      	str	r3, [r2, #8]
 800bc20:	da08      	bge.n	800bc34 <__sfputc_r+0x1e>
 800bc22:	6994      	ldr	r4, [r2, #24]
 800bc24:	42a3      	cmp	r3, r4
 800bc26:	db01      	blt.n	800bc2c <__sfputc_r+0x16>
 800bc28:	290a      	cmp	r1, #10
 800bc2a:	d103      	bne.n	800bc34 <__sfputc_r+0x1e>
 800bc2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc30:	f000 b932 	b.w	800be98 <__swbuf_r>
 800bc34:	6813      	ldr	r3, [r2, #0]
 800bc36:	1c58      	adds	r0, r3, #1
 800bc38:	6010      	str	r0, [r2, #0]
 800bc3a:	7019      	strb	r1, [r3, #0]
 800bc3c:	4608      	mov	r0, r1
 800bc3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <__sfputs_r>:
 800bc44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc46:	4606      	mov	r6, r0
 800bc48:	460f      	mov	r7, r1
 800bc4a:	4614      	mov	r4, r2
 800bc4c:	18d5      	adds	r5, r2, r3
 800bc4e:	42ac      	cmp	r4, r5
 800bc50:	d101      	bne.n	800bc56 <__sfputs_r+0x12>
 800bc52:	2000      	movs	r0, #0
 800bc54:	e007      	b.n	800bc66 <__sfputs_r+0x22>
 800bc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5a:	463a      	mov	r2, r7
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7ff ffda 	bl	800bc16 <__sfputc_r>
 800bc62:	1c43      	adds	r3, r0, #1
 800bc64:	d1f3      	bne.n	800bc4e <__sfputs_r+0xa>
 800bc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bc68 <_vfiprintf_r>:
 800bc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6c:	460d      	mov	r5, r1
 800bc6e:	b09d      	sub	sp, #116	@ 0x74
 800bc70:	4614      	mov	r4, r2
 800bc72:	4698      	mov	r8, r3
 800bc74:	4606      	mov	r6, r0
 800bc76:	b118      	cbz	r0, 800bc80 <_vfiprintf_r+0x18>
 800bc78:	6a03      	ldr	r3, [r0, #32]
 800bc7a:	b90b      	cbnz	r3, 800bc80 <_vfiprintf_r+0x18>
 800bc7c:	f7fc f9ce 	bl	800801c <__sinit>
 800bc80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc82:	07d9      	lsls	r1, r3, #31
 800bc84:	d405      	bmi.n	800bc92 <_vfiprintf_r+0x2a>
 800bc86:	89ab      	ldrh	r3, [r5, #12]
 800bc88:	059a      	lsls	r2, r3, #22
 800bc8a:	d402      	bmi.n	800bc92 <_vfiprintf_r+0x2a>
 800bc8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc8e:	f7fc fb08 	bl	80082a2 <__retarget_lock_acquire_recursive>
 800bc92:	89ab      	ldrh	r3, [r5, #12]
 800bc94:	071b      	lsls	r3, r3, #28
 800bc96:	d501      	bpl.n	800bc9c <_vfiprintf_r+0x34>
 800bc98:	692b      	ldr	r3, [r5, #16]
 800bc9a:	b99b      	cbnz	r3, 800bcc4 <_vfiprintf_r+0x5c>
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f000 f938 	bl	800bf14 <__swsetup_r>
 800bca4:	b170      	cbz	r0, 800bcc4 <_vfiprintf_r+0x5c>
 800bca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bca8:	07dc      	lsls	r4, r3, #31
 800bcaa:	d504      	bpl.n	800bcb6 <_vfiprintf_r+0x4e>
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	b01d      	add	sp, #116	@ 0x74
 800bcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb6:	89ab      	ldrh	r3, [r5, #12]
 800bcb8:	0598      	lsls	r0, r3, #22
 800bcba:	d4f7      	bmi.n	800bcac <_vfiprintf_r+0x44>
 800bcbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcbe:	f7fc faf1 	bl	80082a4 <__retarget_lock_release_recursive>
 800bcc2:	e7f3      	b.n	800bcac <_vfiprintf_r+0x44>
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcc8:	2320      	movs	r3, #32
 800bcca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bcce:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcd2:	2330      	movs	r3, #48	@ 0x30
 800bcd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800be84 <_vfiprintf_r+0x21c>
 800bcd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bcdc:	f04f 0901 	mov.w	r9, #1
 800bce0:	4623      	mov	r3, r4
 800bce2:	469a      	mov	sl, r3
 800bce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bce8:	b10a      	cbz	r2, 800bcee <_vfiprintf_r+0x86>
 800bcea:	2a25      	cmp	r2, #37	@ 0x25
 800bcec:	d1f9      	bne.n	800bce2 <_vfiprintf_r+0x7a>
 800bcee:	ebba 0b04 	subs.w	fp, sl, r4
 800bcf2:	d00b      	beq.n	800bd0c <_vfiprintf_r+0xa4>
 800bcf4:	465b      	mov	r3, fp
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	f7ff ffa2 	bl	800bc44 <__sfputs_r>
 800bd00:	3001      	adds	r0, #1
 800bd02:	f000 80a7 	beq.w	800be54 <_vfiprintf_r+0x1ec>
 800bd06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd08:	445a      	add	r2, fp
 800bd0a:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd0c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 809f 	beq.w	800be54 <_vfiprintf_r+0x1ec>
 800bd16:	2300      	movs	r3, #0
 800bd18:	f04f 32ff 	mov.w	r2, #4294967295
 800bd1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd20:	f10a 0a01 	add.w	sl, sl, #1
 800bd24:	9304      	str	r3, [sp, #16]
 800bd26:	9307      	str	r3, [sp, #28]
 800bd28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd2c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd2e:	4654      	mov	r4, sl
 800bd30:	2205      	movs	r2, #5
 800bd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd36:	4853      	ldr	r0, [pc, #332]	@ (800be84 <_vfiprintf_r+0x21c>)
 800bd38:	f7f4 fa52 	bl	80001e0 <memchr>
 800bd3c:	9a04      	ldr	r2, [sp, #16]
 800bd3e:	b9d8      	cbnz	r0, 800bd78 <_vfiprintf_r+0x110>
 800bd40:	06d1      	lsls	r1, r2, #27
 800bd42:	bf44      	itt	mi
 800bd44:	2320      	movmi	r3, #32
 800bd46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd4a:	0713      	lsls	r3, r2, #28
 800bd4c:	bf44      	itt	mi
 800bd4e:	232b      	movmi	r3, #43	@ 0x2b
 800bd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bd54:	f89a 3000 	ldrb.w	r3, [sl]
 800bd58:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd5a:	d015      	beq.n	800bd88 <_vfiprintf_r+0x120>
 800bd5c:	9a07      	ldr	r2, [sp, #28]
 800bd5e:	4654      	mov	r4, sl
 800bd60:	2000      	movs	r0, #0
 800bd62:	f04f 0c0a 	mov.w	ip, #10
 800bd66:	4621      	mov	r1, r4
 800bd68:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd6c:	3b30      	subs	r3, #48	@ 0x30
 800bd6e:	2b09      	cmp	r3, #9
 800bd70:	d94b      	bls.n	800be0a <_vfiprintf_r+0x1a2>
 800bd72:	b1b0      	cbz	r0, 800bda2 <_vfiprintf_r+0x13a>
 800bd74:	9207      	str	r2, [sp, #28]
 800bd76:	e014      	b.n	800bda2 <_vfiprintf_r+0x13a>
 800bd78:	eba0 0308 	sub.w	r3, r0, r8
 800bd7c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd80:	4313      	orrs	r3, r2
 800bd82:	9304      	str	r3, [sp, #16]
 800bd84:	46a2      	mov	sl, r4
 800bd86:	e7d2      	b.n	800bd2e <_vfiprintf_r+0xc6>
 800bd88:	9b03      	ldr	r3, [sp, #12]
 800bd8a:	1d19      	adds	r1, r3, #4
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	9103      	str	r1, [sp, #12]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	bfbb      	ittet	lt
 800bd94:	425b      	neglt	r3, r3
 800bd96:	f042 0202 	orrlt.w	r2, r2, #2
 800bd9a:	9307      	strge	r3, [sp, #28]
 800bd9c:	9307      	strlt	r3, [sp, #28]
 800bd9e:	bfb8      	it	lt
 800bda0:	9204      	strlt	r2, [sp, #16]
 800bda2:	7823      	ldrb	r3, [r4, #0]
 800bda4:	2b2e      	cmp	r3, #46	@ 0x2e
 800bda6:	d10a      	bne.n	800bdbe <_vfiprintf_r+0x156>
 800bda8:	7863      	ldrb	r3, [r4, #1]
 800bdaa:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdac:	d132      	bne.n	800be14 <_vfiprintf_r+0x1ac>
 800bdae:	9b03      	ldr	r3, [sp, #12]
 800bdb0:	1d1a      	adds	r2, r3, #4
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	9203      	str	r2, [sp, #12]
 800bdb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bdba:	3402      	adds	r4, #2
 800bdbc:	9305      	str	r3, [sp, #20]
 800bdbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800be94 <_vfiprintf_r+0x22c>
 800bdc2:	7821      	ldrb	r1, [r4, #0]
 800bdc4:	2203      	movs	r2, #3
 800bdc6:	4650      	mov	r0, sl
 800bdc8:	f7f4 fa0a 	bl	80001e0 <memchr>
 800bdcc:	b138      	cbz	r0, 800bdde <_vfiprintf_r+0x176>
 800bdce:	9b04      	ldr	r3, [sp, #16]
 800bdd0:	eba0 000a 	sub.w	r0, r0, sl
 800bdd4:	2240      	movs	r2, #64	@ 0x40
 800bdd6:	4082      	lsls	r2, r0
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	3401      	adds	r4, #1
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bde2:	4829      	ldr	r0, [pc, #164]	@ (800be88 <_vfiprintf_r+0x220>)
 800bde4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bde8:	2206      	movs	r2, #6
 800bdea:	f7f4 f9f9 	bl	80001e0 <memchr>
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	d03f      	beq.n	800be72 <_vfiprintf_r+0x20a>
 800bdf2:	4b26      	ldr	r3, [pc, #152]	@ (800be8c <_vfiprintf_r+0x224>)
 800bdf4:	bb1b      	cbnz	r3, 800be3e <_vfiprintf_r+0x1d6>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	3307      	adds	r3, #7
 800bdfa:	f023 0307 	bic.w	r3, r3, #7
 800bdfe:	3308      	adds	r3, #8
 800be00:	9303      	str	r3, [sp, #12]
 800be02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be04:	443b      	add	r3, r7
 800be06:	9309      	str	r3, [sp, #36]	@ 0x24
 800be08:	e76a      	b.n	800bce0 <_vfiprintf_r+0x78>
 800be0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800be0e:	460c      	mov	r4, r1
 800be10:	2001      	movs	r0, #1
 800be12:	e7a8      	b.n	800bd66 <_vfiprintf_r+0xfe>
 800be14:	2300      	movs	r3, #0
 800be16:	3401      	adds	r4, #1
 800be18:	9305      	str	r3, [sp, #20]
 800be1a:	4619      	mov	r1, r3
 800be1c:	f04f 0c0a 	mov.w	ip, #10
 800be20:	4620      	mov	r0, r4
 800be22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be26:	3a30      	subs	r2, #48	@ 0x30
 800be28:	2a09      	cmp	r2, #9
 800be2a:	d903      	bls.n	800be34 <_vfiprintf_r+0x1cc>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0c6      	beq.n	800bdbe <_vfiprintf_r+0x156>
 800be30:	9105      	str	r1, [sp, #20]
 800be32:	e7c4      	b.n	800bdbe <_vfiprintf_r+0x156>
 800be34:	fb0c 2101 	mla	r1, ip, r1, r2
 800be38:	4604      	mov	r4, r0
 800be3a:	2301      	movs	r3, #1
 800be3c:	e7f0      	b.n	800be20 <_vfiprintf_r+0x1b8>
 800be3e:	ab03      	add	r3, sp, #12
 800be40:	9300      	str	r3, [sp, #0]
 800be42:	462a      	mov	r2, r5
 800be44:	4b12      	ldr	r3, [pc, #72]	@ (800be90 <_vfiprintf_r+0x228>)
 800be46:	a904      	add	r1, sp, #16
 800be48:	4630      	mov	r0, r6
 800be4a:	f7fb fa8f 	bl	800736c <_printf_float>
 800be4e:	4607      	mov	r7, r0
 800be50:	1c78      	adds	r0, r7, #1
 800be52:	d1d6      	bne.n	800be02 <_vfiprintf_r+0x19a>
 800be54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be56:	07d9      	lsls	r1, r3, #31
 800be58:	d405      	bmi.n	800be66 <_vfiprintf_r+0x1fe>
 800be5a:	89ab      	ldrh	r3, [r5, #12]
 800be5c:	059a      	lsls	r2, r3, #22
 800be5e:	d402      	bmi.n	800be66 <_vfiprintf_r+0x1fe>
 800be60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be62:	f7fc fa1f 	bl	80082a4 <__retarget_lock_release_recursive>
 800be66:	89ab      	ldrh	r3, [r5, #12]
 800be68:	065b      	lsls	r3, r3, #25
 800be6a:	f53f af1f 	bmi.w	800bcac <_vfiprintf_r+0x44>
 800be6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800be70:	e71e      	b.n	800bcb0 <_vfiprintf_r+0x48>
 800be72:	ab03      	add	r3, sp, #12
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	462a      	mov	r2, r5
 800be78:	4b05      	ldr	r3, [pc, #20]	@ (800be90 <_vfiprintf_r+0x228>)
 800be7a:	a904      	add	r1, sp, #16
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7fb fd0d 	bl	800789c <_printf_i>
 800be82:	e7e4      	b.n	800be4e <_vfiprintf_r+0x1e6>
 800be84:	0800ca81 	.word	0x0800ca81
 800be88:	0800ca8b 	.word	0x0800ca8b
 800be8c:	0800736d 	.word	0x0800736d
 800be90:	0800bc45 	.word	0x0800bc45
 800be94:	0800ca87 	.word	0x0800ca87

0800be98 <__swbuf_r>:
 800be98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9a:	460e      	mov	r6, r1
 800be9c:	4614      	mov	r4, r2
 800be9e:	4605      	mov	r5, r0
 800bea0:	b118      	cbz	r0, 800beaa <__swbuf_r+0x12>
 800bea2:	6a03      	ldr	r3, [r0, #32]
 800bea4:	b90b      	cbnz	r3, 800beaa <__swbuf_r+0x12>
 800bea6:	f7fc f8b9 	bl	800801c <__sinit>
 800beaa:	69a3      	ldr	r3, [r4, #24]
 800beac:	60a3      	str	r3, [r4, #8]
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	071a      	lsls	r2, r3, #28
 800beb2:	d501      	bpl.n	800beb8 <__swbuf_r+0x20>
 800beb4:	6923      	ldr	r3, [r4, #16]
 800beb6:	b943      	cbnz	r3, 800beca <__swbuf_r+0x32>
 800beb8:	4621      	mov	r1, r4
 800beba:	4628      	mov	r0, r5
 800bebc:	f000 f82a 	bl	800bf14 <__swsetup_r>
 800bec0:	b118      	cbz	r0, 800beca <__swbuf_r+0x32>
 800bec2:	f04f 37ff 	mov.w	r7, #4294967295
 800bec6:	4638      	mov	r0, r7
 800bec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beca:	6823      	ldr	r3, [r4, #0]
 800becc:	6922      	ldr	r2, [r4, #16]
 800bece:	1a98      	subs	r0, r3, r2
 800bed0:	6963      	ldr	r3, [r4, #20]
 800bed2:	b2f6      	uxtb	r6, r6
 800bed4:	4283      	cmp	r3, r0
 800bed6:	4637      	mov	r7, r6
 800bed8:	dc05      	bgt.n	800bee6 <__swbuf_r+0x4e>
 800beda:	4621      	mov	r1, r4
 800bedc:	4628      	mov	r0, r5
 800bede:	f7ff f96f 	bl	800b1c0 <_fflush_r>
 800bee2:	2800      	cmp	r0, #0
 800bee4:	d1ed      	bne.n	800bec2 <__swbuf_r+0x2a>
 800bee6:	68a3      	ldr	r3, [r4, #8]
 800bee8:	3b01      	subs	r3, #1
 800beea:	60a3      	str	r3, [r4, #8]
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	6022      	str	r2, [r4, #0]
 800bef2:	701e      	strb	r6, [r3, #0]
 800bef4:	6962      	ldr	r2, [r4, #20]
 800bef6:	1c43      	adds	r3, r0, #1
 800bef8:	429a      	cmp	r2, r3
 800befa:	d004      	beq.n	800bf06 <__swbuf_r+0x6e>
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	07db      	lsls	r3, r3, #31
 800bf00:	d5e1      	bpl.n	800bec6 <__swbuf_r+0x2e>
 800bf02:	2e0a      	cmp	r6, #10
 800bf04:	d1df      	bne.n	800bec6 <__swbuf_r+0x2e>
 800bf06:	4621      	mov	r1, r4
 800bf08:	4628      	mov	r0, r5
 800bf0a:	f7ff f959 	bl	800b1c0 <_fflush_r>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	d0d9      	beq.n	800bec6 <__swbuf_r+0x2e>
 800bf12:	e7d6      	b.n	800bec2 <__swbuf_r+0x2a>

0800bf14 <__swsetup_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4b29      	ldr	r3, [pc, #164]	@ (800bfbc <__swsetup_r+0xa8>)
 800bf18:	4605      	mov	r5, r0
 800bf1a:	6818      	ldr	r0, [r3, #0]
 800bf1c:	460c      	mov	r4, r1
 800bf1e:	b118      	cbz	r0, 800bf28 <__swsetup_r+0x14>
 800bf20:	6a03      	ldr	r3, [r0, #32]
 800bf22:	b90b      	cbnz	r3, 800bf28 <__swsetup_r+0x14>
 800bf24:	f7fc f87a 	bl	800801c <__sinit>
 800bf28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf2c:	0719      	lsls	r1, r3, #28
 800bf2e:	d422      	bmi.n	800bf76 <__swsetup_r+0x62>
 800bf30:	06da      	lsls	r2, r3, #27
 800bf32:	d407      	bmi.n	800bf44 <__swsetup_r+0x30>
 800bf34:	2209      	movs	r2, #9
 800bf36:	602a      	str	r2, [r5, #0]
 800bf38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf3c:	81a3      	strh	r3, [r4, #12]
 800bf3e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf42:	e033      	b.n	800bfac <__swsetup_r+0x98>
 800bf44:	0758      	lsls	r0, r3, #29
 800bf46:	d512      	bpl.n	800bf6e <__swsetup_r+0x5a>
 800bf48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf4a:	b141      	cbz	r1, 800bf5e <__swsetup_r+0x4a>
 800bf4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf50:	4299      	cmp	r1, r3
 800bf52:	d002      	beq.n	800bf5a <__swsetup_r+0x46>
 800bf54:	4628      	mov	r0, r5
 800bf56:	f7fd f807 	bl	8008f68 <_free_r>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bf64:	81a3      	strh	r3, [r4, #12]
 800bf66:	2300      	movs	r3, #0
 800bf68:	6063      	str	r3, [r4, #4]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	89a3      	ldrh	r3, [r4, #12]
 800bf70:	f043 0308 	orr.w	r3, r3, #8
 800bf74:	81a3      	strh	r3, [r4, #12]
 800bf76:	6923      	ldr	r3, [r4, #16]
 800bf78:	b94b      	cbnz	r3, 800bf8e <__swsetup_r+0x7a>
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bf80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf84:	d003      	beq.n	800bf8e <__swsetup_r+0x7a>
 800bf86:	4621      	mov	r1, r4
 800bf88:	4628      	mov	r0, r5
 800bf8a:	f000 f883 	bl	800c094 <__smakebuf_r>
 800bf8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf92:	f013 0201 	ands.w	r2, r3, #1
 800bf96:	d00a      	beq.n	800bfae <__swsetup_r+0x9a>
 800bf98:	2200      	movs	r2, #0
 800bf9a:	60a2      	str	r2, [r4, #8]
 800bf9c:	6962      	ldr	r2, [r4, #20]
 800bf9e:	4252      	negs	r2, r2
 800bfa0:	61a2      	str	r2, [r4, #24]
 800bfa2:	6922      	ldr	r2, [r4, #16]
 800bfa4:	b942      	cbnz	r2, 800bfb8 <__swsetup_r+0xa4>
 800bfa6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bfaa:	d1c5      	bne.n	800bf38 <__swsetup_r+0x24>
 800bfac:	bd38      	pop	{r3, r4, r5, pc}
 800bfae:	0799      	lsls	r1, r3, #30
 800bfb0:	bf58      	it	pl
 800bfb2:	6962      	ldrpl	r2, [r4, #20]
 800bfb4:	60a2      	str	r2, [r4, #8]
 800bfb6:	e7f4      	b.n	800bfa2 <__swsetup_r+0x8e>
 800bfb8:	2000      	movs	r0, #0
 800bfba:	e7f7      	b.n	800bfac <__swsetup_r+0x98>
 800bfbc:	20000034 	.word	0x20000034

0800bfc0 <_raise_r>:
 800bfc0:	291f      	cmp	r1, #31
 800bfc2:	b538      	push	{r3, r4, r5, lr}
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	d904      	bls.n	800bfd4 <_raise_r+0x14>
 800bfca:	2316      	movs	r3, #22
 800bfcc:	6003      	str	r3, [r0, #0]
 800bfce:	f04f 30ff 	mov.w	r0, #4294967295
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bfd6:	b112      	cbz	r2, 800bfde <_raise_r+0x1e>
 800bfd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfdc:	b94b      	cbnz	r3, 800bff2 <_raise_r+0x32>
 800bfde:	4628      	mov	r0, r5
 800bfe0:	f000 f830 	bl	800c044 <_getpid_r>
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	4628      	mov	r0, r5
 800bfea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfee:	f000 b817 	b.w	800c020 <_kill_r>
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d00a      	beq.n	800c00c <_raise_r+0x4c>
 800bff6:	1c59      	adds	r1, r3, #1
 800bff8:	d103      	bne.n	800c002 <_raise_r+0x42>
 800bffa:	2316      	movs	r3, #22
 800bffc:	6003      	str	r3, [r0, #0]
 800bffe:	2001      	movs	r0, #1
 800c000:	e7e7      	b.n	800bfd2 <_raise_r+0x12>
 800c002:	2100      	movs	r1, #0
 800c004:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c008:	4620      	mov	r0, r4
 800c00a:	4798      	blx	r3
 800c00c:	2000      	movs	r0, #0
 800c00e:	e7e0      	b.n	800bfd2 <_raise_r+0x12>

0800c010 <raise>:
 800c010:	4b02      	ldr	r3, [pc, #8]	@ (800c01c <raise+0xc>)
 800c012:	4601      	mov	r1, r0
 800c014:	6818      	ldr	r0, [r3, #0]
 800c016:	f7ff bfd3 	b.w	800bfc0 <_raise_r>
 800c01a:	bf00      	nop
 800c01c:	20000034 	.word	0x20000034

0800c020 <_kill_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4d07      	ldr	r5, [pc, #28]	@ (800c040 <_kill_r+0x20>)
 800c024:	2300      	movs	r3, #0
 800c026:	4604      	mov	r4, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	4611      	mov	r1, r2
 800c02c:	602b      	str	r3, [r5, #0]
 800c02e:	f7f6 fc5b 	bl	80028e8 <_kill>
 800c032:	1c43      	adds	r3, r0, #1
 800c034:	d102      	bne.n	800c03c <_kill_r+0x1c>
 800c036:	682b      	ldr	r3, [r5, #0]
 800c038:	b103      	cbz	r3, 800c03c <_kill_r+0x1c>
 800c03a:	6023      	str	r3, [r4, #0]
 800c03c:	bd38      	pop	{r3, r4, r5, pc}
 800c03e:	bf00      	nop
 800c040:	200006bc 	.word	0x200006bc

0800c044 <_getpid_r>:
 800c044:	f7f6 bc48 	b.w	80028d8 <_getpid>

0800c048 <__swhatbuf_r>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	460c      	mov	r4, r1
 800c04c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c050:	2900      	cmp	r1, #0
 800c052:	b096      	sub	sp, #88	@ 0x58
 800c054:	4615      	mov	r5, r2
 800c056:	461e      	mov	r6, r3
 800c058:	da0d      	bge.n	800c076 <__swhatbuf_r+0x2e>
 800c05a:	89a3      	ldrh	r3, [r4, #12]
 800c05c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c060:	f04f 0100 	mov.w	r1, #0
 800c064:	bf14      	ite	ne
 800c066:	2340      	movne	r3, #64	@ 0x40
 800c068:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c06c:	2000      	movs	r0, #0
 800c06e:	6031      	str	r1, [r6, #0]
 800c070:	602b      	str	r3, [r5, #0]
 800c072:	b016      	add	sp, #88	@ 0x58
 800c074:	bd70      	pop	{r4, r5, r6, pc}
 800c076:	466a      	mov	r2, sp
 800c078:	f000 f848 	bl	800c10c <_fstat_r>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	dbec      	blt.n	800c05a <__swhatbuf_r+0x12>
 800c080:	9901      	ldr	r1, [sp, #4]
 800c082:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c086:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c08a:	4259      	negs	r1, r3
 800c08c:	4159      	adcs	r1, r3
 800c08e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c092:	e7eb      	b.n	800c06c <__swhatbuf_r+0x24>

0800c094 <__smakebuf_r>:
 800c094:	898b      	ldrh	r3, [r1, #12]
 800c096:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c098:	079d      	lsls	r5, r3, #30
 800c09a:	4606      	mov	r6, r0
 800c09c:	460c      	mov	r4, r1
 800c09e:	d507      	bpl.n	800c0b0 <__smakebuf_r+0x1c>
 800c0a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	6123      	str	r3, [r4, #16]
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	6163      	str	r3, [r4, #20]
 800c0ac:	b003      	add	sp, #12
 800c0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0b0:	ab01      	add	r3, sp, #4
 800c0b2:	466a      	mov	r2, sp
 800c0b4:	f7ff ffc8 	bl	800c048 <__swhatbuf_r>
 800c0b8:	9f00      	ldr	r7, [sp, #0]
 800c0ba:	4605      	mov	r5, r0
 800c0bc:	4639      	mov	r1, r7
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7fc ffc6 	bl	8009050 <_malloc_r>
 800c0c4:	b948      	cbnz	r0, 800c0da <__smakebuf_r+0x46>
 800c0c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0ca:	059a      	lsls	r2, r3, #22
 800c0cc:	d4ee      	bmi.n	800c0ac <__smakebuf_r+0x18>
 800c0ce:	f023 0303 	bic.w	r3, r3, #3
 800c0d2:	f043 0302 	orr.w	r3, r3, #2
 800c0d6:	81a3      	strh	r3, [r4, #12]
 800c0d8:	e7e2      	b.n	800c0a0 <__smakebuf_r+0xc>
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	6020      	str	r0, [r4, #0]
 800c0de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0e2:	81a3      	strh	r3, [r4, #12]
 800c0e4:	9b01      	ldr	r3, [sp, #4]
 800c0e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c0ea:	b15b      	cbz	r3, 800c104 <__smakebuf_r+0x70>
 800c0ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f000 f81d 	bl	800c130 <_isatty_r>
 800c0f6:	b128      	cbz	r0, 800c104 <__smakebuf_r+0x70>
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	f023 0303 	bic.w	r3, r3, #3
 800c0fe:	f043 0301 	orr.w	r3, r3, #1
 800c102:	81a3      	strh	r3, [r4, #12]
 800c104:	89a3      	ldrh	r3, [r4, #12]
 800c106:	431d      	orrs	r5, r3
 800c108:	81a5      	strh	r5, [r4, #12]
 800c10a:	e7cf      	b.n	800c0ac <__smakebuf_r+0x18>

0800c10c <_fstat_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4d07      	ldr	r5, [pc, #28]	@ (800c12c <_fstat_r+0x20>)
 800c110:	2300      	movs	r3, #0
 800c112:	4604      	mov	r4, r0
 800c114:	4608      	mov	r0, r1
 800c116:	4611      	mov	r1, r2
 800c118:	602b      	str	r3, [r5, #0]
 800c11a:	f7f6 fc45 	bl	80029a8 <_fstat>
 800c11e:	1c43      	adds	r3, r0, #1
 800c120:	d102      	bne.n	800c128 <_fstat_r+0x1c>
 800c122:	682b      	ldr	r3, [r5, #0]
 800c124:	b103      	cbz	r3, 800c128 <_fstat_r+0x1c>
 800c126:	6023      	str	r3, [r4, #0]
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	bf00      	nop
 800c12c:	200006bc 	.word	0x200006bc

0800c130 <_isatty_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4d06      	ldr	r5, [pc, #24]	@ (800c14c <_isatty_r+0x1c>)
 800c134:	2300      	movs	r3, #0
 800c136:	4604      	mov	r4, r0
 800c138:	4608      	mov	r0, r1
 800c13a:	602b      	str	r3, [r5, #0]
 800c13c:	f7f6 fc44 	bl	80029c8 <_isatty>
 800c140:	1c43      	adds	r3, r0, #1
 800c142:	d102      	bne.n	800c14a <_isatty_r+0x1a>
 800c144:	682b      	ldr	r3, [r5, #0]
 800c146:	b103      	cbz	r3, 800c14a <_isatty_r+0x1a>
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	200006bc 	.word	0x200006bc

0800c150 <atan2f>:
 800c150:	f000 b856 	b.w	800c200 <__ieee754_atan2f>

0800c154 <fmaxf>:
 800c154:	b508      	push	{r3, lr}
 800c156:	ed2d 8b02 	vpush	{d8}
 800c15a:	eeb0 8a40 	vmov.f32	s16, s0
 800c15e:	eef0 8a60 	vmov.f32	s17, s1
 800c162:	f000 f831 	bl	800c1c8 <__fpclassifyf>
 800c166:	b930      	cbnz	r0, 800c176 <fmaxf+0x22>
 800c168:	eeb0 8a68 	vmov.f32	s16, s17
 800c16c:	eeb0 0a48 	vmov.f32	s0, s16
 800c170:	ecbd 8b02 	vpop	{d8}
 800c174:	bd08      	pop	{r3, pc}
 800c176:	eeb0 0a68 	vmov.f32	s0, s17
 800c17a:	f000 f825 	bl	800c1c8 <__fpclassifyf>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d0f4      	beq.n	800c16c <fmaxf+0x18>
 800c182:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c18a:	dded      	ble.n	800c168 <fmaxf+0x14>
 800c18c:	e7ee      	b.n	800c16c <fmaxf+0x18>

0800c18e <fminf>:
 800c18e:	b508      	push	{r3, lr}
 800c190:	ed2d 8b02 	vpush	{d8}
 800c194:	eeb0 8a40 	vmov.f32	s16, s0
 800c198:	eef0 8a60 	vmov.f32	s17, s1
 800c19c:	f000 f814 	bl	800c1c8 <__fpclassifyf>
 800c1a0:	b930      	cbnz	r0, 800c1b0 <fminf+0x22>
 800c1a2:	eeb0 8a68 	vmov.f32	s16, s17
 800c1a6:	eeb0 0a48 	vmov.f32	s0, s16
 800c1aa:	ecbd 8b02 	vpop	{d8}
 800c1ae:	bd08      	pop	{r3, pc}
 800c1b0:	eeb0 0a68 	vmov.f32	s0, s17
 800c1b4:	f000 f808 	bl	800c1c8 <__fpclassifyf>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d0f4      	beq.n	800c1a6 <fminf+0x18>
 800c1bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c4:	d5ed      	bpl.n	800c1a2 <fminf+0x14>
 800c1c6:	e7ee      	b.n	800c1a6 <fminf+0x18>

0800c1c8 <__fpclassifyf>:
 800c1c8:	ee10 3a10 	vmov	r3, s0
 800c1cc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800c1d0:	d00d      	beq.n	800c1ee <__fpclassifyf+0x26>
 800c1d2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800c1d6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800c1da:	d30a      	bcc.n	800c1f2 <__fpclassifyf+0x2a>
 800c1dc:	4b07      	ldr	r3, [pc, #28]	@ (800c1fc <__fpclassifyf+0x34>)
 800c1de:	1e42      	subs	r2, r0, #1
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d908      	bls.n	800c1f6 <__fpclassifyf+0x2e>
 800c1e4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800c1e8:	4258      	negs	r0, r3
 800c1ea:	4158      	adcs	r0, r3
 800c1ec:	4770      	bx	lr
 800c1ee:	2002      	movs	r0, #2
 800c1f0:	4770      	bx	lr
 800c1f2:	2004      	movs	r0, #4
 800c1f4:	4770      	bx	lr
 800c1f6:	2003      	movs	r0, #3
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	007ffffe 	.word	0x007ffffe

0800c200 <__ieee754_atan2f>:
 800c200:	ee10 2a90 	vmov	r2, s1
 800c204:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800c208:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c20c:	b510      	push	{r4, lr}
 800c20e:	eef0 7a40 	vmov.f32	s15, s0
 800c212:	d806      	bhi.n	800c222 <__ieee754_atan2f+0x22>
 800c214:	ee10 0a10 	vmov	r0, s0
 800c218:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800c21c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c220:	d904      	bls.n	800c22c <__ieee754_atan2f+0x2c>
 800c222:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800c226:	eeb0 0a67 	vmov.f32	s0, s15
 800c22a:	bd10      	pop	{r4, pc}
 800c22c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800c230:	d103      	bne.n	800c23a <__ieee754_atan2f+0x3a>
 800c232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c236:	f000 b883 	b.w	800c340 <atanf>
 800c23a:	1794      	asrs	r4, r2, #30
 800c23c:	f004 0402 	and.w	r4, r4, #2
 800c240:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c244:	b943      	cbnz	r3, 800c258 <__ieee754_atan2f+0x58>
 800c246:	2c02      	cmp	r4, #2
 800c248:	d05e      	beq.n	800c308 <__ieee754_atan2f+0x108>
 800c24a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c31c <__ieee754_atan2f+0x11c>
 800c24e:	2c03      	cmp	r4, #3
 800c250:	bf08      	it	eq
 800c252:	eef0 7a47 	vmoveq.f32	s15, s14
 800c256:	e7e6      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c258:	b941      	cbnz	r1, 800c26c <__ieee754_atan2f+0x6c>
 800c25a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800c320 <__ieee754_atan2f+0x120>
 800c25e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c324 <__ieee754_atan2f+0x124>
 800c262:	2800      	cmp	r0, #0
 800c264:	bfb8      	it	lt
 800c266:	eef0 7a47 	vmovlt.f32	s15, s14
 800c26a:	e7dc      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c26c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c270:	d110      	bne.n	800c294 <__ieee754_atan2f+0x94>
 800c272:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c276:	f104 34ff 	add.w	r4, r4, #4294967295
 800c27a:	d107      	bne.n	800c28c <__ieee754_atan2f+0x8c>
 800c27c:	2c02      	cmp	r4, #2
 800c27e:	d846      	bhi.n	800c30e <__ieee754_atan2f+0x10e>
 800c280:	4b29      	ldr	r3, [pc, #164]	@ (800c328 <__ieee754_atan2f+0x128>)
 800c282:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c286:	edd3 7a00 	vldr	s15, [r3]
 800c28a:	e7cc      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c28c:	2c02      	cmp	r4, #2
 800c28e:	d841      	bhi.n	800c314 <__ieee754_atan2f+0x114>
 800c290:	4b26      	ldr	r3, [pc, #152]	@ (800c32c <__ieee754_atan2f+0x12c>)
 800c292:	e7f6      	b.n	800c282 <__ieee754_atan2f+0x82>
 800c294:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c298:	d0df      	beq.n	800c25a <__ieee754_atan2f+0x5a>
 800c29a:	1a5b      	subs	r3, r3, r1
 800c29c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800c2a0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800c2a4:	da1a      	bge.n	800c2dc <__ieee754_atan2f+0xdc>
 800c2a6:	2a00      	cmp	r2, #0
 800c2a8:	da01      	bge.n	800c2ae <__ieee754_atan2f+0xae>
 800c2aa:	313c      	adds	r1, #60	@ 0x3c
 800c2ac:	db19      	blt.n	800c2e2 <__ieee754_atan2f+0xe2>
 800c2ae:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800c2b2:	f000 f919 	bl	800c4e8 <fabsf>
 800c2b6:	f000 f843 	bl	800c340 <atanf>
 800c2ba:	eef0 7a40 	vmov.f32	s15, s0
 800c2be:	2c01      	cmp	r4, #1
 800c2c0:	d012      	beq.n	800c2e8 <__ieee754_atan2f+0xe8>
 800c2c2:	2c02      	cmp	r4, #2
 800c2c4:	d017      	beq.n	800c2f6 <__ieee754_atan2f+0xf6>
 800c2c6:	2c00      	cmp	r4, #0
 800c2c8:	d0ad      	beq.n	800c226 <__ieee754_atan2f+0x26>
 800c2ca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800c330 <__ieee754_atan2f+0x130>
 800c2ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2d2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800c334 <__ieee754_atan2f+0x134>
 800c2d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2da:	e7a4      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c2dc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800c320 <__ieee754_atan2f+0x120>
 800c2e0:	e7ed      	b.n	800c2be <__ieee754_atan2f+0xbe>
 800c2e2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800c338 <__ieee754_atan2f+0x138>
 800c2e6:	e7ea      	b.n	800c2be <__ieee754_atan2f+0xbe>
 800c2e8:	ee17 3a90 	vmov	r3, s15
 800c2ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c2f0:	ee07 3a90 	vmov	s15, r3
 800c2f4:	e797      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c2f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c330 <__ieee754_atan2f+0x130>
 800c2fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c2fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c334 <__ieee754_atan2f+0x134>
 800c302:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c306:	e78e      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c308:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800c334 <__ieee754_atan2f+0x134>
 800c30c:	e78b      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c30e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800c33c <__ieee754_atan2f+0x13c>
 800c312:	e788      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c314:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800c338 <__ieee754_atan2f+0x138>
 800c318:	e785      	b.n	800c226 <__ieee754_atan2f+0x26>
 800c31a:	bf00      	nop
 800c31c:	c0490fdb 	.word	0xc0490fdb
 800c320:	3fc90fdb 	.word	0x3fc90fdb
 800c324:	bfc90fdb 	.word	0xbfc90fdb
 800c328:	0800cb60 	.word	0x0800cb60
 800c32c:	0800cb54 	.word	0x0800cb54
 800c330:	33bbbd2e 	.word	0x33bbbd2e
 800c334:	40490fdb 	.word	0x40490fdb
 800c338:	00000000 	.word	0x00000000
 800c33c:	3f490fdb 	.word	0x3f490fdb

0800c340 <atanf>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	ee10 5a10 	vmov	r5, s0
 800c346:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800c34a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800c34e:	eef0 7a40 	vmov.f32	s15, s0
 800c352:	d310      	bcc.n	800c376 <atanf+0x36>
 800c354:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800c358:	d904      	bls.n	800c364 <atanf+0x24>
 800c35a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c35e:	eeb0 0a67 	vmov.f32	s0, s15
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800c49c <atanf+0x15c>
 800c368:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800c4a0 <atanf+0x160>
 800c36c:	2d00      	cmp	r5, #0
 800c36e:	bfc8      	it	gt
 800c370:	eef0 7a47 	vmovgt.f32	s15, s14
 800c374:	e7f3      	b.n	800c35e <atanf+0x1e>
 800c376:	4b4b      	ldr	r3, [pc, #300]	@ (800c4a4 <atanf+0x164>)
 800c378:	429c      	cmp	r4, r3
 800c37a:	d810      	bhi.n	800c39e <atanf+0x5e>
 800c37c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800c380:	d20a      	bcs.n	800c398 <atanf+0x58>
 800c382:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800c4a8 <atanf+0x168>
 800c386:	ee30 7a07 	vadd.f32	s14, s0, s14
 800c38a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c38e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800c392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c396:	dce2      	bgt.n	800c35e <atanf+0x1e>
 800c398:	f04f 33ff 	mov.w	r3, #4294967295
 800c39c:	e013      	b.n	800c3c6 <atanf+0x86>
 800c39e:	f000 f8a3 	bl	800c4e8 <fabsf>
 800c3a2:	4b42      	ldr	r3, [pc, #264]	@ (800c4ac <atanf+0x16c>)
 800c3a4:	429c      	cmp	r4, r3
 800c3a6:	d84f      	bhi.n	800c448 <atanf+0x108>
 800c3a8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800c3ac:	429c      	cmp	r4, r3
 800c3ae:	d841      	bhi.n	800c434 <atanf+0xf4>
 800c3b0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800c3b4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c3b8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c3bc:	2300      	movs	r3, #0
 800c3be:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c3c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800c3cc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800c4b0 <atanf+0x170>
 800c3d0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800c4b4 <atanf+0x174>
 800c3d4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800c4b8 <atanf+0x178>
 800c3d8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800c3dc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800c3e0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800c4bc <atanf+0x17c>
 800c3e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c3e8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800c4c0 <atanf+0x180>
 800c3ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c3f0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c4c4 <atanf+0x184>
 800c3f4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800c3f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c4c8 <atanf+0x188>
 800c3fc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800c400:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800c4cc <atanf+0x18c>
 800c404:	eea6 5a87 	vfma.f32	s10, s13, s14
 800c408:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800c4d0 <atanf+0x190>
 800c40c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c410:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800c4d4 <atanf+0x194>
 800c414:	eea7 5a26 	vfma.f32	s10, s14, s13
 800c418:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800c4d8 <atanf+0x198>
 800c41c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800c420:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c424:	eea5 7a86 	vfma.f32	s14, s11, s12
 800c428:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c42c:	d121      	bne.n	800c472 <atanf+0x132>
 800c42e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c432:	e794      	b.n	800c35e <atanf+0x1e>
 800c434:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c438:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c43c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c440:	2301      	movs	r3, #1
 800c442:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c446:	e7be      	b.n	800c3c6 <atanf+0x86>
 800c448:	4b24      	ldr	r3, [pc, #144]	@ (800c4dc <atanf+0x19c>)
 800c44a:	429c      	cmp	r4, r3
 800c44c:	d80b      	bhi.n	800c466 <atanf+0x126>
 800c44e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800c452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c456:	eea0 7a27 	vfma.f32	s14, s0, s15
 800c45a:	2302      	movs	r3, #2
 800c45c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c464:	e7af      	b.n	800c3c6 <atanf+0x86>
 800c466:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800c46a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c46e:	2303      	movs	r3, #3
 800c470:	e7a9      	b.n	800c3c6 <atanf+0x86>
 800c472:	4a1b      	ldr	r2, [pc, #108]	@ (800c4e0 <atanf+0x1a0>)
 800c474:	491b      	ldr	r1, [pc, #108]	@ (800c4e4 <atanf+0x1a4>)
 800c476:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c47a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800c47e:	edd3 6a00 	vldr	s13, [r3]
 800c482:	ee37 7a66 	vsub.f32	s14, s14, s13
 800c486:	2d00      	cmp	r5, #0
 800c488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c48c:	edd2 7a00 	vldr	s15, [r2]
 800c490:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c494:	bfb8      	it	lt
 800c496:	eef1 7a67 	vneglt.f32	s15, s15
 800c49a:	e760      	b.n	800c35e <atanf+0x1e>
 800c49c:	bfc90fdb 	.word	0xbfc90fdb
 800c4a0:	3fc90fdb 	.word	0x3fc90fdb
 800c4a4:	3edfffff 	.word	0x3edfffff
 800c4a8:	7149f2ca 	.word	0x7149f2ca
 800c4ac:	3f97ffff 	.word	0x3f97ffff
 800c4b0:	3c8569d7 	.word	0x3c8569d7
 800c4b4:	3d4bda59 	.word	0x3d4bda59
 800c4b8:	bd6ef16b 	.word	0xbd6ef16b
 800c4bc:	3d886b35 	.word	0x3d886b35
 800c4c0:	3dba2e6e 	.word	0x3dba2e6e
 800c4c4:	3e124925 	.word	0x3e124925
 800c4c8:	3eaaaaab 	.word	0x3eaaaaab
 800c4cc:	bd15a221 	.word	0xbd15a221
 800c4d0:	bd9d8795 	.word	0xbd9d8795
 800c4d4:	bde38e38 	.word	0xbde38e38
 800c4d8:	be4ccccd 	.word	0xbe4ccccd
 800c4dc:	401bffff 	.word	0x401bffff
 800c4e0:	0800cb7c 	.word	0x0800cb7c
 800c4e4:	0800cb6c 	.word	0x0800cb6c

0800c4e8 <fabsf>:
 800c4e8:	ee10 3a10 	vmov	r3, s0
 800c4ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4f0:	ee00 3a10 	vmov	s0, r3
 800c4f4:	4770      	bx	lr
	...

0800c4f8 <_init>:
 800c4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fa:	bf00      	nop
 800c4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4fe:	bc08      	pop	{r3}
 800c500:	469e      	mov	lr, r3
 800c502:	4770      	bx	lr

0800c504 <_fini>:
 800c504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c506:	bf00      	nop
 800c508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50a:	bc08      	pop	{r3}
 800c50c:	469e      	mov	lr, r3
 800c50e:	4770      	bx	lr
