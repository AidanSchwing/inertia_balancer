
balancer_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009360  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009500  08009500  0000a500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099f0  080099f0  0000b1e0  2**0
                  CONTENTS
  4 .ARM          00000008  080099f0  080099f0  0000a9f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099f8  080099f8  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f8  080099f8  0000a9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099fc  080099fc  0000a9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009a00  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200001e0  08009be0  0000b1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000594  08009be0  0000b594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127bc  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002948  00000000  00000000  0001d9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00020318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d52  00000000  00000000  00021408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187a5  00000000  00000000  0002215a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001570e  00000000  00000000  0003a8ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000935d5  00000000  00000000  0005000d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e35e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059bc  00000000  00000000  000e3628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e8fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080094e8 	.word	0x080094e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080094e8 	.word	0x080094e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <IMU_init>:
uint8_t raw_data[6]; //for use with the above


//function definitions for the IMU
/// Checks I2C connection, reads the WHO_AM_I register, and scans device address for verification purposes. Prints debugging messages through uart.
void IMU_init(ICM_20948*p_IMU){
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b09a      	sub	sp, #104	@ 0x68
 8000f4c:	af04      	add	r7, sp, #16
 8000f4e:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(p_IMU->hi2c, ICM20948_I2C_ADDR, 1, 100); // i2c pointer & because we want the address
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	2364      	movs	r3, #100	@ 0x64
 8000f56:	2201      	movs	r2, #1
 8000f58:	21d2      	movs	r1, #210	@ 0xd2
 8000f5a:	f002 fa47 	bl	80033ec <HAL_I2C_IsDeviceReady>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
    	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 // addrr is 11001, added 0 for the function to read
    	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 // trials: number of times to try the connection
    	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	 // timout in ms
    if (ret == HAL_OK)
 8000f64:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d108      	bne.n	8000f7e <IMU_init+0x36>
      {
    	  HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"\r\n imu: connected ", 19, HAL_MAX_DELAY); // ensure string length is correct
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6858      	ldr	r0, [r3, #4]
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295
 8000f74:	2213      	movs	r2, #19
 8000f76:	4958      	ldr	r1, [pc, #352]	@ (80010d8 <IMU_init+0x190>)
 8000f78:	f004 faec 	bl	8005554 <HAL_UART_Transmit>
 8000f7c:	e007      	b.n	8000f8e <IMU_init+0x46>
      }
      else
      {
    	  HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"\r\n imu: no connection", 21, HAL_MAX_DELAY);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6858      	ldr	r0, [r3, #4]
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	2215      	movs	r2, #21
 8000f88:	4954      	ldr	r1, [pc, #336]	@ (80010dc <IMU_init+0x194>)
 8000f8a:	f004 fae3 	bl	8005554 <HAL_UART_Transmit>
    // checking the WHO_AM_I register
    uint8_t check;
    uint8_t data;

    // Check WHO_AM_I register
    HAL_I2C_Mem_Read(p_IMU->hi2c, ICM20948_I2C_ADDR, WHO_AM_I_REG, I2C_MEMADD_SIZE_8BIT, &check, 1, HAL_MAX_DELAY);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	9302      	str	r3, [sp, #8]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	9301      	str	r3, [sp, #4]
 8000f9c:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	21d2      	movs	r1, #210	@ 0xd2
 8000fa8:	f001 ffee 	bl	8002f88 <HAL_I2C_Mem_Read>
    if (check == 0xEA) // WHO_AM_I should return 0xEA for ICM-20948
 8000fac:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000fb0:	2bea      	cmp	r3, #234	@ 0xea
 8000fb2:	d12e      	bne.n	8001012 <IMU_init+0xca>
    {
    	HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"\r\n ICM-20948 found\r\n", 20, HAL_MAX_DELAY);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6858      	ldr	r0, [r3, #4]
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	2214      	movs	r2, #20
 8000fbe:	4948      	ldr	r1, [pc, #288]	@ (80010e0 <IMU_init+0x198>)
 8000fc0:	f004 fac8 	bl	8005554 <HAL_UART_Transmit>
         sprintf(msg, "WHO_AM_I reads 0x%02X\r\n", check);
 8000fc4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4946      	ldr	r1, [pc, #280]	@ (80010e4 <IMU_init+0x19c>)
 8000fcc:	4846      	ldr	r0, [pc, #280]	@ (80010e8 <IMU_init+0x1a0>)
 8000fce:	f005 ffe1 	bl	8006f94 <siprintf>
         HAL_UART_Transmit(p_IMU->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685c      	ldr	r4, [r3, #4]
 8000fd6:	4844      	ldr	r0, [pc, #272]	@ (80010e8 <IMU_init+0x1a0>)
 8000fd8:	f7ff f952 	bl	8000280 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe4:	4940      	ldr	r1, [pc, #256]	@ (80010e8 <IMU_init+0x1a0>)
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	f004 fab4 	bl	8005554 <HAL_UART_Transmit>
         // Wake up the sensor (clear sleep mode bit)
         data = 0x01;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
         HAL_I2C_Mem_Write(p_IMU->hi2c, ICM20948_I2C_ADDR, PWR_MGMT_1_REG, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6818      	ldr	r0, [r3, #0]
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	9302      	str	r3, [sp, #8]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	9301      	str	r3, [sp, #4]
 8001000:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	2206      	movs	r2, #6
 800100a:	21d2      	movs	r1, #210	@ 0xd2
 800100c:	f001 fec2 	bl	8002d94 <HAL_I2C_Mem_Write>
 8001010:	e007      	b.n	8001022 <IMU_init+0xda>
     }
     else
     {
    	 HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"ICM-20948 not found\r\n", 21, HAL_MAX_DELAY);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6858      	ldr	r0, [r3, #4]
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	2215      	movs	r2, #21
 800101c:	4933      	ldr	r1, [pc, #204]	@ (80010ec <IMU_init+0x1a4>)
 800101e:	f004 fa99 	bl	8005554 <HAL_UART_Transmit>
      }


     //I2C scanner
     char info[] = "Scanning I2C bus...\r\n";
 8001022:	4b33      	ldr	r3, [pc, #204]	@ (80010f0 <IMU_init+0x1a8>)
 8001024:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001028:	461d      	mov	r5, r3
 800102a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800102c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800102e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001032:	6020      	str	r0, [r4, #0]
 8001034:	3404      	adds	r4, #4
 8001036:	8021      	strh	r1, [r4, #0]
     HAL_UART_Transmit(p_IMU->huart, (uint8_t*)info, strlen(info), HAL_MAX_DELAY);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685c      	ldr	r4, [r3, #4]
 800103c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f91d 	bl	8000280 <strlen>
 8001046:	4603      	mov	r3, r0
 8001048:	b29a      	uxth	r2, r3
 800104a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	4620      	mov	r0, r4
 8001054:	f004 fa7e 	bl	8005554 <HAL_UART_Transmit>

     for (uint8_t addr = 1; addr < 128; addr++)
 8001058:	2301      	movs	r3, #1
 800105a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 800105e:	e031      	b.n	80010c4 <IMU_init+0x17c>
     {
    	 if (HAL_I2C_IsDeviceReady(p_IMU->hi2c, addr << 1, 1, 10) == HAL_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001068:	b29b      	uxth	r3, r3
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b299      	uxth	r1, r3
 800106e:	230a      	movs	r3, #10
 8001070:	2201      	movs	r2, #1
 8001072:	f002 f9bb 	bl	80033ec <HAL_I2C_IsDeviceReady>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d118      	bne.n	80010ae <IMU_init+0x166>
         {
    		 char msg[32];
    		 sprintf(msg, "Found device at 0x%02X\r\n", addr);
 800107c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	491b      	ldr	r1, [pc, #108]	@ (80010f4 <IMU_init+0x1ac>)
 8001086:	4618      	mov	r0, r3
 8001088:	f005 ff84 	bl	8006f94 <siprintf>
    		 HAL_UART_Transmit(p_IMU->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685c      	ldr	r4, [r3, #4]
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f8f3 	bl	8000280 <strlen>
 800109a:	4603      	mov	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	f107 0108 	add.w	r1, r7, #8
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	4620      	mov	r0, r4
 80010a8:	f004 fa54 	bl	8005554 <HAL_UART_Transmit>
 80010ac:	e005      	b.n	80010ba <IMU_init+0x172>
         } else {
    		 char msg[50];
    		 sprintf(msg, "No device found\r\n");
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4911      	ldr	r1, [pc, #68]	@ (80010f8 <IMU_init+0x1b0>)
 80010b4:	4618      	mov	r0, r3
 80010b6:	f005 ff6d 	bl	8006f94 <siprintf>
     for (uint8_t addr = 1; addr < 128; addr++)
 80010ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80010be:	3301      	adds	r3, #1
 80010c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80010c4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dac9      	bge.n	8001060 <IMU_init+0x118>
    		 //HAL_UART_Transmit(p_IMU->huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
         }
     }
}
 80010cc:	bf00      	nop
 80010ce:	bf00      	nop
 80010d0:	3758      	adds	r7, #88	@ 0x58
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bdb0      	pop	{r4, r5, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	08009500 	.word	0x08009500
 80010dc:	08009514 	.word	0x08009514
 80010e0:	0800952c 	.word	0x0800952c
 80010e4:	08009544 	.word	0x08009544
 80010e8:	200001fc 	.word	0x200001fc
 80010ec:	0800955c 	.word	0x0800955c
 80010f0:	080095a4 	.word	0x080095a4
 80010f4:	08009574 	.word	0x08009574
 80010f8:	08009590 	.word	0x08009590
 80010fc:	00000000 	.word	0x00000000

08001100 <IMU_read_accel>:


AccelData IMU_read_accel(ICM_20948*p_IMU){
 8001100:	b580      	push	{r7, lr}
 8001102:	b090      	sub	sp, #64	@ 0x40
 8001104:	af04      	add	r7, sp, #16
 8001106:	6178      	str	r0, [r7, #20]
	AccelData accel_data = {0};
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]

	if (HAL_I2C_Mem_Read(p_IMU->hi2c, ICM20948_I2C_ADDR, ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, raw_data, 6, HAL_MAX_DELAY) == HAL_OK)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	f04f 33ff 	mov.w	r3, #4294967295
 800111c:	9302      	str	r3, [sp, #8]
 800111e:	2306      	movs	r3, #6
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	4b87      	ldr	r3, [pc, #540]	@ (8001340 <IMU_read_accel+0x240>)
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	222d      	movs	r2, #45	@ 0x2d
 800112a:	21d2      	movs	r1, #210	@ 0xd2
 800112c:	f001 ff2c 	bl	8002f88 <HAL_I2C_Mem_Read>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	f040 80dc 	bne.w	80012f0 <IMU_read_accel+0x1f0>
	{
		accel_x_raw = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 8001138:	4b81      	ldr	r3, [pc, #516]	@ (8001340 <IMU_read_accel+0x240>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b7f      	ldr	r3, [pc, #508]	@ (8001340 <IMU_read_accel+0x240>)
 8001142:	785b      	ldrb	r3, [r3, #1]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b7e      	ldr	r3, [pc, #504]	@ (8001344 <IMU_read_accel+0x244>)
 800114c:	801a      	strh	r2, [r3, #0]
	    accel_y_raw = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 800114e:	4b7c      	ldr	r3, [pc, #496]	@ (8001340 <IMU_read_accel+0x240>)
 8001150:	789b      	ldrb	r3, [r3, #2]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b7a      	ldr	r3, [pc, #488]	@ (8001340 <IMU_read_accel+0x240>)
 8001158:	78db      	ldrb	r3, [r3, #3]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b79      	ldr	r3, [pc, #484]	@ (8001348 <IMU_read_accel+0x248>)
 8001162:	801a      	strh	r2, [r3, #0]
	    accel_z_raw = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 8001164:	4b76      	ldr	r3, [pc, #472]	@ (8001340 <IMU_read_accel+0x240>)
 8001166:	791b      	ldrb	r3, [r3, #4]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b74      	ldr	r3, [pc, #464]	@ (8001340 <IMU_read_accel+0x240>)
 800116e:	795b      	ldrb	r3, [r3, #5]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21a      	sxth	r2, r3
 8001176:	4b75      	ldr	r3, [pc, #468]	@ (800134c <IMU_read_accel+0x24c>)
 8001178:	801a      	strh	r2, [r3, #0]

	    // take the raw readings, divide by sensitivity, multiply by 9.81 to get reading m/s^2 reading
	    accel_x = (float)accel_x_raw * GRAV / ACCEL_FS;
 800117a:	4b72      	ldr	r3, [pc, #456]	@ (8001344 <IMU_read_accel+0x244>)
 800117c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9e4 	bl	8000558 <__aeabi_f2d>
 8001190:	a369      	add	r3, pc, #420	@ (adr r3, 8001338 <IMU_read_accel+0x238>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa37 	bl	8000608 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001350 <IMU_read_accel+0x250>)
 80011a8:	f7ff fb58 	bl	800085c <__aeabi_ddiv>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fd00 	bl	8000bb8 <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a66      	ldr	r2, [pc, #408]	@ (8001354 <IMU_read_accel+0x254>)
 80011bc:	6013      	str	r3, [r2, #0]
	    accel_y = (float)accel_y_raw * GRAV / ACCEL_FS;
 80011be:	4b62      	ldr	r3, [pc, #392]	@ (8001348 <IMU_read_accel+0x248>)
 80011c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c4:	ee07 3a90 	vmov	s15, r3
 80011c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011cc:	ee17 0a90 	vmov	r0, s15
 80011d0:	f7ff f9c2 	bl	8000558 <__aeabi_f2d>
 80011d4:	a358      	add	r3, pc, #352	@ (adr r3, 8001338 <IMU_read_accel+0x238>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff fa15 	bl	8000608 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b59      	ldr	r3, [pc, #356]	@ (8001350 <IMU_read_accel+0x250>)
 80011ec:	f7ff fb36 	bl	800085c <__aeabi_ddiv>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcde 	bl	8000bb8 <__aeabi_d2f>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a56      	ldr	r2, [pc, #344]	@ (8001358 <IMU_read_accel+0x258>)
 8001200:	6013      	str	r3, [r2, #0]
	    accel_z = (float)accel_z_raw * GRAV / ACCEL_FS;
 8001202:	4b52      	ldr	r3, [pc, #328]	@ (800134c <IMU_read_accel+0x24c>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001210:	ee17 0a90 	vmov	r0, s15
 8001214:	f7ff f9a0 	bl	8000558 <__aeabi_f2d>
 8001218:	a347      	add	r3, pc, #284	@ (adr r3, 8001338 <IMU_read_accel+0x238>)
 800121a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121e:	f7ff f9f3 	bl	8000608 <__aeabi_dmul>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b48      	ldr	r3, [pc, #288]	@ (8001350 <IMU_read_accel+0x250>)
 8001230:	f7ff fb14 	bl	800085c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fcbc 	bl	8000bb8 <__aeabi_d2f>
 8001240:	4603      	mov	r3, r0
 8001242:	4a46      	ldr	r2, [pc, #280]	@ (800135c <IMU_read_accel+0x25c>)
 8001244:	6013      	str	r3, [r2, #0]

	    accel_data.accel_x = accel_x_raw * GRAV / ACCEL_FS;
 8001246:	4b3f      	ldr	r3, [pc, #252]	@ (8001344 <IMU_read_accel+0x244>)
 8001248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f971 	bl	8000534 <__aeabi_i2d>
 8001252:	a339      	add	r3, pc, #228	@ (adr r3, 8001338 <IMU_read_accel+0x238>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9d6 	bl	8000608 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <IMU_read_accel+0x250>)
 800126a:	f7ff faf7 	bl	800085c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fc9f 	bl	8000bb8 <__aeabi_d2f>
 800127a:	4603      	mov	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
	    accel_data.accel_y = accel_y_raw * GRAV / ACCEL_FS;
 800127e:	4b32      	ldr	r3, [pc, #200]	@ (8001348 <IMU_read_accel+0x248>)
 8001280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f955 	bl	8000534 <__aeabi_i2d>
 800128a:	a32b      	add	r3, pc, #172	@ (adr r3, 8001338 <IMU_read_accel+0x238>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9ba 	bl	8000608 <__aeabi_dmul>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4610      	mov	r0, r2
 800129a:	4619      	mov	r1, r3
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <IMU_read_accel+0x250>)
 80012a2:	f7ff fadb 	bl	800085c <__aeabi_ddiv>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fc83 	bl	8000bb8 <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	61fb      	str	r3, [r7, #28]
	    accel_data.accel_z = accel_z_raw * GRAV / ACCEL_FS;
 80012b6:	4b25      	ldr	r3, [pc, #148]	@ (800134c <IMU_read_accel+0x24c>)
 80012b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f939 	bl	8000534 <__aeabi_i2d>
 80012c2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001338 <IMU_read_accel+0x238>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f99e 	bl	8000608 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <IMU_read_accel+0x250>)
 80012da:	f7ff fabf 	bl	800085c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc67 	bl	8000bb8 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	e007      	b.n	8001300 <IMU_read_accel+0x200>


	    }
	    else
	    {
	    	HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"Error reading accel data\r\n", 26, HAL_MAX_DELAY);
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	6858      	ldr	r0, [r3, #4]
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
 80012f8:	221a      	movs	r2, #26
 80012fa:	4919      	ldr	r1, [pc, #100]	@ (8001360 <IMU_read_accel+0x260>)
 80012fc:	f004 f92a 	bl	8005554 <HAL_UART_Transmit>
	    }
	return accel_data;
 8001300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001304:	f107 0218 	add.w	r2, r7, #24
 8001308:	ca07      	ldmia	r2, {r0, r1, r2}
 800130a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800130e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001314:	ee06 1a90 	vmov	s13, r1
 8001318:	ee07 2a10 	vmov	s14, r2
 800131c:	ee07 3a90 	vmov	s15, r3
}
 8001320:	eeb0 0a66 	vmov.f32	s0, s13
 8001324:	eef0 0a47 	vmov.f32	s1, s14
 8001328:	eeb0 1a67 	vmov.f32	s2, s15
 800132c:	3730      	adds	r7, #48	@ 0x30
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	51eb851f 	.word	0x51eb851f
 800133c:	40239eb8 	.word	0x40239eb8
 8001340:	20000254 	.word	0x20000254
 8001344:	2000022e 	.word	0x2000022e
 8001348:	20000230 	.word	0x20000230
 800134c:	20000232 	.word	0x20000232
 8001350:	40d00000 	.word	0x40d00000
 8001354:	20000234 	.word	0x20000234
 8001358:	20000238 	.word	0x20000238
 800135c:	2000023c 	.word	0x2000023c
 8001360:	080095bc 	.word	0x080095bc

08001364 <IMU_read_gyro>:


GyroData IMU_read_gyro(ICM_20948*p_IMU){
 8001364:	b580      	push	{r7, lr}
 8001366:	b090      	sub	sp, #64	@ 0x40
 8001368:	af04      	add	r7, sp, #16
 800136a:	6178      	str	r0, [r7, #20]
	GyroData gyro_data = {0};
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]

	if (HAL_I2C_Mem_Read(p_IMU->hi2c, ICM20948_I2C_ADDR, GYRO_XOUT_H, I2C_MEMADD_SIZE_8BIT, raw_data, 6, HAL_MAX_DELAY) == HAL_OK)
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2306      	movs	r3, #6
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	4b53      	ldr	r3, [pc, #332]	@ (80014d4 <IMU_read_gyro+0x170>)
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	2233      	movs	r2, #51	@ 0x33
 800138e:	21d2      	movs	r1, #210	@ 0xd2
 8001390:	f001 fdfa 	bl	8002f88 <HAL_I2C_Mem_Read>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d17b      	bne.n	8001492 <IMU_read_gyro+0x12e>
	{

		gyro_x_raw = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 800139a:	4b4e      	ldr	r3, [pc, #312]	@ (80014d4 <IMU_read_gyro+0x170>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b4c      	ldr	r3, [pc, #304]	@ (80014d4 <IMU_read_gyro+0x170>)
 80013a4:	785b      	ldrb	r3, [r3, #1]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <IMU_read_gyro+0x174>)
 80013ae:	801a      	strh	r2, [r3, #0]
	    gyro_y_raw = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 80013b0:	4b48      	ldr	r3, [pc, #288]	@ (80014d4 <IMU_read_gyro+0x170>)
 80013b2:	789b      	ldrb	r3, [r3, #2]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	4b46      	ldr	r3, [pc, #280]	@ (80014d4 <IMU_read_gyro+0x170>)
 80013ba:	78db      	ldrb	r3, [r3, #3]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4313      	orrs	r3, r2
 80013c0:	b21a      	sxth	r2, r3
 80013c2:	4b46      	ldr	r3, [pc, #280]	@ (80014dc <IMU_read_gyro+0x178>)
 80013c4:	801a      	strh	r2, [r3, #0]
	    gyro_z_raw = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 80013c6:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <IMU_read_gyro+0x170>)
 80013c8:	791b      	ldrb	r3, [r3, #4]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	b21a      	sxth	r2, r3
 80013ce:	4b41      	ldr	r3, [pc, #260]	@ (80014d4 <IMU_read_gyro+0x170>)
 80013d0:	795b      	ldrb	r3, [r3, #5]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b21a      	sxth	r2, r3
 80013d8:	4b41      	ldr	r3, [pc, #260]	@ (80014e0 <IMU_read_gyro+0x17c>)
 80013da:	801a      	strh	r2, [r3, #0]

	    // take the raw readings, divide by sensitivity. data in deg/s
	    gyro_x = (float)gyro_x_raw / GYRO_FS_SEL;
 80013dc:	4b3e      	ldr	r3, [pc, #248]	@ (80014d8 <IMU_read_gyro+0x174>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ea:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80014e4 <IMU_read_gyro+0x180>
 80013ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013f2:	4b3d      	ldr	r3, [pc, #244]	@ (80014e8 <IMU_read_gyro+0x184>)
 80013f4:	edc3 7a00 	vstr	s15, [r3]
	    gyro_y = (float)gyro_y_raw / GYRO_FS_SEL;
 80013f8:	4b38      	ldr	r3, [pc, #224]	@ (80014dc <IMU_read_gyro+0x178>)
 80013fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001406:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80014e4 <IMU_read_gyro+0x180>
 800140a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800140e:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <IMU_read_gyro+0x188>)
 8001410:	edc3 7a00 	vstr	s15, [r3]
	    gyro_z = (float)gyro_z_raw / GYRO_FS_SEL;
 8001414:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <IMU_read_gyro+0x17c>)
 8001416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001422:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80014e4 <IMU_read_gyro+0x180>
 8001426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800142a:	4b31      	ldr	r3, [pc, #196]	@ (80014f0 <IMU_read_gyro+0x18c>)
 800142c:	edc3 7a00 	vstr	s15, [r3]

	    gyro_data.gyro_x = gyro_x_raw / GYRO_FS_SEL;
 8001430:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <IMU_read_gyro+0x174>)
 8001432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001436:	4a2f      	ldr	r2, [pc, #188]	@ (80014f4 <IMU_read_gyro+0x190>)
 8001438:	fb82 1203 	smull	r1, r2, r2, r3
 800143c:	1152      	asrs	r2, r2, #5
 800143e:	17db      	asrs	r3, r3, #31
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b21b      	sxth	r3, r3
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	edc7 7a06 	vstr	s15, [r7, #24]
	    gyro_data.gyro_y = gyro_y_raw / GYRO_FS_SEL;
 8001450:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <IMU_read_gyro+0x178>)
 8001452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001456:	4a27      	ldr	r2, [pc, #156]	@ (80014f4 <IMU_read_gyro+0x190>)
 8001458:	fb82 1203 	smull	r1, r2, r2, r3
 800145c:	1152      	asrs	r2, r2, #5
 800145e:	17db      	asrs	r3, r3, #31
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	b21b      	sxth	r3, r3
 8001464:	ee07 3a90 	vmov	s15, r3
 8001468:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800146c:	edc7 7a07 	vstr	s15, [r7, #28]
	    gyro_data.gyro_z = gyro_z_raw / GYRO_FS_SEL;
 8001470:	4b1b      	ldr	r3, [pc, #108]	@ (80014e0 <IMU_read_gyro+0x17c>)
 8001472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001476:	4a1f      	ldr	r2, [pc, #124]	@ (80014f4 <IMU_read_gyro+0x190>)
 8001478:	fb82 1203 	smull	r1, r2, r2, r3
 800147c:	1152      	asrs	r2, r2, #5
 800147e:	17db      	asrs	r3, r3, #31
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	b21b      	sxth	r3, r3
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800148c:	edc7 7a08 	vstr	s15, [r7, #32]
 8001490:	e007      	b.n	80014a2 <IMU_read_gyro+0x13e>

	    }
	    else
	    {
	    	// maybe throw a real error here, lmao
	    	HAL_UART_Transmit(p_IMU->huart, (uint8_t*)"Error reading gyro data\r\n", 25, HAL_MAX_DELAY);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	6858      	ldr	r0, [r3, #4]
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	2219      	movs	r2, #25
 800149c:	4916      	ldr	r1, [pc, #88]	@ (80014f8 <IMU_read_gyro+0x194>)
 800149e:	f004 f859 	bl	8005554 <HAL_UART_Transmit>
	    }

	return gyro_data;
 80014a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a6:	f107 0218 	add.w	r2, r7, #24
 80014aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80014b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b6:	ee06 1a90 	vmov	s13, r1
 80014ba:	ee07 2a10 	vmov	s14, r2
 80014be:	ee07 3a90 	vmov	s15, r3
}
 80014c2:	eeb0 0a66 	vmov.f32	s0, s13
 80014c6:	eef0 0a47 	vmov.f32	s1, s14
 80014ca:	eeb0 1a67 	vmov.f32	s2, s15
 80014ce:	3730      	adds	r7, #48	@ 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000254 	.word	0x20000254
 80014d8:	20000240 	.word	0x20000240
 80014dc:	20000242 	.word	0x20000242
 80014e0:	20000244 	.word	0x20000244
 80014e4:	43030000 	.word	0x43030000
 80014e8:	20000248 	.word	0x20000248
 80014ec:	2000024c 	.word	0x2000024c
 80014f0:	20000250 	.word	0x20000250
 80014f4:	3e88cb3d 	.word	0x3e88cb3d
 80014f8:	080095d8 	.word	0x080095d8
 80014fc:	00000000 	.word	0x00000000

08001500 <calculate_IMU_Angle>:
}


// reads IMU data and calculates angle of the system
pos_spd calculate_IMU_Angle(ICM_20948 *p_IMU)
{
 8001500:	b5b0      	push	{r4, r5, r7, lr}
 8001502:	b098      	sub	sp, #96	@ 0x60
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
	float gyro_angle;
	float accel_angle_z;
	static float previous_angle_z= 0.0000;

	// read both of the sensors
	AccelData accel = IMU_read_accel(p_IMU);	// m/s^2
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fdf9 	bl	8001100 <IMU_read_accel>
 800150e:	eef0 6a40 	vmov.f32	s13, s0
 8001512:	eeb0 7a60 	vmov.f32	s14, s1
 8001516:	eef0 7a41 	vmov.f32	s15, s2
 800151a:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800151e:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8001522:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	ax = accel.accel_x;
 8001526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001528:	65bb      	str	r3, [r7, #88]	@ 0x58
	ay = accel.accel_y;
 800152a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800152c:	657b      	str	r3, [r7, #84]	@ 0x54
	az = accel.accel_z;
 800152e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001530:	653b      	str	r3, [r7, #80]	@ 0x50

	GyroData gyro = IMU_read_gyro(p_IMU);
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff ff16 	bl	8001364 <IMU_read_gyro>
 8001538:	eef0 6a40 	vmov.f32	s13, s0
 800153c:	eeb0 7a60 	vmov.f32	s14, s1
 8001540:	eef0 7a41 	vmov.f32	s15, s2
 8001544:	edc7 6a07 	vstr	s13, [r7, #28]
 8001548:	ed87 7a08 	vstr	s14, [r7, #32]
 800154c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	gx = gyro.gyro_x;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	64fb      	str	r3, [r7, #76]	@ 0x4c
	gy = gyro.gyro_y;
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	64bb      	str	r3, [r7, #72]	@ 0x48
	gz = gyro.gyro_z;
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	647b      	str	r3, [r7, #68]	@ 0x44

	gyro_angle = angle_z + gz*DT;
 800155c:	4b70      	ldr	r3, [pc, #448]	@ (8001720 <calculate_IMU_Angle+0x220>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe fff9 	bl	8000558 <__aeabi_f2d>
 8001566:	4604      	mov	r4, r0
 8001568:	460d      	mov	r5, r1
 800156a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800156c:	f7fe fff4 	bl	8000558 <__aeabi_f2d>
 8001570:	a35d      	add	r3, pc, #372	@ (adr r3, 80016e8 <calculate_IMU_Angle+0x1e8>)
 8001572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001576:	f7ff f847 	bl	8000608 <__aeabi_dmul>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7fe fe8b 	bl	800029c <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fb13 	bl	8000bb8 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40

	accel_angle_z = atan2f(ax,ay);
 8001596:	edd7 0a15 	vldr	s1, [r7, #84]	@ 0x54
 800159a:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 800159e:	f007 fe25 	bl	80091ec <atan2f>
 80015a2:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c

    if (accel_angle_z > M_PI) accel_angle_z -= 2 * M_PI;
 80015a6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80015a8:	f7fe ffd6 	bl	8000558 <__aeabi_f2d>
 80015ac:	a350      	add	r3, pc, #320	@ (adr r3, 80016f0 <calculate_IMU_Angle+0x1f0>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff fab9 	bl	8000b28 <__aeabi_dcmpgt>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d010      	beq.n	80015de <calculate_IMU_Angle+0xde>
 80015bc:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80015be:	f7fe ffcb 	bl	8000558 <__aeabi_f2d>
 80015c2:	a34d      	add	r3, pc, #308	@ (adr r3, 80016f8 <calculate_IMU_Angle+0x1f8>)
 80015c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c8:	f7fe fe66 	bl	8000298 <__aeabi_dsub>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff faf0 	bl	8000bb8 <__aeabi_d2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80015dc:	e01a      	b.n	8001614 <calculate_IMU_Angle+0x114>
    else if (accel_angle_z < -M_PI) accel_angle_z += 2 * M_PI;
 80015de:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80015e0:	f7fe ffba 	bl	8000558 <__aeabi_f2d>
 80015e4:	a346      	add	r3, pc, #280	@ (adr r3, 8001700 <calculate_IMU_Angle+0x200>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff fa7f 	bl	8000aec <__aeabi_dcmplt>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00f      	beq.n	8001614 <calculate_IMU_Angle+0x114>
 80015f4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80015f6:	f7fe ffaf 	bl	8000558 <__aeabi_f2d>
 80015fa:	a33f      	add	r3, pc, #252	@ (adr r3, 80016f8 <calculate_IMU_Angle+0x1f8>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7fe fe4c 	bl	800029c <__adddf3>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff fad4 	bl	8000bb8 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	65fb      	str	r3, [r7, #92]	@ 0x5c

    accel_angle_z = accel_angle_z  * (180.0 / M_PI);
 8001614:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001616:	f7fe ff9f 	bl	8000558 <__aeabi_f2d>
 800161a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001708 <calculate_IMU_Angle+0x208>)
 800161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001620:	f7fe fff2 	bl	8000608 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fac4 	bl	8000bb8 <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // complementary filter
	angle_z = ALPHA * gyro_angle  +  (1 - ALPHA) * accel_angle_z;
 8001634:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001636:	f7fe ff8f 	bl	8000558 <__aeabi_f2d>
 800163a:	a335      	add	r3, pc, #212	@ (adr r3, 8001710 <calculate_IMU_Angle+0x210>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	f7fe ffe2 	bl	8000608 <__aeabi_dmul>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4614      	mov	r4, r2
 800164a:	461d      	mov	r5, r3
 800164c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800164e:	f7fe ff83 	bl	8000558 <__aeabi_f2d>
 8001652:	a331      	add	r3, pc, #196	@ (adr r3, 8001718 <calculate_IMU_Angle+0x218>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe ffd6 	bl	8000608 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4620      	mov	r0, r4
 8001662:	4629      	mov	r1, r5
 8001664:	f7fe fe1a 	bl	800029c <__adddf3>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff faa2 	bl	8000bb8 <__aeabi_d2f>
 8001674:	4603      	mov	r3, r0
 8001676:	4a2a      	ldr	r2, [pc, #168]	@ (8001720 <calculate_IMU_Angle+0x220>)
 8001678:	6013      	str	r3, [r2, #0]

    // Calculate angular acceleration (alpha)
    //float alpha = at / DISPLACEMENT_DIST;

    // Update angular velocity using angular acceleration
    float angular_velocity = (angle_z-previous_angle_z) / DT;
 800167a:	4b29      	ldr	r3, [pc, #164]	@ (8001720 <calculate_IMU_Angle+0x220>)
 800167c:	ed93 7a00 	vldr	s14, [r3]
 8001680:	4b28      	ldr	r3, [pc, #160]	@ (8001724 <calculate_IMU_Angle+0x224>)
 8001682:	edd3 7a00 	vldr	s15, [r3]
 8001686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800168a:	ee17 0a90 	vmov	r0, s15
 800168e:	f7fe ff63 	bl	8000558 <__aeabi_f2d>
 8001692:	a315      	add	r3, pc, #84	@ (adr r3, 80016e8 <calculate_IMU_Angle+0x1e8>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	f7ff f8e0 	bl	800085c <__aeabi_ddiv>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff fa88 	bl	8000bb8 <__aeabi_d2f>
 80016a8:	4603      	mov	r3, r0
 80016aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    previous_angle_z = angle_z;
 80016ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <calculate_IMU_Angle+0x220>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001724 <calculate_IMU_Angle+0x224>)
 80016b2:	6013      	str	r3, [r2, #0]

    pos_spd output = {angle_z, angular_velocity};
 80016b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <calculate_IMU_Angle+0x220>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016bc:	61bb      	str	r3, [r7, #24]

	return output;
 80016be:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016c2:	f107 0214 	add.w	r2, r7, #20
 80016c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80016ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016d2:	ee07 2a10 	vmov	s14, r2
 80016d6:	ee07 3a90 	vmov	s15, r3
}
 80016da:	eeb0 0a47 	vmov.f32	s0, s14
 80016de:	eef0 0a67 	vmov.f32	s1, s15
 80016e2:	3760      	adds	r7, #96	@ 0x60
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bdb0      	pop	{r4, r5, r7, pc}
 80016e8:	47ae147b 	.word	0x47ae147b
 80016ec:	3f847ae1 	.word	0x3f847ae1
 80016f0:	54442d18 	.word	0x54442d18
 80016f4:	400921fb 	.word	0x400921fb
 80016f8:	54442d18 	.word	0x54442d18
 80016fc:	401921fb 	.word	0x401921fb
 8001700:	54442d18 	.word	0x54442d18
 8001704:	c00921fb 	.word	0xc00921fb
 8001708:	1a63c1f8 	.word	0x1a63c1f8
 800170c:	404ca5dc 	.word	0x404ca5dc
 8001710:	f5c28f5c 	.word	0xf5c28f5c
 8001714:	3fef5c28 	.word	0x3fef5c28
 8001718:	47ae1480 	.word	0x47ae1480
 800171c:	3f947ae1 	.word	0x3f947ae1
 8001720:	2000025c 	.word	0x2000025c
 8001724:	20000260 	.word	0x20000260

08001728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b09f      	sub	sp, #124	@ 0x7c
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800172e:	f000 fdfb 	bl	8002328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001732:	f000 f883 	bl	800183c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001736:	f000 fa0d 	bl	8001b54 <MX_GPIO_Init>
  MX_I2C1_Init();
 800173a:	f000 f8e7 	bl	800190c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800173e:	f000 f9b5 	bl	8001aac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001742:	f000 f911 	bl	8001968 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001746:	f000 f9db 	bl	8001b00 <MX_USART6_UART_Init>
  MX_TIM11_Init();
 800174a:	f000 f967 	bl	8001a1c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  // start receiving
  start_receive_string(&odrive);
 800174e:	4832      	ldr	r0, [pc, #200]	@ (8001818 <main+0xf0>)
 8001750:	f000 fa82 	bl	8001c58 <start_receive_string>

  HAL_UART_Transmit(&huart2, (uint8_t*)"\033c", strlen("\033c"), HAL_MAX_DELAY);
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	2202      	movs	r2, #2
 800175a:	4930      	ldr	r1, [pc, #192]	@ (800181c <main+0xf4>)
 800175c:	4830      	ldr	r0, [pc, #192]	@ (8001820 <main+0xf8>)
 800175e:	f003 fef9 	bl	8005554 <HAL_UART_Transmit>
  //ODRIVE_Reboot(&odrive);
  //HAL_Delay(10000);

  //ODRIVE_ClearErrors(&odrive);

  IMU_init(&IMU);
 8001762:	4830      	ldr	r0, [pc, #192]	@ (8001824 <main+0xfc>)
 8001764:	f7ff fbf0 	bl	8000f48 <IMU_init>
    /* USER CODE BEGIN 3 */

	// battery voltage readout
    //uint8_t* voltage = ODRIVE_GetVBus(&odrive);
    char new_mess[50];
    int mess_len = sprintf(new_mess, "testing");
 8001768:	463b      	mov	r3, r7
 800176a:	492f      	ldr	r1, [pc, #188]	@ (8001828 <main+0x100>)
 800176c:	4618      	mov	r0, r3
 800176e:	f005 fc11 	bl	8006f94 <siprintf>
 8001772:	6778      	str	r0, [r7, #116]	@ 0x74
    //HAL_UART_Transmit(&huart2, (uint8_t*)new_mess, mess_len, HAL_MAX_DELAY);

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8001774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001778:	482c      	ldr	r0, [pc, #176]	@ (800182c <main+0x104>)
 800177a:	f001 f9ac 	bl	8002ad6 <HAL_GPIO_TogglePin>
    HAL_Delay(10);
 800177e:	200a      	movs	r0, #10
 8001780:	f000 fe44 	bl	800240c <HAL_Delay>
	*/

	//IMU_read_accel(&IMU);
	//IMU_read_gyro(&IMU);

	pos_spd new_IMU_out = calculate_IMU_Angle(&IMU);
 8001784:	4827      	ldr	r0, [pc, #156]	@ (8001824 <main+0xfc>)
 8001786:	f7ff febb 	bl	8001500 <calculate_IMU_Angle>
 800178a:	eeb0 7a40 	vmov.f32	s14, s0
 800178e:	eef0 7a60 	vmov.f32	s15, s1
 8001792:	ed87 7a1a 	vstr	s14, [r7, #104]	@ 0x68
 8001796:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

	float real_pos = new_IMU_out.position + 90;
 800179a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800179e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001830 <main+0x108>
 80017a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a6:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

	char ctrl_msg[50];
    sprintf(ctrl_msg, "SYS ANGLE: %.4f     ", real_pos);
 80017aa:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80017ac:	f7fe fed4 	bl	8000558 <__aeabi_f2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80017b8:	491e      	ldr	r1, [pc, #120]	@ (8001834 <main+0x10c>)
 80017ba:	f005 fbeb 	bl	8006f94 <siprintf>
    HAL_UART_Transmit(IMU.huart, (uint8_t*)ctrl_msg, strlen(ctrl_msg), HAL_MAX_DELAY);
 80017be:	4b19      	ldr	r3, [pc, #100]	@ (8001824 <main+0xfc>)
 80017c0:	685c      	ldr	r4, [r3, #4]
 80017c2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fd5a 	bl	8000280 <strlen>
 80017cc:	4603      	mov	r3, r0
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	4620      	mov	r0, r4
 80017da:	f003 febb 	bl	8005554 <HAL_UART_Transmit>

    sprintf(ctrl_msg, "ANG_VEL: %.4f     \r\n", new_IMU_out.speed);
 80017de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe feb9 	bl	8000558 <__aeabi_f2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80017ee:	4912      	ldr	r1, [pc, #72]	@ (8001838 <main+0x110>)
 80017f0:	f005 fbd0 	bl	8006f94 <siprintf>
    HAL_UART_Transmit(IMU.huart, (uint8_t*)ctrl_msg, strlen(ctrl_msg), HAL_MAX_DELAY);
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <main+0xfc>)
 80017f6:	685c      	ldr	r4, [r3, #4]
 80017f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fd3f 	bl	8000280 <strlen>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	4620      	mov	r0, r4
 8001810:	f003 fea0 	bl	8005554 <HAL_UART_Transmit>
  {
 8001814:	bf00      	nop
 8001816:	e7a7      	b.n	8001768 <main+0x40>
 8001818:	20000000 	.word	0x20000000
 800181c:	080095f4 	.word	0x080095f4
 8001820:	20000348 	.word	0x20000348
 8001824:	20000004 	.word	0x20000004
 8001828:	080095f8 	.word	0x080095f8
 800182c:	40020400 	.word	0x40020400
 8001830:	42b40000 	.word	0x42b40000
 8001834:	08009600 	.word	0x08009600
 8001838:	08009618 	.word	0x08009618

0800183c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b094      	sub	sp, #80	@ 0x50
 8001840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	2230      	movs	r2, #48	@ 0x30
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f005 fc05 	bl	800705a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <SystemClock_Config+0xc8>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <SystemClock_Config+0xc8>)
 800186a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001870:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <SystemClock_Config+0xc8>)
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800187c:	2300      	movs	r3, #0
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <SystemClock_Config+0xcc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a20      	ldr	r2, [pc, #128]	@ (8001908 <SystemClock_Config+0xcc>)
 8001886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <SystemClock_Config+0xcc>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800189c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a2:	2302      	movs	r3, #2
 80018a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018ac:	2304      	movs	r3, #4
 80018ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80018b0:	2360      	movs	r3, #96	@ 0x60
 80018b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018b8:	2304      	movs	r3, #4
 80018ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018bc:	f107 0320 	add.w	r3, r7, #32
 80018c0:	4618      	mov	r0, r3
 80018c2:	f002 fa75 	bl	8003db0 <HAL_RCC_OscConfig>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018cc:	f000 f9be 	bl	8001c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d0:	230f      	movs	r3, #15
 80018d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d4:	2302      	movs	r3, #2
 80018d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	2103      	movs	r1, #3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fcd7 	bl	80042a0 <HAL_RCC_ClockConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018f8:	f000 f9a8 	bl	8001c4c <Error_Handler>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3750      	adds	r7, #80	@ 0x50
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000

0800190c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <MX_I2C1_Init+0x50>)
 8001912:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <MX_I2C1_Init+0x54>)
 8001914:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <MX_I2C1_Init+0x50>)
 8001918:	4a12      	ldr	r2, [pc, #72]	@ (8001964 <MX_I2C1_Init+0x58>)
 800191a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001928:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <MX_I2C1_Init+0x50>)
 800192a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800192e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <MX_I2C1_Init+0x50>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <MX_I2C1_Init+0x50>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <MX_I2C1_Init+0x50>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_I2C1_Init+0x50>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_I2C1_Init+0x50>)
 800194a:	f001 f8df 	bl	8002b0c <HAL_I2C_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001954:	f000 f97a 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000264 	.word	0x20000264
 8001960:	40005400 	.word	0x40005400
 8001964:	00061a80 	.word	0x00061a80

08001968 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	@ 0x28
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196e:	f107 0320 	add.w	r3, r7, #32
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
 8001984:	611a      	str	r2, [r3, #16]
 8001986:	615a      	str	r2, [r3, #20]
 8001988:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <MX_TIM3_Init+0xac>)
 800198c:	4a22      	ldr	r2, [pc, #136]	@ (8001a18 <MX_TIM3_Init+0xb0>)
 800198e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001990:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <MX_TIM3_Init+0xac>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <MX_TIM3_Init+0xac>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800199c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a14 <MX_TIM3_Init+0xac>)
 800199e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <MX_TIM3_Init+0xac>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <MX_TIM3_Init+0xac>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019b0:	4818      	ldr	r0, [pc, #96]	@ (8001a14 <MX_TIM3_Init+0xac>)
 80019b2:	f002 ffd4 	bl	800495e <HAL_TIM_PWM_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019bc:	f000 f946 	bl	8001c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c8:	f107 0320 	add.w	r3, r7, #32
 80019cc:	4619      	mov	r1, r3
 80019ce:	4811      	ldr	r0, [pc, #68]	@ (8001a14 <MX_TIM3_Init+0xac>)
 80019d0:	f003 fd02 	bl	80053d8 <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019da:	f000 f937 	bl	8001c4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019de:	2360      	movs	r3, #96	@ 0x60
 80019e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2204      	movs	r2, #4
 80019f2:	4619      	mov	r1, r3
 80019f4:	4807      	ldr	r0, [pc, #28]	@ (8001a14 <MX_TIM3_Init+0xac>)
 80019f6:	f003 f8f7 	bl	8004be8 <HAL_TIM_PWM_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a00:	f000 f924 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a04:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <MX_TIM3_Init+0xac>)
 8001a06:	f000 fa81 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001a0a:	bf00      	nop
 8001a0c:	3728      	adds	r7, #40	@ 0x28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200002b8 	.word	0x200002b8
 8001a18:	40000400 	.word	0x40000400

08001a1c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a22:	463b      	mov	r3, r7
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a30:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa8 <MX_TIM11_Init+0x8c>)
 8001a32:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a40:	4b18      	ldr	r3, [pc, #96]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a46:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4e:	4b15      	ldr	r3, [pc, #84]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a54:	4813      	ldr	r0, [pc, #76]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a56:	f002 ff33 	bl	80048c0 <HAL_TIM_Base_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM11_Init+0x48>
  {
    Error_Handler();
 8001a60:	f000 f8f4 	bl	8001c4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim11) != HAL_OK)
 8001a64:	480f      	ldr	r0, [pc, #60]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a66:	f002 ffc9 	bl	80049fc <HAL_TIM_IC_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM11_Init+0x58>
  {
    Error_Handler();
 8001a70:	f000 f8ec 	bl	8001c4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a74:	2300      	movs	r3, #0
 8001a76:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim11, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	@ (8001aa4 <MX_TIM11_Init+0x88>)
 8001a8c:	f003 f80f 	bl	8004aae <HAL_TIM_IC_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM11_Init+0x7e>
  {
    Error_Handler();
 8001a96:	f000 f8d9 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000300 	.word	0x20000300
 8001aa8:	40014800 	.word	0x40014800

08001aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ab2:	4a12      	ldr	r2, [pc, #72]	@ (8001afc <MX_USART2_UART_Init+0x50>)
 8001ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ab6:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ad2:	220c      	movs	r2, #12
 8001ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <MX_USART2_UART_Init+0x4c>)
 8001ae4:	f003 fce6 	bl	80054b4 <HAL_UART_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aee:	f000 f8ad 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000348 	.word	0x20000348
 8001afc:	40004400 	.word	0x40004400

08001b00 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	@ (8001b50 <MX_USART6_UART_Init+0x50>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b08      	ldr	r3, [pc, #32]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_USART6_UART_Init+0x4c>)
 8001b38:	f003 fcbc 	bl	80054b4 <HAL_UART_Init>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001b42:	f000 f883 	bl	8001c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000390 	.word	0x20000390
 8001b50:	40011400 	.word	0x40011400

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	@ 0x28
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a2d      	ldr	r2, [pc, #180]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b82:	613b      	str	r3, [r7, #16]
 8001b84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b27      	ldr	r3, [pc, #156]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a26      	ldr	r2, [pc, #152]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001b90:	f043 0301 	orr.w	r3, r3, #1
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a1f      	ldr	r2, [pc, #124]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001bac:	f043 0302 	orr.w	r3, r3, #2
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a18      	ldr	r2, [pc, #96]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_GPIO_Init+0xd4>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001be0:	4812      	ldr	r0, [pc, #72]	@ (8001c2c <MX_GPIO_Init+0xd8>)
 8001be2:	f000 ff5f 	bl	8002aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	480b      	ldr	r0, [pc, #44]	@ (8001c2c <MX_GPIO_Init+0xd8>)
 8001c00:	f000 fdcc 	bl	800279c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c04:	2320      	movs	r3, #32
 8001c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c08:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <MX_GPIO_Init+0xd8>)
 8001c1a:	f000 fdbf 	bl	800279c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	@ 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40020400 	.word	0x40020400

08001c30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	ODRIVE_Receive_Callback(huart, &odrive);
 8001c38:	4903      	ldr	r1, [pc, #12]	@ (8001c48 <HAL_UART_RxCpltCallback+0x18>)
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f82c 	bl	8001c98 <ODRIVE_Receive_Callback>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000000 	.word	0x20000000

08001c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c50:	b672      	cpsid	i
}
 8001c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c54:	bf00      	nop
 8001c56:	e7fd      	b.n	8001c54 <Error_Handler+0x8>

08001c58 <start_receive_string>:
	}
}


void start_receive_string(odrive_t *p)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	rxIndex = 0; // reset the buffer index
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <start_receive_string+0x38>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
    memset(rxBuffer, 0, sizeof(rxBuffer)); // Clear the received string buffer
 8001c66:	2232      	movs	r2, #50	@ 0x32
 8001c68:	2100      	movs	r1, #0
 8001c6a:	480a      	ldr	r0, [pc, #40]	@ (8001c94 <start_receive_string+0x3c>)
 8001c6c:	f005 f9f5 	bl	800705a <memset>
    HAL_UART_Receive_IT(p->huart, &rxBuffer[rxIndex], 1); // Start receiving data
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a06      	ldr	r2, [pc, #24]	@ (8001c90 <start_receive_string+0x38>)
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4a06      	ldr	r2, [pc, #24]	@ (8001c94 <start_receive_string+0x3c>)
 8001c7c:	4411      	add	r1, r2
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fcf2 	bl	800566a <HAL_UART_Receive_IT>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000040a 	.word	0x2000040a
 8001c94:	200003d8 	.word	0x200003d8

08001c98 <ODRIVE_Receive_Callback>:


void ODRIVE_Receive_Callback (UART_HandleTypeDef *huart, odrive_t *p)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
    if (huart == p->huart) {
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d131      	bne.n	8001d10 <ODRIVE_Receive_Callback+0x78>
        if (rxBuffer[rxIndex] == '\n')
 8001cac:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <ODRIVE_Receive_Callback+0x80>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <ODRIVE_Receive_Callback+0x84>)
 8001cb4:	5c9b      	ldrb	r3, [r3, r2]
 8001cb6:	2b0a      	cmp	r3, #10
 8001cb8:	d119      	bne.n	8001cee <ODRIVE_Receive_Callback+0x56>
        {
            // Newline character received, null-terminate the string
            rxBuffer[rxIndex] = '\0';
 8001cba:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <ODRIVE_Receive_Callback+0x80>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <ODRIVE_Receive_Callback+0x84>)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	5499      	strb	r1, [r3, r2]
        	memset(receivedData, 0, sizeof(receivedData)); // clear the previous data
 8001cc6:	2232      	movs	r2, #50	@ 0x32
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4815      	ldr	r0, [pc, #84]	@ (8001d20 <ODRIVE_Receive_Callback+0x88>)
 8001ccc:	f005 f9c5 	bl	800705a <memset>
        	memcpy(receivedData, rxBuffer, rxIndex + 1); // copy the buffer to received
 8001cd0:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <ODRIVE_Receive_Callback+0x80>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4910      	ldr	r1, [pc, #64]	@ (8001d1c <ODRIVE_Receive_Callback+0x84>)
 8001cda:	4811      	ldr	r0, [pc, #68]	@ (8001d20 <ODRIVE_Receive_Callback+0x88>)
 8001cdc:	f005 fa3d 	bl	800715a <memcpy>
            responseFinishedFlag = 1;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	@ (8001d24 <ODRIVE_Receive_Callback+0x8c>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
            start_receive_string(p); // Start receiving the next string
 8001ce6:	6838      	ldr	r0, [r7, #0]
 8001ce8:	f7ff ffb6 	bl	8001c58 <start_receive_string>
            return;
 8001cec:	e010      	b.n	8001d10 <ODRIVE_Receive_Callback+0x78>
        }
        else
        {
        	rxIndex++; //increment position in buffer
 8001cee:	4b0a      	ldr	r3, [pc, #40]	@ (8001d18 <ODRIVE_Receive_Callback+0x80>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	4b08      	ldr	r3, [pc, #32]	@ (8001d18 <ODRIVE_Receive_Callback+0x80>)
 8001cf8:	701a      	strb	r2, [r3, #0]
        }

        HAL_UART_Receive_IT(p->huart, &rxBuffer[rxIndex], 1); // Start receiving data
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a06      	ldr	r2, [pc, #24]	@ (8001d18 <ODRIVE_Receive_Callback+0x80>)
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4a05      	ldr	r2, [pc, #20]	@ (8001d1c <ODRIVE_Receive_Callback+0x84>)
 8001d06:	4411      	add	r1, r2
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fcad 	bl	800566a <HAL_UART_Receive_IT>

    }
}
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000040a 	.word	0x2000040a
 8001d1c:	200003d8 	.word	0x200003d8
 8001d20:	2000040c 	.word	0x2000040c
 8001d24:	2000040b 	.word	0x2000040b

08001d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	4a0f      	ldr	r2, [pc, #60]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4a08      	ldr	r2, [pc, #32]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5a:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	@ 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	@ (8001dfc <HAL_I2C_MspInit+0x84>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d12b      	bne.n	8001df2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da2:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001daa:	4b15      	ldr	r3, [pc, #84]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001db6:	23c0      	movs	r3, #192	@ 0xc0
 8001db8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dba:	2312      	movs	r3, #18
 8001dbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dca:	f107 0314 	add.w	r3, r7, #20
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <HAL_I2C_MspInit+0x8c>)
 8001dd2:	f000 fce3 	bl	800279c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001de0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de6:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_I2C_MspInit+0x88>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001df2:	bf00      	nop
 8001df4:	3728      	adds	r7, #40	@ 0x28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020400 	.word	0x40020400

08001e08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0b      	ldr	r2, [pc, #44]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10d      	bne.n	8001e36 <HAL_TIM_PWM_MspInit+0x2e>
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */

    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <HAL_TIM_PWM_MspInit+0x40>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a09      	ldr	r2, [pc, #36]	@ (8001e48 <HAL_TIM_PWM_MspInit+0x40>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <HAL_TIM_PWM_MspInit+0x40>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40023800 	.word	0x40023800

08001e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b090      	sub	sp, #64	@ 0x40
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
 8001e74:	615a      	str	r2, [r3, #20]
  if(htim_base->Instance==TIM11)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a21      	ldr	r2, [pc, #132]	@ (8001f00 <HAL_TIM_Base_MspInit+0xb4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d13b      	bne.n	8001ef8 <HAL_TIM_Base_MspInit+0xac>

  /* USER CODE END TIM11_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e80:	2302      	movs	r3, #2
 8001e82:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 fc26 	bl	80046e0 <HAL_RCCEx_PeriphCLKConfig>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_TIM_Base_MspInit+0x52>
    {
      Error_Handler();
 8001e9a:	f7ff fed7 	bl	8001c4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_TIM_Base_MspInit+0xb8>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_TIM_Base_MspInit+0xb8>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_TIM_Base_MspInit+0xb8>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_TIM_Base_MspInit+0xb8>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <HAL_TIM_Base_MspInit+0xb8>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <HAL_TIM_Base_MspInit+0xb8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <HAL_TIM_Base_MspInit+0xbc>)
 8001ef4:	f000 fc52 	bl	800279c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3740      	adds	r7, #64	@ 0x40
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40014800 	.word	0x40014800
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400

08001f0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <HAL_TIM_MspPostInit+0x68>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d11d      	bne.n	8001f6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_TIM_MspPostInit+0x6c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	4a10      	ldr	r2, [pc, #64]	@ (8001f78 <HAL_TIM_MspPostInit+0x6c>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f78 <HAL_TIM_MspPostInit+0x6c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f4a:	2380      	movs	r3, #128	@ 0x80
 8001f4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	@ (8001f7c <HAL_TIM_MspPostInit+0x70>)
 8001f66:	f000 fc19 	bl	800279c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40000400 	.word	0x40000400
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000

08001f80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08c      	sub	sp, #48	@ 0x30
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	605a      	str	r2, [r3, #4]
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	60da      	str	r2, [r3, #12]
 8001f96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a3a      	ldr	r2, [pc, #232]	@ (8002088 <HAL_UART_MspInit+0x108>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d134      	bne.n	800200c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
 8001fa6:	4b39      	ldr	r3, [pc, #228]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a38      	ldr	r2, [pc, #224]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8001fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fb2:	4b36      	ldr	r3, [pc, #216]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	4b32      	ldr	r3, [pc, #200]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a31      	ldr	r2, [pc, #196]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fda:	230c      	movs	r3, #12
 8001fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fea:	2307      	movs	r3, #7
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fee:	f107 031c 	add.w	r3, r7, #28
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4826      	ldr	r0, [pc, #152]	@ (8002090 <HAL_UART_MspInit+0x110>)
 8001ff6:	f000 fbd1 	bl	800279c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2026      	movs	r0, #38	@ 0x26
 8002000:	f000 fb03 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002004:	2026      	movs	r0, #38	@ 0x26
 8002006:	f000 fb1c 	bl	8002642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800200a:	e038      	b.n	800207e <HAL_UART_MspInit+0xfe>
  else if(huart->Instance==USART6)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a20      	ldr	r2, [pc, #128]	@ (8002094 <HAL_UART_MspInit+0x114>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d133      	bne.n	800207e <HAL_UART_MspInit+0xfe>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b1c      	ldr	r3, [pc, #112]	@ (800208c <HAL_UART_MspInit+0x10c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	4a1b      	ldr	r2, [pc, #108]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8002020:	f043 0320 	orr.w	r3, r3, #32
 8002024:	6453      	str	r3, [r2, #68]	@ 0x44
 8002026:	4b19      	ldr	r3, [pc, #100]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a14      	ldr	r2, [pc, #80]	@ (800208c <HAL_UART_MspInit+0x10c>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b12      	ldr	r3, [pc, #72]	@ (800208c <HAL_UART_MspInit+0x10c>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800204e:	23c0      	movs	r3, #192	@ 0xc0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800205e:	2308      	movs	r3, #8
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	480b      	ldr	r0, [pc, #44]	@ (8002098 <HAL_UART_MspInit+0x118>)
 800206a:	f000 fb97 	bl	800279c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	2047      	movs	r0, #71	@ 0x47
 8002074:	f000 fac9 	bl	800260a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002078:	2047      	movs	r0, #71	@ 0x47
 800207a:	f000 fae2 	bl	8002642 <HAL_NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3730      	adds	r7, #48	@ 0x30
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40004400 	.word	0x40004400
 800208c:	40023800 	.word	0x40023800
 8002090:	40020000 	.word	0x40020000
 8002094:	40011400 	.word	0x40011400
 8002098:	40020800 	.word	0x40020800

0800209c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <NMI_Handler+0x4>

080020a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <HardFault_Handler+0x4>

080020ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <MemManage_Handler+0x4>

080020b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020b8:	bf00      	nop
 80020ba:	e7fd      	b.n	80020b8 <BusFault_Handler+0x4>

080020bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <UsageFault_Handler+0x4>

080020c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f2:	f000 f96b 	bl	80023cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002100:	4802      	ldr	r0, [pc, #8]	@ (800210c <USART2_IRQHandler+0x10>)
 8002102:	f003 fad7 	bl	80056b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000348 	.word	0x20000348

08002110 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002114:	4802      	ldr	r0, [pc, #8]	@ (8002120 <USART6_IRQHandler+0x10>)
 8002116:	f003 facd 	bl	80056b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20000390 	.word	0x20000390

08002124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return 1;
 8002128:	2301      	movs	r3, #1
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_kill>:

int _kill(int pid, int sig)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800213e:	f004 ffdf 	bl	8007100 <__errno>
 8002142:	4603      	mov	r3, r0
 8002144:	2216      	movs	r2, #22
 8002146:	601a      	str	r2, [r3, #0]
  return -1;
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
}
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_exit>:

void _exit (int status)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800215c:	f04f 31ff 	mov.w	r1, #4294967295
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff ffe7 	bl	8002134 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002166:	bf00      	nop
 8002168:	e7fd      	b.n	8002166 <_exit+0x12>

0800216a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	b086      	sub	sp, #24
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	e00a      	b.n	8002192 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800217c:	f3af 8000 	nop.w
 8002180:	4601      	mov	r1, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	60ba      	str	r2, [r7, #8]
 8002188:	b2ca      	uxtb	r2, r1
 800218a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3301      	adds	r3, #1
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	429a      	cmp	r2, r3
 8002198:	dbf0      	blt.n	800217c <_read+0x12>
  }

  return len;
 800219a:	687b      	ldr	r3, [r7, #4]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3718      	adds	r7, #24
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e009      	b.n	80021ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	1c5a      	adds	r2, r3, #1
 80021ba:	60ba      	str	r2, [r7, #8]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dbf1      	blt.n	80021b6 <_write+0x12>
  }
  return len;
 80021d2:	687b      	ldr	r3, [r7, #4]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_close>:

int _close(int file)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002204:	605a      	str	r2, [r3, #4]
  return 0;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <_isatty>:

int _isatty(int file)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800221c:	2301      	movs	r3, #1
}
 800221e:	4618      	mov	r0, r3
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800224c:	4a14      	ldr	r2, [pc, #80]	@ (80022a0 <_sbrk+0x5c>)
 800224e:	4b15      	ldr	r3, [pc, #84]	@ (80022a4 <_sbrk+0x60>)
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002258:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <_sbrk+0x64>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002260:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <_sbrk+0x64>)
 8002262:	4a12      	ldr	r2, [pc, #72]	@ (80022ac <_sbrk+0x68>)
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	429a      	cmp	r2, r3
 8002272:	d207      	bcs.n	8002284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002274:	f004 ff44 	bl	8007100 <__errno>
 8002278:	4603      	mov	r3, r0
 800227a:	220c      	movs	r2, #12
 800227c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	e009      	b.n	8002298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002284:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <_sbrk+0x64>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <_sbrk+0x64>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	4a05      	ldr	r2, [pc, #20]	@ (80022a8 <_sbrk+0x64>)
 8002294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20020000 	.word	0x20020000
 80022a4:	00000400 	.word	0x00000400
 80022a8:	20000440 	.word	0x20000440
 80022ac:	20000598 	.word	0x20000598

080022b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b4:	4b06      	ldr	r3, [pc, #24]	@ (80022d0 <SystemInit+0x20>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ba:	4a05      	ldr	r2, [pc, #20]	@ (80022d0 <SystemInit+0x20>)
 80022bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800230c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022d8:	f7ff ffea 	bl	80022b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022dc:	480c      	ldr	r0, [pc, #48]	@ (8002310 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022de:	490d      	ldr	r1, [pc, #52]	@ (8002314 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e4:	e002      	b.n	80022ec <LoopCopyDataInit>

080022e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ea:	3304      	adds	r3, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f0:	d3f9      	bcc.n	80022e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f2:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002320 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f8:	e001      	b.n	80022fe <LoopFillZerobss>

080022fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022fc:	3204      	adds	r2, #4

080022fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002300:	d3fb      	bcc.n	80022fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002302:	f004 ff03 	bl	800710c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002306:	f7ff fa0f 	bl	8001728 <main>
  bx  lr    
 800230a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800230c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002314:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002318:	08009a00 	.word	0x08009a00
  ldr r2, =_sbss
 800231c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002320:	20000594 	.word	0x20000594

08002324 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002324:	e7fe      	b.n	8002324 <ADC_IRQHandler>
	...

08002328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800232c:	4b0e      	ldr	r3, [pc, #56]	@ (8002368 <HAL_Init+0x40>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0d      	ldr	r2, [pc, #52]	@ (8002368 <HAL_Init+0x40>)
 8002332:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002336:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002338:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <HAL_Init+0x40>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <HAL_Init+0x40>)
 800233e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002342:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002344:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <HAL_Init+0x40>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a07      	ldr	r2, [pc, #28]	@ (8002368 <HAL_Init+0x40>)
 800234a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800234e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002350:	2003      	movs	r0, #3
 8002352:	f000 f94f 	bl	80025f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002356:	200f      	movs	r0, #15
 8002358:	f000 f808 	bl	800236c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800235c:	f7ff fce4 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40023c00 	.word	0x40023c00

0800236c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002374:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_InitTick+0x54>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <HAL_InitTick+0x58>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002382:	fbb3 f3f1 	udiv	r3, r3, r1
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f967 	bl	800265e <HAL_SYSTICK_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00e      	b.n	80023b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b0f      	cmp	r3, #15
 800239e:	d80a      	bhi.n	80023b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a0:	2200      	movs	r2, #0
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f000 f92f 	bl	800260a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ac:	4a06      	ldr	r2, [pc, #24]	@ (80023c8 <HAL_InitTick+0x5c>)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	2000000c 	.word	0x2000000c
 80023c4:	20000014 	.word	0x20000014
 80023c8:	20000010 	.word	0x20000010

080023cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <HAL_IncTick+0x20>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_IncTick+0x24>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	@ (80023f0 <HAL_IncTick+0x24>)
 80023de:	6013      	str	r3, [r2, #0]
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000014 	.word	0x20000014
 80023f0:	20000444 	.word	0x20000444

080023f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return uwTick;
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_GetTick+0x14>)
 80023fa:	681b      	ldr	r3, [r3, #0]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	20000444 	.word	0x20000444

0800240c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002414:	f7ff ffee 	bl	80023f4 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d005      	beq.n	8002432 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002426:	4b0a      	ldr	r3, [pc, #40]	@ (8002450 <HAL_Delay+0x44>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4413      	add	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002432:	bf00      	nop
 8002434:	f7ff ffde 	bl	80023f4 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	429a      	cmp	r2, r3
 8002442:	d8f7      	bhi.n	8002434 <HAL_Delay+0x28>
  {
  }
}
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	20000014 	.word	0x20000014

08002454 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002464:	4b0c      	ldr	r3, [pc, #48]	@ (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002470:	4013      	ands	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800247c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002484:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002486:	4a04      	ldr	r2, [pc, #16]	@ (8002498 <__NVIC_SetPriorityGrouping+0x44>)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	60d3      	str	r3, [r2, #12]
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a0:	4b04      	ldr	r3, [pc, #16]	@ (80024b4 <__NVIC_GetPriorityGrouping+0x18>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	f003 0307 	and.w	r3, r3, #7
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	db0b      	blt.n	80024e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	f003 021f 	and.w	r2, r3, #31
 80024d0:	4907      	ldr	r1, [pc, #28]	@ (80024f0 <__NVIC_EnableIRQ+0x38>)
 80024d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2001      	movs	r0, #1
 80024da:	fa00 f202 	lsl.w	r2, r0, r2
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000e100 	.word	0xe000e100

080024f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	6039      	str	r1, [r7, #0]
 80024fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002504:	2b00      	cmp	r3, #0
 8002506:	db0a      	blt.n	800251e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	b2da      	uxtb	r2, r3
 800250c:	490c      	ldr	r1, [pc, #48]	@ (8002540 <__NVIC_SetPriority+0x4c>)
 800250e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002512:	0112      	lsls	r2, r2, #4
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	440b      	add	r3, r1
 8002518:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800251c:	e00a      	b.n	8002534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	b2da      	uxtb	r2, r3
 8002522:	4908      	ldr	r1, [pc, #32]	@ (8002544 <__NVIC_SetPriority+0x50>)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3b04      	subs	r3, #4
 800252c:	0112      	lsls	r2, r2, #4
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	440b      	add	r3, r1
 8002532:	761a      	strb	r2, [r3, #24]
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000e100 	.word	0xe000e100
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002548:	b480      	push	{r7}
 800254a:	b089      	sub	sp, #36	@ 0x24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f1c3 0307 	rsb	r3, r3, #7
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf28      	it	cs
 8002566:	2304      	movcs	r3, #4
 8002568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3304      	adds	r3, #4
 800256e:	2b06      	cmp	r3, #6
 8002570:	d902      	bls.n	8002578 <NVIC_EncodePriority+0x30>
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3b03      	subs	r3, #3
 8002576:	e000      	b.n	800257a <NVIC_EncodePriority+0x32>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	f04f 32ff 	mov.w	r2, #4294967295
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43da      	mvns	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002590:	f04f 31ff 	mov.w	r1, #4294967295
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43d9      	mvns	r1, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	4313      	orrs	r3, r2
         );
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3724      	adds	r7, #36	@ 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025c0:	d301      	bcc.n	80025c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00f      	b.n	80025e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025c6:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <SysTick_Config+0x40>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ce:	210f      	movs	r1, #15
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f7ff ff8e 	bl	80024f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <SysTick_Config+0x40>)
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025de:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <SysTick_Config+0x40>)
 80025e0:	2207      	movs	r2, #7
 80025e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000e010 	.word	0xe000e010

080025f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff29 	bl	8002454 <__NVIC_SetPriorityGrouping>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260a:	b580      	push	{r7, lr}
 800260c:	b086      	sub	sp, #24
 800260e:	af00      	add	r7, sp, #0
 8002610:	4603      	mov	r3, r0
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	607a      	str	r2, [r7, #4]
 8002616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800261c:	f7ff ff3e 	bl	800249c <__NVIC_GetPriorityGrouping>
 8002620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	6978      	ldr	r0, [r7, #20]
 8002628:	f7ff ff8e 	bl	8002548 <NVIC_EncodePriority>
 800262c:	4602      	mov	r2, r0
 800262e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff5d 	bl	80024f4 <__NVIC_SetPriority>
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	4603      	mov	r3, r0
 800264a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff ff31 	bl	80024b8 <__NVIC_EnableIRQ>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff ffa2 	bl	80025b0 <SysTick_Config>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff feb6 	bl	80023f4 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d008      	beq.n	80026a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2280      	movs	r2, #128	@ 0x80
 800269a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e052      	b.n	800274e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0216 	bic.w	r2, r2, #22
 80026b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d103      	bne.n	80026d8 <HAL_DMA_Abort+0x62>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0208 	bic.w	r2, r2, #8
 80026e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f8:	e013      	b.n	8002722 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026fa:	f7ff fe7b 	bl	80023f4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b05      	cmp	r3, #5
 8002706:	d90c      	bls.n	8002722 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e015      	b.n	800274e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e4      	bne.n	80026fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	223f      	movs	r2, #63	@ 0x3f
 8002736:	409a      	lsls	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d004      	beq.n	8002774 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2280      	movs	r2, #128	@ 0x80
 800276e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e00c      	b.n	800278e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2205      	movs	r2, #5
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800279c:	b480      	push	{r7}
 800279e:	b089      	sub	sp, #36	@ 0x24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	e159      	b.n	8002a6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b8:	2201      	movs	r2, #1
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	f040 8148 	bne.w	8002a66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d005      	beq.n	80027ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d130      	bne.n	8002850 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 0201 	and.w	r2, r3, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	2b03      	cmp	r3, #3
 800285a:	d017      	beq.n	800288c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	2203      	movs	r2, #3
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	43db      	mvns	r3, r3
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	4013      	ands	r3, r2
 8002872:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d123      	bne.n	80028e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	08da      	lsrs	r2, r3, #3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3208      	adds	r2, #8
 80028a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	220f      	movs	r2, #15
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	08da      	lsrs	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3208      	adds	r2, #8
 80028da:	69b9      	ldr	r1, [r7, #24]
 80028dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	2203      	movs	r2, #3
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 0203 	and.w	r2, r3, #3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80a2 	beq.w	8002a66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b57      	ldr	r3, [pc, #348]	@ (8002a84 <HAL_GPIO_Init+0x2e8>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292a:	4a56      	ldr	r2, [pc, #344]	@ (8002a84 <HAL_GPIO_Init+0x2e8>)
 800292c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002930:	6453      	str	r3, [r2, #68]	@ 0x44
 8002932:	4b54      	ldr	r3, [pc, #336]	@ (8002a84 <HAL_GPIO_Init+0x2e8>)
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293e:	4a52      	ldr	r2, [pc, #328]	@ (8002a88 <HAL_GPIO_Init+0x2ec>)
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a49      	ldr	r2, [pc, #292]	@ (8002a8c <HAL_GPIO_Init+0x2f0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d019      	beq.n	800299e <HAL_GPIO_Init+0x202>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a48      	ldr	r2, [pc, #288]	@ (8002a90 <HAL_GPIO_Init+0x2f4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d013      	beq.n	800299a <HAL_GPIO_Init+0x1fe>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a47      	ldr	r2, [pc, #284]	@ (8002a94 <HAL_GPIO_Init+0x2f8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00d      	beq.n	8002996 <HAL_GPIO_Init+0x1fa>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a46      	ldr	r2, [pc, #280]	@ (8002a98 <HAL_GPIO_Init+0x2fc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d007      	beq.n	8002992 <HAL_GPIO_Init+0x1f6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a45      	ldr	r2, [pc, #276]	@ (8002a9c <HAL_GPIO_Init+0x300>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <HAL_GPIO_Init+0x1f2>
 800298a:	2304      	movs	r3, #4
 800298c:	e008      	b.n	80029a0 <HAL_GPIO_Init+0x204>
 800298e:	2307      	movs	r3, #7
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x204>
 8002992:	2303      	movs	r3, #3
 8002994:	e004      	b.n	80029a0 <HAL_GPIO_Init+0x204>
 8002996:	2302      	movs	r3, #2
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x204>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x204>
 800299e:	2300      	movs	r3, #0
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	f002 0203 	and.w	r2, r2, #3
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	4093      	lsls	r3, r2
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b0:	4935      	ldr	r1, [pc, #212]	@ (8002a88 <HAL_GPIO_Init+0x2ec>)
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029be:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <HAL_GPIO_Init+0x304>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	43db      	mvns	r3, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4013      	ands	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029e2:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa0 <HAL_GPIO_Init+0x304>)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e8:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa0 <HAL_GPIO_Init+0x304>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a0c:	4a24      	ldr	r2, [pc, #144]	@ (8002aa0 <HAL_GPIO_Init+0x304>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a12:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <HAL_GPIO_Init+0x304>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a36:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa0 <HAL_GPIO_Init+0x304>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3c:	4b18      	ldr	r3, [pc, #96]	@ (8002aa0 <HAL_GPIO_Init+0x304>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a60:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa0 <HAL_GPIO_Init+0x304>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	f67f aea2 	bls.w	80027b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop
 8002a78:	3724      	adds	r7, #36	@ 0x24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40013800 	.word	0x40013800
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020400 	.word	0x40020400
 8002a94:	40020800 	.word	0x40020800
 8002a98:	40020c00 	.word	0x40020c00
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d003      	beq.n	8002ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aba:	887a      	ldrh	r2, [r7, #2]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac0:	e003      	b.n	8002aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac2:	887b      	ldrh	r3, [r7, #2]
 8002ac4:	041a      	lsls	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	460b      	mov	r3, r1
 8002ae0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ae8:	887a      	ldrh	r2, [r7, #2]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	041a      	lsls	r2, r3, #16
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	887b      	ldrh	r3, [r7, #2]
 8002af6:	400b      	ands	r3, r1
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e12b      	b.n	8002d76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff f920 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2224      	movs	r2, #36	@ 0x24
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0201 	bic.w	r2, r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b70:	f001 fd8e 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8002b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4a81      	ldr	r2, [pc, #516]	@ (8002d80 <HAL_I2C_Init+0x274>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d807      	bhi.n	8002b90 <HAL_I2C_Init+0x84>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	4a80      	ldr	r2, [pc, #512]	@ (8002d84 <HAL_I2C_Init+0x278>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	bf94      	ite	ls
 8002b88:	2301      	movls	r3, #1
 8002b8a:	2300      	movhi	r3, #0
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	e006      	b.n	8002b9e <HAL_I2C_Init+0x92>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a7d      	ldr	r2, [pc, #500]	@ (8002d88 <HAL_I2C_Init+0x27c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	bf94      	ite	ls
 8002b98:	2301      	movls	r3, #1
 8002b9a:	2300      	movhi	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0e7      	b.n	8002d76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a78      	ldr	r2, [pc, #480]	@ (8002d8c <HAL_I2C_Init+0x280>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9b      	lsrs	r3, r3, #18
 8002bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	4a6a      	ldr	r2, [pc, #424]	@ (8002d80 <HAL_I2C_Init+0x274>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d802      	bhi.n	8002be0 <HAL_I2C_Init+0xd4>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3301      	adds	r3, #1
 8002bde:	e009      	b.n	8002bf4 <HAL_I2C_Init+0xe8>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002be6:	fb02 f303 	mul.w	r3, r2, r3
 8002bea:	4a69      	ldr	r2, [pc, #420]	@ (8002d90 <HAL_I2C_Init+0x284>)
 8002bec:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf0:	099b      	lsrs	r3, r3, #6
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	495c      	ldr	r1, [pc, #368]	@ (8002d80 <HAL_I2C_Init+0x274>)
 8002c10:	428b      	cmp	r3, r1
 8002c12:	d819      	bhi.n	8002c48 <HAL_I2C_Init+0x13c>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	1e59      	subs	r1, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c22:	1c59      	adds	r1, r3, #1
 8002c24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c28:	400b      	ands	r3, r1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_I2C_Init+0x138>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1e59      	subs	r1, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c42:	e051      	b.n	8002ce8 <HAL_I2C_Init+0x1dc>
 8002c44:	2304      	movs	r3, #4
 8002c46:	e04f      	b.n	8002ce8 <HAL_I2C_Init+0x1dc>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d111      	bne.n	8002c74 <HAL_I2C_Init+0x168>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	1e58      	subs	r0, r3, #1
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	440b      	add	r3, r1
 8002c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf0c      	ite	eq
 8002c6c:	2301      	moveq	r3, #1
 8002c6e:	2300      	movne	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e012      	b.n	8002c9a <HAL_I2C_Init+0x18e>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e58      	subs	r0, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	0099      	lsls	r1, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_Init+0x196>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e022      	b.n	8002ce8 <HAL_I2C_Init+0x1dc>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_I2C_Init+0x1bc>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	1e58      	subs	r0, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	440b      	add	r3, r1
 8002cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc6:	e00f      	b.n	8002ce8 <HAL_I2C_Init+0x1dc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1e58      	subs	r0, r3, #1
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	0099      	lsls	r1, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cde:	3301      	adds	r3, #1
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	6809      	ldr	r1, [r1, #0]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69da      	ldr	r2, [r3, #28]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	6911      	ldr	r1, [r2, #16]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68d2      	ldr	r2, [r2, #12]
 8002d22:	4311      	orrs	r1, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	430b      	orrs	r3, r1
 8002d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	000186a0 	.word	0x000186a0
 8002d84:	001e847f 	.word	0x001e847f
 8002d88:	003d08ff 	.word	0x003d08ff
 8002d8c:	431bde83 	.word	0x431bde83
 8002d90:	10624dd3 	.word	0x10624dd3

08002d94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	4608      	mov	r0, r1
 8002d9e:	4611      	mov	r1, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	4603      	mov	r3, r0
 8002da4:	817b      	strh	r3, [r7, #10]
 8002da6:	460b      	mov	r3, r1
 8002da8:	813b      	strh	r3, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dae:	f7ff fb21 	bl	80023f4 <HAL_GetTick>
 8002db2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b20      	cmp	r3, #32
 8002dbe:	f040 80d9 	bne.w	8002f74 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	2319      	movs	r3, #25
 8002dc8:	2201      	movs	r2, #1
 8002dca:	496d      	ldr	r1, [pc, #436]	@ (8002f80 <HAL_I2C_Mem_Write+0x1ec>)
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fdb9 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e0cc      	b.n	8002f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_I2C_Mem_Write+0x56>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e0c5      	b.n	8002f76 <HAL_I2C_Mem_Write+0x1e2>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d007      	beq.n	8002e10 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2221      	movs	r2, #33	@ 0x21
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2240      	movs	r2, #64	@ 0x40
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f84 <HAL_I2C_Mem_Write+0x1f0>)
 8002e50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e52:	88f8      	ldrh	r0, [r7, #6]
 8002e54:	893a      	ldrh	r2, [r7, #8]
 8002e56:	8979      	ldrh	r1, [r7, #10]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	9301      	str	r3, [sp, #4]
 8002e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	4603      	mov	r3, r0
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fbf0 	bl	8003648 <I2C_RequestMemoryWrite>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d052      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e081      	b.n	8002f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fe7e 	bl	8003b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d107      	bne.n	8002e9a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e98:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e06b      	b.n	8002f76 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d11b      	bne.n	8002f14 <HAL_I2C_Mem_Write+0x180>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d017      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1aa      	bne.n	8002e72 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1c:	697a      	ldr	r2, [r7, #20]
 8002f1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fe71 	bl	8003c08 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d107      	bne.n	8002f44 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f42:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e016      	b.n	8002f76 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	e000      	b.n	8002f76 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
  }
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	00100002 	.word	0x00100002
 8002f84:	ffff0000 	.word	0xffff0000

08002f88 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	@ 0x30
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	817b      	strh	r3, [r7, #10]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	813b      	strh	r3, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fa2:	f7ff fa27 	bl	80023f4 <HAL_GetTick>
 8002fa6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	f040 8214 	bne.w	80033de <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	2319      	movs	r3, #25
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	497b      	ldr	r1, [pc, #492]	@ (80031ac <HAL_I2C_Mem_Read+0x224>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fcbf 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e207      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Mem_Read+0x56>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e200      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d007      	beq.n	8003004 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003012:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2222      	movs	r2, #34	@ 0x22
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2240      	movs	r2, #64	@ 0x40
 8003020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800302e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003034:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4a5b      	ldr	r2, [pc, #364]	@ (80031b0 <HAL_I2C_Mem_Read+0x228>)
 8003044:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003046:	88f8      	ldrh	r0, [r7, #6]
 8003048:	893a      	ldrh	r2, [r7, #8]
 800304a:	8979      	ldrh	r1, [r7, #10]
 800304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304e:	9301      	str	r3, [sp, #4]
 8003050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	4603      	mov	r3, r0
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fb8c 	bl	8003774 <I2C_RequestMemoryRead>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1bc      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d113      	bne.n	8003096 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	623b      	str	r3, [r7, #32]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	623b      	str	r3, [r7, #32]
 8003082:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e190      	b.n	80033b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309a:	2b01      	cmp	r3, #1
 800309c:	d11b      	bne.n	80030d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	e170      	b.n	80033b8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11b      	bne.n	8003116 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030fe:	2300      	movs	r3, #0
 8003100:	61bb      	str	r3, [r7, #24]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	e150      	b.n	80033b8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800312c:	e144      	b.n	80033b8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003132:	2b03      	cmp	r3, #3
 8003134:	f200 80f1 	bhi.w	800331a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313c:	2b01      	cmp	r3, #1
 800313e:	d123      	bne.n	8003188 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003142:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fda7 	bl	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e145      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691a      	ldr	r2, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	3b01      	subs	r3, #1
 8003172:	b29a      	uxth	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003186:	e117      	b.n	80033b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	2b02      	cmp	r3, #2
 800318e:	d14e      	bne.n	800322e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003196:	2200      	movs	r2, #0
 8003198:	4906      	ldr	r1, [pc, #24]	@ (80031b4 <HAL_I2C_Mem_Read+0x22c>)
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fbd2 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d008      	beq.n	80031b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e11a      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
 80031aa:	bf00      	nop
 80031ac:	00100002 	.word	0x00100002
 80031b0:	ffff0000 	.word	0xffff0000
 80031b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	1c5a      	adds	r2, r3, #1
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800322c:	e0c4      	b.n	80033b8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003234:	2200      	movs	r2, #0
 8003236:	496c      	ldr	r1, [pc, #432]	@ (80033e8 <HAL_I2C_Mem_Read+0x460>)
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fb83 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e0cb      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003256:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	1c5a      	adds	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003290:	2200      	movs	r2, #0
 8003292:	4955      	ldr	r1, [pc, #340]	@ (80033e8 <HAL_I2C_Mem_Read+0x460>)
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fb55 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e09d      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003318:	e04e      	b.n	80033b8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800331c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fcba 	bl	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e058      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003356:	b29b      	uxth	r3, r3
 8003358:	3b01      	subs	r3, #1
 800335a:	b29a      	uxth	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b04      	cmp	r3, #4
 800336c:	d124      	bne.n	80033b8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003372:	2b03      	cmp	r3, #3
 8003374:	d107      	bne.n	8003386 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003384:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f47f aeb6 	bne.w	800312e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3728      	adds	r7, #40	@ 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	00010004 	.word	0x00010004

080033ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7fe fffa 	bl	80023f4 <HAL_GetTick>
 8003400:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 8111 	bne.w	8003636 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	4988      	ldr	r1, [pc, #544]	@ (8003640 <HAL_I2C_IsDeviceReady+0x254>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f000 fa90 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
 800342c:	e104      	b.n	8003638 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_I2C_IsDeviceReady+0x50>
 8003438:	2302      	movs	r3, #2
 800343a:	e0fd      	b.n	8003638 <HAL_I2C_IsDeviceReady+0x24c>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d007      	beq.n	8003462 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003470:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2224      	movs	r2, #36	@ 0x24
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a70      	ldr	r2, [pc, #448]	@ (8003644 <HAL_I2C_IsDeviceReady+0x258>)
 8003484:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003494:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2200      	movs	r2, #0
 800349e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 fa4e 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034bc:	d103      	bne.n	80034c6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034c4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e0b6      	b.n	8003638 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	461a      	mov	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034d8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80034da:	f7fe ff8b 	bl	80023f4 <HAL_GetTick>
 80034de:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800350e:	e025      	b.n	800355c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003510:	f7fe ff70 	bl	80023f4 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <HAL_I2C_IsDeviceReady+0x13a>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	22a0      	movs	r2, #160	@ 0xa0
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b02      	cmp	r3, #2
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800354e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2ba0      	cmp	r3, #160	@ 0xa0
 8003566:	d005      	beq.n	8003574 <HAL_I2C_IsDeviceReady+0x188>
 8003568:	7dfb      	ldrb	r3, [r7, #23]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d102      	bne.n	8003574 <HAL_I2C_IsDeviceReady+0x188>
 800356e:	7dbb      	ldrb	r3, [r7, #22]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0cd      	beq.n	8003510 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b02      	cmp	r3, #2
 8003588:	d129      	bne.n	80035de <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003598:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695b      	ldr	r3, [r3, #20]
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	2319      	movs	r3, #25
 80035b6:	2201      	movs	r2, #1
 80035b8:	4921      	ldr	r1, [pc, #132]	@ (8003640 <HAL_I2C_IsDeviceReady+0x254>)
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f9c2 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e036      	b.n	8003638 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e02c      	b.n	8003638 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ec:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035f6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	2319      	movs	r3, #25
 80035fe:	2201      	movs	r2, #1
 8003600:	490f      	ldr	r1, [pc, #60]	@ (8003640 <HAL_I2C_IsDeviceReady+0x254>)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f99e 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e012      	b.n	8003638 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	3301      	adds	r3, #1
 8003616:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	f4ff af32 	bcc.w	8003486 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	00100002 	.word	0x00100002
 8003644:	ffff0000 	.word	0xffff0000

08003648 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af02      	add	r7, sp, #8
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	4608      	mov	r0, r1
 8003652:	4611      	mov	r1, r2
 8003654:	461a      	mov	r2, r3
 8003656:	4603      	mov	r3, r0
 8003658:	817b      	strh	r3, [r7, #10]
 800365a:	460b      	mov	r3, r1
 800365c:	813b      	strh	r3, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003670:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	2200      	movs	r2, #0
 800367a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f960 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003694:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003698:	d103      	bne.n	80036a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e05f      	b.n	8003766 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	461a      	mov	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b8:	6a3a      	ldr	r2, [r7, #32]
 80036ba:	492d      	ldr	r1, [pc, #180]	@ (8003770 <I2C_RequestMemoryWrite+0x128>)
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f9bb 	bl	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e04c      	b.n	8003766 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e4:	6a39      	ldr	r1, [r7, #32]
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 fa46 	bl	8003b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d107      	bne.n	800370a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003708:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e02b      	b.n	8003766 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003714:	893b      	ldrh	r3, [r7, #8]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	611a      	str	r2, [r3, #16]
 800371e:	e021      	b.n	8003764 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003720:	893b      	ldrh	r3, [r7, #8]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	b29b      	uxth	r3, r3
 8003726:	b2da      	uxtb	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003730:	6a39      	ldr	r1, [r7, #32]
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 fa20 	bl	8003b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003742:	2b04      	cmp	r3, #4
 8003744:	d107      	bne.n	8003756 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003754:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e005      	b.n	8003766 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800375a:	893b      	ldrh	r3, [r7, #8]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	00010002 	.word	0x00010002

08003774 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	461a      	mov	r2, r3
 8003782:	4603      	mov	r3, r0
 8003784:	817b      	strh	r3, [r7, #10]
 8003786:	460b      	mov	r3, r1
 8003788:	813b      	strh	r3, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800379c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f8c2 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d4:	d103      	bne.n	80037de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e0aa      	b.n	8003938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037e2:	897b      	ldrh	r3, [r7, #10]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	4952      	ldr	r1, [pc, #328]	@ (8003940 <I2C_RequestMemoryRead+0x1cc>)
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 f91d 	bl	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e097      	b.n	8003938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	617b      	str	r3, [r7, #20]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	617b      	str	r3, [r7, #20]
 800381c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f9a8 	bl	8003b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	2b04      	cmp	r3, #4
 8003834:	d107      	bne.n	8003846 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003844:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e076      	b.n	8003938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003850:	893b      	ldrh	r3, [r7, #8]
 8003852:	b2da      	uxtb	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	611a      	str	r2, [r3, #16]
 800385a:	e021      	b.n	80038a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800385c:	893b      	ldrh	r3, [r7, #8]
 800385e:	0a1b      	lsrs	r3, r3, #8
 8003860:	b29b      	uxth	r3, r3
 8003862:	b2da      	uxtb	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800386a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800386c:	6a39      	ldr	r1, [r7, #32]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f982 	bl	8003b78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	2b04      	cmp	r3, #4
 8003880:	d107      	bne.n	8003892 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003890:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e050      	b.n	8003938 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003896:	893b      	ldrh	r3, [r7, #8]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a2:	6a39      	ldr	r1, [r7, #32]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f967 	bl	8003b78 <I2C_WaitOnTXEFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d107      	bne.n	80038c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e035      	b.n	8003938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f82b 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00d      	beq.n	8003910 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003902:	d103      	bne.n	800390c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e013      	b.n	8003938 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003910:	897b      	ldrh	r3, [r7, #10]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	f043 0301 	orr.w	r3, r3, #1
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	6a3a      	ldr	r2, [r7, #32]
 8003924:	4906      	ldr	r1, [pc, #24]	@ (8003940 <I2C_RequestMemoryRead+0x1cc>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 f886 	bl	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	00010002 	.word	0x00010002

08003944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003954:	e048      	b.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d044      	beq.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fe fd49 	bl	80023f4 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d139      	bne.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	0c1b      	lsrs	r3, r3, #16
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d10d      	bne.n	800399a <I2C_WaitOnFlagUntilTimeout+0x56>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	43da      	mvns	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	e00c      	b.n	80039b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	43da      	mvns	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4013      	ands	r3, r2
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d116      	bne.n	80039e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e023      	b.n	8003a30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	0c1b      	lsrs	r3, r3, #16
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d10d      	bne.n	8003a0e <I2C_WaitOnFlagUntilTimeout+0xca>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	43da      	mvns	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	4013      	ands	r3, r2
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bf0c      	ite	eq
 8003a04:	2301      	moveq	r3, #1
 8003a06:	2300      	movne	r3, #0
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	e00c      	b.n	8003a28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	43da      	mvns	r2, r3
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf0c      	ite	eq
 8003a20:	2301      	moveq	r3, #1
 8003a22:	2300      	movne	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	461a      	mov	r2, r3
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d093      	beq.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
 8003a44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a46:	e071      	b.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a56:	d123      	bne.n	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	f043 0204 	orr.w	r2, r3, #4
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e067      	b.n	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa6:	d041      	beq.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa8:	f7fe fca4 	bl	80023f4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d302      	bcc.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d136      	bne.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d10c      	bne.n	8003ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	43da      	mvns	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e00b      	b.n	8003afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e021      	b.n	8003b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	0c1b      	lsrs	r3, r3, #16
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d10c      	bne.n	8003b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	43da      	mvns	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	4013      	ands	r3, r2
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e00b      	b.n	8003b68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf14      	ite	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	2300      	moveq	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f47f af6d 	bne.w	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b84:	e034      	b.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 f8e3 	bl	8003d52 <I2C_IsAcknowledgeFailed>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e034      	b.n	8003c00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9c:	d028      	beq.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9e:	f7fe fc29 	bl	80023f4 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d11d      	bne.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bbe:	2b80      	cmp	r3, #128	@ 0x80
 8003bc0:	d016      	beq.n	8003bf0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	f043 0220 	orr.w	r2, r3, #32
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e007      	b.n	8003c00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bfa:	2b80      	cmp	r3, #128	@ 0x80
 8003bfc:	d1c3      	bne.n	8003b86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c14:	e034      	b.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 f89b 	bl	8003d52 <I2C_IsAcknowledgeFailed>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e034      	b.n	8003c90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d028      	beq.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2e:	f7fe fbe1 	bl	80023f4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d302      	bcc.n	8003c44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d11d      	bne.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	f003 0304 	and.w	r3, r3, #4
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d016      	beq.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e007      	b.n	8003c90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d1c3      	bne.n	8003c16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca4:	e049      	b.n	8003d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d119      	bne.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0210 	mvn.w	r2, #16
 8003cbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e030      	b.n	8003d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce8:	f7fe fb84 	bl	80023f4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d302      	bcc.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d11d      	bne.n	8003d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d08:	2b40      	cmp	r3, #64	@ 0x40
 8003d0a:	d016      	beq.n	8003d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	f043 0220 	orr.w	r2, r3, #32
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e007      	b.n	8003d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d44:	2b40      	cmp	r3, #64	@ 0x40
 8003d46:	d1ae      	bne.n	8003ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d68:	d11b      	bne.n	8003da2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	f043 0204 	orr.w	r2, r3, #4
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e267      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d075      	beq.n	8003eba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dce:	4b88      	ldr	r3, [pc, #544]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
 8003dd6:	2b04      	cmp	r3, #4
 8003dd8:	d00c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4b85      	ldr	r3, [pc, #532]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d112      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003de6:	4b82      	ldr	r3, [pc, #520]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003df2:	d10b      	bne.n	8003e0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d05b      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x108>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d157      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e242      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e14:	d106      	bne.n	8003e24 <HAL_RCC_OscConfig+0x74>
 8003e16:	4b76      	ldr	r3, [pc, #472]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a75      	ldr	r2, [pc, #468]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e01d      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e2c:	d10c      	bne.n	8003e48 <HAL_RCC_OscConfig+0x98>
 8003e2e:	4b70      	ldr	r3, [pc, #448]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a6f      	ldr	r2, [pc, #444]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a6c      	ldr	r2, [pc, #432]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e00b      	b.n	8003e60 <HAL_RCC_OscConfig+0xb0>
 8003e48:	4b69      	ldr	r3, [pc, #420]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a68      	ldr	r2, [pc, #416]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	4b66      	ldr	r3, [pc, #408]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a65      	ldr	r2, [pc, #404]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d013      	beq.n	8003e90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e68:	f7fe fac4 	bl	80023f4 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	e008      	b.n	8003e82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e70:	f7fe fac0 	bl	80023f4 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b64      	cmp	r3, #100	@ 0x64
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e207      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e82:	4b5b      	ldr	r3, [pc, #364]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0xc0>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e90:	f7fe fab0 	bl	80023f4 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e98:	f7fe faac 	bl	80023f4 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b64      	cmp	r3, #100	@ 0x64
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e1f3      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	4b51      	ldr	r3, [pc, #324]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0xe8>
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d063      	beq.n	8003f8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00b      	beq.n	8003eea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d11c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ede:	4b44      	ldr	r3, [pc, #272]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d116      	bne.n	8003f18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eea:	4b41      	ldr	r3, [pc, #260]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d001      	beq.n	8003f02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e1c7      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f02:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4937      	ldr	r1, [pc, #220]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f16:	e03a      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d020      	beq.n	8003f62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f20:	4b34      	ldr	r3, [pc, #208]	@ (8003ff4 <HAL_RCC_OscConfig+0x244>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f26:	f7fe fa65 	bl	80023f4 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f2e:	f7fe fa61 	bl	80023f4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e1a8      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4c:	4b28      	ldr	r3, [pc, #160]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4925      	ldr	r1, [pc, #148]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f62:	4b24      	ldr	r3, [pc, #144]	@ (8003ff4 <HAL_RCC_OscConfig+0x244>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f68:	f7fe fa44 	bl	80023f4 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f70:	f7fe fa40 	bl	80023f4 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e187      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0308 	and.w	r3, r3, #8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d036      	beq.n	8004008 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d016      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa2:	4b15      	ldr	r3, [pc, #84]	@ (8003ff8 <HAL_RCC_OscConfig+0x248>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fe fa24 	bl	80023f4 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb0:	f7fe fa20 	bl	80023f4 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e167      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x200>
 8003fce:	e01b      	b.n	8004008 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b09      	ldr	r3, [pc, #36]	@ (8003ff8 <HAL_RCC_OscConfig+0x248>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fa0d 	bl	80023f4 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fdc:	e00e      	b.n	8003ffc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fde:	f7fe fa09 	bl	80023f4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d907      	bls.n	8003ffc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e150      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	42470000 	.word	0x42470000
 8003ff8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	4b88      	ldr	r3, [pc, #544]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1ea      	bne.n	8003fde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8097 	beq.w	8004144 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401a:	4b81      	ldr	r3, [pc, #516]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10f      	bne.n	8004046 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	4b7d      	ldr	r3, [pc, #500]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	4a7c      	ldr	r2, [pc, #496]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004030:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	@ 0x40
 8004036:	4b7a      	ldr	r3, [pc, #488]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800403e:	60bb      	str	r3, [r7, #8]
 8004040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004042:	2301      	movs	r3, #1
 8004044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004046:	4b77      	ldr	r3, [pc, #476]	@ (8004224 <HAL_RCC_OscConfig+0x474>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404e:	2b00      	cmp	r3, #0
 8004050:	d118      	bne.n	8004084 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004052:	4b74      	ldr	r3, [pc, #464]	@ (8004224 <HAL_RCC_OscConfig+0x474>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a73      	ldr	r2, [pc, #460]	@ (8004224 <HAL_RCC_OscConfig+0x474>)
 8004058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800405c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405e:	f7fe f9c9 	bl	80023f4 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004064:	e008      	b.n	8004078 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004066:	f7fe f9c5 	bl	80023f4 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e10c      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004078:	4b6a      	ldr	r3, [pc, #424]	@ (8004224 <HAL_RCC_OscConfig+0x474>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0f0      	beq.n	8004066 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d106      	bne.n	800409a <HAL_RCC_OscConfig+0x2ea>
 800408c:	4b64      	ldr	r3, [pc, #400]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800408e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004090:	4a63      	ldr	r2, [pc, #396]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004092:	f043 0301 	orr.w	r3, r3, #1
 8004096:	6713      	str	r3, [r2, #112]	@ 0x70
 8004098:	e01c      	b.n	80040d4 <HAL_RCC_OscConfig+0x324>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b05      	cmp	r3, #5
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x30c>
 80040a2:	4b5f      	ldr	r3, [pc, #380]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a6:	4a5e      	ldr	r2, [pc, #376]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040a8:	f043 0304 	orr.w	r3, r3, #4
 80040ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0x324>
 80040bc:	4b58      	ldr	r3, [pc, #352]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c0:	4a57      	ldr	r2, [pc, #348]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040c2:	f023 0301 	bic.w	r3, r3, #1
 80040c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040c8:	4b55      	ldr	r3, [pc, #340]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040cc:	4a54      	ldr	r2, [pc, #336]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040ce:	f023 0304 	bic.w	r3, r3, #4
 80040d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d015      	beq.n	8004108 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040dc:	f7fe f98a 	bl	80023f4 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e4:	f7fe f986 	bl	80023f4 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e0cb      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fa:	4b49      	ldr	r3, [pc, #292]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80040fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ee      	beq.n	80040e4 <HAL_RCC_OscConfig+0x334>
 8004106:	e014      	b.n	8004132 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fe f974 	bl	80023f4 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800410e:	e00a      	b.n	8004126 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004110:	f7fe f970 	bl	80023f4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e0b5      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004126:	4b3e      	ldr	r3, [pc, #248]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1ee      	bne.n	8004110 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d105      	bne.n	8004144 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004138:	4b39      	ldr	r3, [pc, #228]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800413a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413c:	4a38      	ldr	r2, [pc, #224]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 800413e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004142:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80a1 	beq.w	8004290 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800414e:	4b34      	ldr	r3, [pc, #208]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f003 030c 	and.w	r3, r3, #12
 8004156:	2b08      	cmp	r3, #8
 8004158:	d05c      	beq.n	8004214 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b02      	cmp	r3, #2
 8004160:	d141      	bne.n	80041e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_RCC_OscConfig+0x478>)
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fe f944 	bl	80023f4 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004170:	f7fe f940 	bl	80023f4 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b02      	cmp	r3, #2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e087      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004182:	4b27      	ldr	r3, [pc, #156]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69da      	ldr	r2, [r3, #28]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	019b      	lsls	r3, r3, #6
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	085b      	lsrs	r3, r3, #1
 80041a6:	3b01      	subs	r3, #1
 80041a8:	041b      	lsls	r3, r3, #16
 80041aa:	431a      	orrs	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	061b      	lsls	r3, r3, #24
 80041b2:	491b      	ldr	r1, [pc, #108]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004228 <HAL_RCC_OscConfig+0x478>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041be:	f7fe f919 	bl	80023f4 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fe f915 	bl	80023f4 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e05c      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x416>
 80041e4:	e054      	b.n	8004290 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <HAL_RCC_OscConfig+0x478>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ec:	f7fe f902 	bl	80023f4 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fe f8fe 	bl	80023f4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e045      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	4b06      	ldr	r3, [pc, #24]	@ (8004220 <HAL_RCC_OscConfig+0x470>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x444>
 8004212:	e03d      	b.n	8004290 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d107      	bne.n	800422c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e038      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
 8004220:	40023800 	.word	0x40023800
 8004224:	40007000 	.word	0x40007000
 8004228:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800422c:	4b1b      	ldr	r3, [pc, #108]	@ (800429c <HAL_RCC_OscConfig+0x4ec>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d028      	beq.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d121      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004252:	429a      	cmp	r2, r3
 8004254:	d11a      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800425c:	4013      	ands	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004262:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004264:	4293      	cmp	r3, r2
 8004266:	d111      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	3b01      	subs	r3, #1
 8004276:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004286:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800

080042a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e0cc      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b4:	4b68      	ldr	r3, [pc, #416]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d90c      	bls.n	80042dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b65      	ldr	r3, [pc, #404]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b63      	ldr	r3, [pc, #396]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0b8      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d020      	beq.n	800432a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042f4:	4b59      	ldr	r3, [pc, #356]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	4a58      	ldr	r2, [pc, #352]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800430c:	4b53      	ldr	r3, [pc, #332]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	4a52      	ldr	r2, [pc, #328]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004316:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004318:	4b50      	ldr	r3, [pc, #320]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	494d      	ldr	r1, [pc, #308]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d044      	beq.n	80043c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d107      	bne.n	800434e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433e:	4b47      	ldr	r3, [pc, #284]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d119      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e07f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d003      	beq.n	800435e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435a:	2b03      	cmp	r3, #3
 800435c:	d107      	bne.n	800436e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435e:	4b3f      	ldr	r3, [pc, #252]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e06f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436e:	4b3b      	ldr	r3, [pc, #236]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d101      	bne.n	800437e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e067      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800437e:	4b37      	ldr	r3, [pc, #220]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f023 0203 	bic.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4934      	ldr	r1, [pc, #208]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004390:	f7fe f830 	bl	80023f4 <HAL_GetTick>
 8004394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	e00a      	b.n	80043ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004398:	f7fe f82c 	bl	80023f4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e04f      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ae:	4b2b      	ldr	r3, [pc, #172]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 020c 	and.w	r2, r3, #12
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	429a      	cmp	r2, r3
 80043be:	d1eb      	bne.n	8004398 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043c0:	4b25      	ldr	r3, [pc, #148]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d20c      	bcs.n	80043e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ce:	4b22      	ldr	r3, [pc, #136]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d0:	683a      	ldr	r2, [r7, #0]
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b20      	ldr	r3, [pc, #128]	@ (8004458 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e032      	b.n	800444e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f4:	4b19      	ldr	r3, [pc, #100]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4916      	ldr	r1, [pc, #88]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0308 	and.w	r3, r3, #8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d009      	beq.n	8004426 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004412:	4b12      	ldr	r3, [pc, #72]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	490e      	ldr	r1, [pc, #56]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004426:	f000 f821 	bl	800446c <HAL_RCC_GetSysClockFreq>
 800442a:	4602      	mov	r2, r0
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	490a      	ldr	r1, [pc, #40]	@ (8004460 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	5ccb      	ldrb	r3, [r1, r3]
 800443a:	fa22 f303 	lsr.w	r3, r2, r3
 800443e:	4a09      	ldr	r2, [pc, #36]	@ (8004464 <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004442:	4b09      	ldr	r3, [pc, #36]	@ (8004468 <HAL_RCC_ClockConfig+0x1c8>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd ff90 	bl	800236c <HAL_InitTick>

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40023c00 	.word	0x40023c00
 800445c:	40023800 	.word	0x40023800
 8004460:	08009630 	.word	0x08009630
 8004464:	2000000c 	.word	0x2000000c
 8004468:	20000010 	.word	0x20000010

0800446c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800446c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004470:	b094      	sub	sp, #80	@ 0x50
 8004472:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	647b      	str	r3, [r7, #68]	@ 0x44
 8004478:	2300      	movs	r3, #0
 800447a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447c:	2300      	movs	r3, #0
 800447e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004484:	4b79      	ldr	r3, [pc, #484]	@ (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	2b08      	cmp	r3, #8
 800448e:	d00d      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0x40>
 8004490:	2b08      	cmp	r3, #8
 8004492:	f200 80e1 	bhi.w	8004658 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_RCC_GetSysClockFreq+0x34>
 800449a:	2b04      	cmp	r3, #4
 800449c:	d003      	beq.n	80044a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800449e:	e0db      	b.n	8004658 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044a0:	4b73      	ldr	r3, [pc, #460]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x204>)
 80044a2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80044a4:	e0db      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044a6:	4b73      	ldr	r3, [pc, #460]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x208>)
 80044a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044aa:	e0d8      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044ac:	4b6f      	ldr	r3, [pc, #444]	@ (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044b6:	4b6d      	ldr	r3, [pc, #436]	@ (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d063      	beq.n	800458a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044c2:	4b6a      	ldr	r3, [pc, #424]	@ (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	2200      	movs	r2, #0
 80044ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044d6:	2300      	movs	r3, #0
 80044d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044de:	4622      	mov	r2, r4
 80044e0:	462b      	mov	r3, r5
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f04f 0100 	mov.w	r1, #0
 80044ea:	0159      	lsls	r1, r3, #5
 80044ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f0:	0150      	lsls	r0, r2, #5
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	4621      	mov	r1, r4
 80044f8:	1a51      	subs	r1, r2, r1
 80044fa:	6139      	str	r1, [r7, #16]
 80044fc:	4629      	mov	r1, r5
 80044fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004510:	4659      	mov	r1, fp
 8004512:	018b      	lsls	r3, r1, #6
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800451a:	4651      	mov	r1, sl
 800451c:	018a      	lsls	r2, r1, #6
 800451e:	4651      	mov	r1, sl
 8004520:	ebb2 0801 	subs.w	r8, r2, r1
 8004524:	4659      	mov	r1, fp
 8004526:	eb63 0901 	sbc.w	r9, r3, r1
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004536:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800453a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800453e:	4690      	mov	r8, r2
 8004540:	4699      	mov	r9, r3
 8004542:	4623      	mov	r3, r4
 8004544:	eb18 0303 	adds.w	r3, r8, r3
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	462b      	mov	r3, r5
 800454c:	eb49 0303 	adc.w	r3, r9, r3
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800455e:	4629      	mov	r1, r5
 8004560:	024b      	lsls	r3, r1, #9
 8004562:	4621      	mov	r1, r4
 8004564:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004568:	4621      	mov	r1, r4
 800456a:	024a      	lsls	r2, r1, #9
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004572:	2200      	movs	r2, #0
 8004574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004578:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800457c:	f7fc fb6c 	bl	8000c58 <__aeabi_uldivmod>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4613      	mov	r3, r2
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004588:	e058      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800458a:	4b38      	ldr	r3, [pc, #224]	@ (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	099b      	lsrs	r3, r3, #6
 8004590:	2200      	movs	r2, #0
 8004592:	4618      	mov	r0, r3
 8004594:	4611      	mov	r1, r2
 8004596:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800459a:	623b      	str	r3, [r7, #32]
 800459c:	2300      	movs	r3, #0
 800459e:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045a4:	4642      	mov	r2, r8
 80045a6:	464b      	mov	r3, r9
 80045a8:	f04f 0000 	mov.w	r0, #0
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	0159      	lsls	r1, r3, #5
 80045b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045b6:	0150      	lsls	r0, r2, #5
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4641      	mov	r1, r8
 80045be:	ebb2 0a01 	subs.w	sl, r2, r1
 80045c2:	4649      	mov	r1, r9
 80045c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045dc:	ebb2 040a 	subs.w	r4, r2, sl
 80045e0:	eb63 050b 	sbc.w	r5, r3, fp
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	00eb      	lsls	r3, r5, #3
 80045ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045f2:	00e2      	lsls	r2, r4, #3
 80045f4:	4614      	mov	r4, r2
 80045f6:	461d      	mov	r5, r3
 80045f8:	4643      	mov	r3, r8
 80045fa:	18e3      	adds	r3, r4, r3
 80045fc:	603b      	str	r3, [r7, #0]
 80045fe:	464b      	mov	r3, r9
 8004600:	eb45 0303 	adc.w	r3, r5, r3
 8004604:	607b      	str	r3, [r7, #4]
 8004606:	f04f 0200 	mov.w	r2, #0
 800460a:	f04f 0300 	mov.w	r3, #0
 800460e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004612:	4629      	mov	r1, r5
 8004614:	028b      	lsls	r3, r1, #10
 8004616:	4621      	mov	r1, r4
 8004618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800461c:	4621      	mov	r1, r4
 800461e:	028a      	lsls	r2, r1, #10
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004626:	2200      	movs	r2, #0
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	61fa      	str	r2, [r7, #28]
 800462c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004630:	f7fc fb12 	bl	8000c58 <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4613      	mov	r3, r2
 800463a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800463c:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_RCC_GetSysClockFreq+0x200>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	3301      	adds	r3, #1
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800464c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800464e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004656:	e002      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <HAL_RCC_GetSysClockFreq+0x204>)
 800465a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800465c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800465e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004660:	4618      	mov	r0, r3
 8004662:	3750      	adds	r7, #80	@ 0x50
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800
 8004670:	00f42400 	.word	0x00f42400
 8004674:	007a1200 	.word	0x007a1200

08004678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800467c:	4b03      	ldr	r3, [pc, #12]	@ (800468c <HAL_RCC_GetHCLKFreq+0x14>)
 800467e:	681b      	ldr	r3, [r3, #0]
}
 8004680:	4618      	mov	r0, r3
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	2000000c 	.word	0x2000000c

08004690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004694:	f7ff fff0 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 8004698:	4602      	mov	r2, r0
 800469a:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	0a9b      	lsrs	r3, r3, #10
 80046a0:	f003 0307 	and.w	r3, r3, #7
 80046a4:	4903      	ldr	r1, [pc, #12]	@ (80046b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046a6:	5ccb      	ldrb	r3, [r1, r3]
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40023800 	.word	0x40023800
 80046b4:	08009640 	.word	0x08009640

080046b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046bc:	f7ff ffdc 	bl	8004678 <HAL_RCC_GetHCLKFreq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	0b5b      	lsrs	r3, r3, #13
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	4903      	ldr	r1, [pc, #12]	@ (80046dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40023800 	.word	0x40023800
 80046dc:	08009640 	.word	0x08009640

080046e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d105      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004704:	2b00      	cmp	r3, #0
 8004706:	d038      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004708:	4b68      	ldr	r3, [pc, #416]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800470e:	f7fd fe71 	bl	80023f4 <HAL_GetTick>
 8004712:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004716:	f7fd fe6d 	bl	80023f4 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e0bd      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004728:	4b61      	ldr	r3, [pc, #388]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	019b      	lsls	r3, r3, #6
 800473e:	431a      	orrs	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	071b      	lsls	r3, r3, #28
 8004746:	495a      	ldr	r1, [pc, #360]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004748:	4313      	orrs	r3, r2
 800474a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800474e:	4b57      	ldr	r3, [pc, #348]	@ (80048ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004754:	f7fd fe4e 	bl	80023f4 <HAL_GetTick>
 8004758:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800475a:	e008      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800475c:	f7fd fe4a 	bl	80023f4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d901      	bls.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e09a      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800476e:	4b50      	ldr	r3, [pc, #320]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	f000 8083 	beq.w	800488e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	4b48      	ldr	r3, [pc, #288]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004790:	4a47      	ldr	r2, [pc, #284]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004796:	6413      	str	r3, [r2, #64]	@ 0x40
 8004798:	4b45      	ldr	r3, [pc, #276]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047a4:	4b43      	ldr	r3, [pc, #268]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a42      	ldr	r2, [pc, #264]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ae:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047b0:	f7fd fe20 	bl	80023f4 <HAL_GetTick>
 80047b4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047b6:	e008      	b.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047b8:	f7fd fe1c 	bl	80023f4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d901      	bls.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e06c      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047ca:	4b3a      	ldr	r3, [pc, #232]	@ (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0f0      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047d6:	4b36      	ldr	r3, [pc, #216]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047de:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d02f      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d028      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047f4:	4b2e      	ldr	r3, [pc, #184]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047fe:	4b2e      	ldr	r3, [pc, #184]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004804:	4b2c      	ldr	r3, [pc, #176]	@ (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004806:	2200      	movs	r2, #0
 8004808:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800480a:	4a29      	ldr	r2, [pc, #164]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004810:	4b27      	ldr	r3, [pc, #156]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d114      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800481c:	f7fd fdea 	bl	80023f4 <HAL_GetTick>
 8004820:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004822:	e00a      	b.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004824:	f7fd fde6 	bl	80023f4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e034      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483a:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ee      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800484e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004852:	d10d      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004854:	4b16      	ldr	r3, [pc, #88]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004864:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004868:	4911      	ldr	r1, [pc, #68]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
 800486e:	e005      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004870:	4b0f      	ldr	r3, [pc, #60]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	4a0e      	ldr	r2, [pc, #56]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004876:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800487a:	6093      	str	r3, [r2, #8]
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800487e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004888:	4909      	ldr	r1, [pc, #36]	@ (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800488a:	4313      	orrs	r3, r2
 800488c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	7d1a      	ldrb	r2, [r3, #20]
 800489e:	4b07      	ldr	r3, [pc, #28]	@ (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80048a0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	42470068 	.word	0x42470068
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40007000 	.word	0x40007000
 80048b8:	42470e40 	.word	0x42470e40
 80048bc:	424711e0 	.word	0x424711e0

080048c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e041      	b.n	8004956 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd fab0 	bl	8001e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 fa34 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b082      	sub	sp, #8
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e041      	b.n	80049f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d106      	bne.n	800498a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f7fd fa3f 	bl	8001e08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f000 f9e5 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2201      	movs	r2, #1
 80049a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e041      	b.n	8004a92 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f839 	bl	8004a9a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f000 f996 	bl	8004d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b086      	sub	sp, #24
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d101      	bne.n	8004acc <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	e088      	b.n	8004bde <HAL_TIM_IC_ConfigChannel+0x130>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d11b      	bne.n	8004b12 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004aea:	f000 fb57 	bl	800519c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 020c 	bic.w	r2, r2, #12
 8004afc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6999      	ldr	r1, [r3, #24]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	619a      	str	r2, [r3, #24]
 8004b10:	e060      	b.n	8004bd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d11c      	bne.n	8004b52 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004b28:	f000 fba0 	bl	800526c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b3a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6999      	ldr	r1, [r3, #24]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	021a      	lsls	r2, r3, #8
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	619a      	str	r2, [r3, #24]
 8004b50:	e040      	b.n	8004bd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d11b      	bne.n	8004b90 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004b68:	f000 fbbd 	bl	80052e6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f022 020c 	bic.w	r2, r2, #12
 8004b7a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69d9      	ldr	r1, [r3, #28]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	689a      	ldr	r2, [r3, #8]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	61da      	str	r2, [r3, #28]
 8004b8e:	e021      	b.n	8004bd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	d11c      	bne.n	8004bd0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004ba6:	f000 fbda 	bl	800535e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004bb8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	69d9      	ldr	r1, [r3, #28]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	021a      	lsls	r2, r3, #8
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	61da      	str	r2, [r3, #28]
 8004bce:	e001      	b.n	8004bd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e0ae      	b.n	8004d64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b0c      	cmp	r3, #12
 8004c12:	f200 809f 	bhi.w	8004d54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c16:	a201      	add	r2, pc, #4	@ (adr r2, 8004c1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004c51 	.word	0x08004c51
 8004c20:	08004d55 	.word	0x08004d55
 8004c24:	08004d55 	.word	0x08004d55
 8004c28:	08004d55 	.word	0x08004d55
 8004c2c:	08004c91 	.word	0x08004c91
 8004c30:	08004d55 	.word	0x08004d55
 8004c34:	08004d55 	.word	0x08004d55
 8004c38:	08004d55 	.word	0x08004d55
 8004c3c:	08004cd3 	.word	0x08004cd3
 8004c40:	08004d55 	.word	0x08004d55
 8004c44:	08004d55 	.word	0x08004d55
 8004c48:	08004d55 	.word	0x08004d55
 8004c4c:	08004d13 	.word	0x08004d13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f914 	bl	8004e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0208 	orr.w	r2, r2, #8
 8004c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699a      	ldr	r2, [r3, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0204 	bic.w	r2, r2, #4
 8004c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6999      	ldr	r1, [r3, #24]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	619a      	str	r2, [r3, #24]
      break;
 8004c8e:	e064      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f95a 	bl	8004f50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6999      	ldr	r1, [r3, #24]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	619a      	str	r2, [r3, #24]
      break;
 8004cd0:	e043      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f9a5 	bl	8005028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0208 	orr.w	r2, r2, #8
 8004cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f022 0204 	bic.w	r2, r2, #4
 8004cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69d9      	ldr	r1, [r3, #28]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	691a      	ldr	r2, [r3, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	61da      	str	r2, [r3, #28]
      break;
 8004d10:	e023      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 f9ef 	bl	80050fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69d9      	ldr	r1, [r3, #28]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	021a      	lsls	r2, r3, #8
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	61da      	str	r2, [r3, #28]
      break;
 8004d52:	e002      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	75fb      	strb	r3, [r7, #23]
      break;
 8004d58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a3a      	ldr	r2, [pc, #232]	@ (8004e68 <TIM_Base_SetConfig+0xfc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00f      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d8a:	d00b      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a37      	ldr	r2, [pc, #220]	@ (8004e6c <TIM_Base_SetConfig+0x100>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d007      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a36      	ldr	r2, [pc, #216]	@ (8004e70 <TIM_Base_SetConfig+0x104>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d003      	beq.n	8004da4 <TIM_Base_SetConfig+0x38>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a35      	ldr	r2, [pc, #212]	@ (8004e74 <TIM_Base_SetConfig+0x108>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a2b      	ldr	r2, [pc, #172]	@ (8004e68 <TIM_Base_SetConfig+0xfc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d01b      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc4:	d017      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <TIM_Base_SetConfig+0x100>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d013      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a27      	ldr	r2, [pc, #156]	@ (8004e70 <TIM_Base_SetConfig+0x104>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d00f      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a26      	ldr	r2, [pc, #152]	@ (8004e74 <TIM_Base_SetConfig+0x108>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a25      	ldr	r2, [pc, #148]	@ (8004e78 <TIM_Base_SetConfig+0x10c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d007      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a24      	ldr	r2, [pc, #144]	@ (8004e7c <TIM_Base_SetConfig+0x110>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_Base_SetConfig+0x8a>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a23      	ldr	r2, [pc, #140]	@ (8004e80 <TIM_Base_SetConfig+0x114>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d108      	bne.n	8004e08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004e68 <TIM_Base_SetConfig+0xfc>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d103      	bne.n	8004e3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d105      	bne.n	8004e5a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f023 0201 	bic.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	611a      	str	r2, [r3, #16]
  }
}
 8004e5a:	bf00      	nop
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40000c00 	.word	0x40000c00
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	f023 0201 	bic.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0303 	bic.w	r3, r3, #3
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	f023 0302 	bic.w	r3, r3, #2
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a1c      	ldr	r2, [pc, #112]	@ (8004f4c <TIM_OC1_SetConfig+0xc8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d10c      	bne.n	8004efa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0308 	bic.w	r3, r3, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0304 	bic.w	r3, r3, #4
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a13      	ldr	r2, [pc, #76]	@ (8004f4c <TIM_OC1_SetConfig+0xc8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d111      	bne.n	8004f26 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	621a      	str	r2, [r3, #32]
}
 8004f40:	bf00      	nop
 8004f42:	371c      	adds	r7, #28
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr
 8004f4c:	40010000 	.word	0x40010000

08004f50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b087      	sub	sp, #28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	f023 0210 	bic.w	r2, r3, #16
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	021b      	lsls	r3, r3, #8
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0320 	bic.w	r3, r3, #32
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a1e      	ldr	r2, [pc, #120]	@ (8005024 <TIM_OC2_SetConfig+0xd4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10d      	bne.n	8004fcc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a15      	ldr	r2, [pc, #84]	@ (8005024 <TIM_OC2_SetConfig+0xd4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d113      	bne.n	8004ffc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	695b      	ldr	r3, [r3, #20]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000

08005028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f023 0303 	bic.w	r3, r3, #3
 800505e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	021b      	lsls	r3, r3, #8
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	4313      	orrs	r3, r2
 800507c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a1d      	ldr	r2, [pc, #116]	@ (80050f8 <TIM_OC3_SetConfig+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10d      	bne.n	80050a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800508c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	021b      	lsls	r3, r3, #8
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	4313      	orrs	r3, r2
 8005098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a14      	ldr	r2, [pc, #80]	@ (80050f8 <TIM_OC3_SetConfig+0xd0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d113      	bne.n	80050d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40010000 	.word	0x40010000

080050fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	021b      	lsls	r3, r3, #8
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	031b      	lsls	r3, r3, #12
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a10      	ldr	r2, [pc, #64]	@ (8005198 <TIM_OC4_SetConfig+0x9c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d109      	bne.n	8005170 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005162:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	019b      	lsls	r3, r3, #6
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000

0800519c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800519c:	b480      	push	{r7}
 800519e:	b087      	sub	sp, #28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f023 0201 	bic.w	r2, r3, #1
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	4a24      	ldr	r2, [pc, #144]	@ (8005258 <TIM_TI1_SetConfig+0xbc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d013      	beq.n	80051f2 <TIM_TI1_SetConfig+0x56>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d0:	d00f      	beq.n	80051f2 <TIM_TI1_SetConfig+0x56>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a21      	ldr	r2, [pc, #132]	@ (800525c <TIM_TI1_SetConfig+0xc0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_TI1_SetConfig+0x56>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4a20      	ldr	r2, [pc, #128]	@ (8005260 <TIM_TI1_SetConfig+0xc4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_TI1_SetConfig+0x56>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005264 <TIM_TI1_SetConfig+0xc8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_TI1_SetConfig+0x56>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005268 <TIM_TI1_SetConfig+0xcc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d101      	bne.n	80051f6 <TIM_TI1_SetConfig+0x5a>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <TIM_TI1_SetConfig+0x5c>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	e003      	b.n	8005216 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f043 0301 	orr.w	r3, r3, #1
 8005214:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800521c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	011b      	lsls	r3, r3, #4
 8005222:	b2db      	uxtb	r3, r3
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	4313      	orrs	r3, r2
 8005228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f023 030a 	bic.w	r3, r3, #10
 8005230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f003 030a 	and.w	r3, r3, #10
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	621a      	str	r2, [r3, #32]
}
 800524a:	bf00      	nop
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40014000 	.word	0x40014000

0800526c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f023 0210 	bic.w	r2, r3, #16
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	031b      	lsls	r3, r3, #12
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
 80052f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 0303 	bic.w	r3, r3, #3
 8005312:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4313      	orrs	r3, r2
 800531a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005322:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	b2db      	uxtb	r3, r3
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005336:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	621a      	str	r2, [r3, #32]
}
 8005352:	bf00      	nop
 8005354:	371c      	adds	r7, #28
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800535e:	b480      	push	{r7}
 8005360:	b087      	sub	sp, #28
 8005362:	af00      	add	r7, sp, #0
 8005364:	60f8      	str	r0, [r7, #12]
 8005366:	60b9      	str	r1, [r7, #8]
 8005368:	607a      	str	r2, [r7, #4]
 800536a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800538a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	021b      	lsls	r3, r3, #8
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800539c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	031b      	lsls	r3, r3, #12
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80053b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	031b      	lsls	r3, r3, #12
 80053b6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	621a      	str	r2, [r3, #32]
}
 80053cc:	bf00      	nop
 80053ce:	371c      	adds	r7, #28
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d101      	bne.n	80053f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053ec:	2302      	movs	r3, #2
 80053ee:	e050      	b.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1c      	ldr	r2, [pc, #112]	@ (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d018      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800543c:	d013      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a18      	ldr	r2, [pc, #96]	@ (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00e      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a16      	ldr	r2, [pc, #88]	@ (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d009      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a15      	ldr	r2, [pc, #84]	@ (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d004      	beq.n	8005466 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a13      	ldr	r2, [pc, #76]	@ (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10c      	bne.n	8005480 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800546c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4313      	orrs	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	40010000 	.word	0x40010000
 80054a4:	40000400 	.word	0x40000400
 80054a8:	40000800 	.word	0x40000800
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	40014000 	.word	0x40014000

080054b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e042      	b.n	800554c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d106      	bne.n	80054e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fc fd50 	bl	8001f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2224      	movs	r2, #36	@ 0x24
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fdbd 	bl	8006078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691a      	ldr	r2, [r3, #16]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800550c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800551c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68da      	ldr	r2, [r3, #12]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800552c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	@ 0x28
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b20      	cmp	r3, #32
 8005572:	d175      	bne.n	8005660 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_UART_Transmit+0x2c>
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e06e      	b.n	8005662 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2221      	movs	r2, #33	@ 0x21
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005592:	f7fc ff2f 	bl	80023f4 <HAL_GetTick>
 8005596:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	88fa      	ldrh	r2, [r7, #6]
 800559c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ac:	d108      	bne.n	80055c0 <HAL_UART_Transmit+0x6c>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d104      	bne.n	80055c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	61bb      	str	r3, [r7, #24]
 80055be:	e003      	b.n	80055c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055c8:	e02e      	b.n	8005628 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2200      	movs	r2, #0
 80055d2:	2180      	movs	r1, #128	@ 0x80
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fb1f 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d005      	beq.n	80055ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2220      	movs	r2, #32
 80055e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e03a      	b.n	8005662 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10b      	bne.n	800560a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005600:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	3302      	adds	r3, #2
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	e007      	b.n	800561a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	3301      	adds	r3, #1
 8005618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800561e:	b29b      	uxth	r3, r3
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800562c:	b29b      	uxth	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1cb      	bne.n	80055ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	2200      	movs	r2, #0
 800563a:	2140      	movs	r1, #64	@ 0x40
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 faeb 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e006      	b.n	8005662 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	4613      	mov	r3, r2
 8005676:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800567e:	b2db      	uxtb	r3, r3
 8005680:	2b20      	cmp	r3, #32
 8005682:	d112      	bne.n	80056aa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UART_Receive_IT+0x26>
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e00b      	b.n	80056ac <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	461a      	mov	r2, r3
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fb12 	bl	8005cca <UART_Start_Receive_IT>
 80056a6:	4603      	mov	r3, r0
 80056a8:	e000      	b.n	80056ac <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b0ba      	sub	sp, #232	@ 0xe8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056da:	2300      	movs	r3, #0
 80056dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10f      	bne.n	800571a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fe:	f003 0320 	and.w	r3, r3, #32
 8005702:	2b00      	cmp	r3, #0
 8005704:	d009      	beq.n	800571a <HAL_UART_IRQHandler+0x66>
 8005706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800570a:	f003 0320 	and.w	r3, r3, #32
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fbf2 	bl	8005efc <UART_Receive_IT>
      return;
 8005718:	e25b      	b.n	8005bd2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800571a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 80de 	beq.w	80058e0 <HAL_UART_IRQHandler+0x22c>
 8005724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005734:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005738:	2b00      	cmp	r3, #0
 800573a:	f000 80d1 	beq.w	80058e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <HAL_UART_IRQHandler+0xae>
 800574a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800574e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800575a:	f043 0201 	orr.w	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <HAL_UART_IRQHandler+0xd2>
 800576e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577e:	f043 0202 	orr.w	r2, r3, #2
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_UART_IRQHandler+0xf6>
 8005792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a2:	f043 0204 	orr.w	r2, r3, #4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d011      	beq.n	80057da <HAL_UART_IRQHandler+0x126>
 80057b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057ba:	f003 0320 	and.w	r3, r3, #32
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d105      	bne.n	80057ce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d2:	f043 0208 	orr.w	r2, r3, #8
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 81f2 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <HAL_UART_IRQHandler+0x14e>
 80057f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fb7d 	bl	8005efc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b40      	cmp	r3, #64	@ 0x40
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581e:	f003 0308 	and.w	r3, r3, #8
 8005822:	2b00      	cmp	r3, #0
 8005824:	d103      	bne.n	800582e <HAL_UART_IRQHandler+0x17a>
 8005826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800582a:	2b00      	cmp	r3, #0
 800582c:	d04f      	beq.n	80058ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fa85 	bl	8005d3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583e:	2b40      	cmp	r3, #64	@ 0x40
 8005840:	d141      	bne.n	80058c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3314      	adds	r3, #20
 8005848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005858:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800585c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005860:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800586e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800587a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005886:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1d9      	bne.n	8005842 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005892:	2b00      	cmp	r3, #0
 8005894:	d013      	beq.n	80058be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a94 <HAL_UART_IRQHandler+0x3e0>)
 800589c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7fc ff57 	bl	8002756 <HAL_DMA_Abort_IT>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058b8:	4610      	mov	r0, r2
 80058ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058bc:	e00e      	b.n	80058dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f994 	bl	8005bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c4:	e00a      	b.n	80058dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f990 	bl	8005bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	e006      	b.n	80058dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f98c 	bl	8005bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058da:	e175      	b.n	8005bc8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058dc:	bf00      	nop
    return;
 80058de:	e173      	b.n	8005bc8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	f040 814f 	bne.w	8005b88 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ee:	f003 0310 	and.w	r3, r3, #16
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8148 	beq.w	8005b88 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 8141 	beq.w	8005b88 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005906:	2300      	movs	r3, #0
 8005908:	60bb      	str	r3, [r7, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	60bb      	str	r3, [r7, #8]
 800591a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b40      	cmp	r3, #64	@ 0x40
 8005928:	f040 80b6 	bne.w	8005a98 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800593c:	2b00      	cmp	r3, #0
 800593e:	f000 8145 	beq.w	8005bcc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800594a:	429a      	cmp	r2, r3
 800594c:	f080 813e 	bcs.w	8005bcc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005956:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005962:	f000 8088 	beq.w	8005a76 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800597c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005984:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005992:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800599e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1d9      	bne.n	8005966 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3314      	adds	r3, #20
 80059d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e1      	bne.n	80059b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3314      	adds	r3, #20
 80059f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059f8:	e853 3f00 	ldrex	r3, [r3]
 80059fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3314      	adds	r3, #20
 8005a0e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a14:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a18:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e3      	bne.n	80059ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a46:	f023 0310 	bic.w	r3, r3, #16
 8005a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a58:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a5a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a5e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e3      	bne.n	8005a34 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fc fe00 	bl	8002676 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f8b7 	bl	8005c00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a92:	e09b      	b.n	8005bcc <HAL_UART_IRQHandler+0x518>
 8005a94:	08005e05 	.word	0x08005e05
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 808e 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f000 8089 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	330c      	adds	r3, #12
 8005ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ae2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ae4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ae8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aea:	e841 2300 	strex	r3, r2, [r1]
 8005aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1e3      	bne.n	8005abe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3314      	adds	r3, #20
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	e853 3f00 	ldrex	r3, [r3]
 8005b04:	623b      	str	r3, [r7, #32]
   return(result);
 8005b06:	6a3b      	ldr	r3, [r7, #32]
 8005b08:	f023 0301 	bic.w	r3, r3, #1
 8005b0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3314      	adds	r3, #20
 8005b16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b22:	e841 2300 	strex	r3, r2, [r1]
 8005b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1e3      	bne.n	8005af6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	330c      	adds	r3, #12
 8005b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0310 	bic.w	r3, r3, #16
 8005b52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b60:	61fa      	str	r2, [r7, #28]
 8005b62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b64:	69b9      	ldr	r1, [r7, #24]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	e841 2300 	strex	r3, r2, [r1]
 8005b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1e3      	bne.n	8005b3c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 f83d 	bl	8005c00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b86:	e023      	b.n	8005bd0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d009      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x4f4>
 8005b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d003      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f943 	bl	8005e2c <UART_Transmit_IT>
    return;
 8005ba6:	e014      	b.n	8005bd2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x51e>
 8005bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f983 	bl	8005ecc <UART_EndTransmit_IT>
    return;
 8005bc6:	e004      	b.n	8005bd2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005bc8:	bf00      	nop
 8005bca:	e002      	b.n	8005bd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005bcc:	bf00      	nop
 8005bce:	e000      	b.n	8005bd2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005bd0:	bf00      	nop
  }
}
 8005bd2:	37e8      	adds	r7, #232	@ 0xe8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c28:	e03b      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d037      	beq.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7fc fbdf 	bl	80023f4 <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e03a      	b.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d023      	beq.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b80      	cmp	r3, #128	@ 0x80
 8005c5e:	d020      	beq.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b40      	cmp	r3, #64	@ 0x40
 8005c64:	d01d      	beq.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d116      	bne.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f857 	bl	8005d3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2208      	movs	r2, #8
 8005c94:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e00f      	b.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d0b4      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3718      	adds	r7, #24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	88fa      	ldrh	r2, [r7, #6]
 8005ce2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2222      	movs	r2, #34	@ 0x22
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d0e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0220 	orr.w	r2, r2, #32
 8005d2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b095      	sub	sp, #84	@ 0x54
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	330c      	adds	r3, #12
 8005d4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	330c      	adds	r3, #12
 8005d64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d66:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3314      	adds	r3, #20
 8005d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3314      	adds	r3, #20
 8005d98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d119      	bne.n	8005dea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	e853 3f00 	ldrex	r3, [r3]
 8005dc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	f023 0310 	bic.w	r3, r3, #16
 8005dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	330c      	adds	r3, #12
 8005dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd6:	61ba      	str	r2, [r7, #24]
 8005dd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dda:	6979      	ldr	r1, [r7, #20]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	613b      	str	r3, [r7, #16]
   return(result);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1e5      	bne.n	8005db6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005df8:	bf00      	nop
 8005dfa:	3754      	adds	r7, #84	@ 0x54
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f7ff fee4 	bl	8005bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e24:	bf00      	nop
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b085      	sub	sp, #20
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	2b21      	cmp	r3, #33	@ 0x21
 8005e3e:	d13e      	bne.n	8005ebe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e48:	d114      	bne.n	8005e74 <UART_Transmit_IT+0x48>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d110      	bne.n	8005e74 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	1c9a      	adds	r2, r3, #2
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	621a      	str	r2, [r3, #32]
 8005e72:	e008      	b.n	8005e86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	1c59      	adds	r1, r3, #1
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6211      	str	r1, [r2, #32]
 8005e7e:	781a      	ldrb	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4619      	mov	r1, r3
 8005e94:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10f      	bne.n	8005eba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ea8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68da      	ldr	r2, [r3, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e000      	b.n	8005ec0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ebe:	2302      	movs	r3, #2
  }
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ee2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fe73 	bl	8005bd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3708      	adds	r7, #8
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08c      	sub	sp, #48	@ 0x30
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b22      	cmp	r3, #34	@ 0x22
 8005f0e:	f040 80ae 	bne.w	800606e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f1a:	d117      	bne.n	8005f4c <UART_Receive_IT+0x50>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d113      	bne.n	8005f4c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f24:	2300      	movs	r3, #0
 8005f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f44:	1c9a      	adds	r2, r3, #2
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f4a:	e026      	b.n	8005f9a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5e:	d007      	beq.n	8005f70 <UART_Receive_IT+0x74>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10a      	bne.n	8005f7e <UART_Receive_IT+0x82>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d106      	bne.n	8005f7e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	e008      	b.n	8005f90 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d15d      	bne.n	800606a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0220 	bic.w	r2, r2, #32
 8005fbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68da      	ldr	r2, [r3, #12]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	695a      	ldr	r2, [r3, #20]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f022 0201 	bic.w	r2, r2, #1
 8005fdc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d135      	bne.n	8006060 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	613b      	str	r3, [r7, #16]
   return(result);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f023 0310 	bic.w	r3, r3, #16
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	330c      	adds	r3, #12
 8006018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800601a:	623a      	str	r2, [r7, #32]
 800601c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	69f9      	ldr	r1, [r7, #28]
 8006020:	6a3a      	ldr	r2, [r7, #32]
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	61bb      	str	r3, [r7, #24]
   return(result);
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e5      	bne.n	8005ffa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0310 	and.w	r3, r3, #16
 8006038:	2b10      	cmp	r3, #16
 800603a:	d10a      	bne.n	8006052 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60fb      	str	r3, [r7, #12]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff fdd1 	bl	8005c00 <HAL_UARTEx_RxEventCallback>
 800605e:	e002      	b.n	8006066 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7fb fde5 	bl	8001c30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e002      	b.n	8006070 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3730      	adds	r7, #48	@ 0x30
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800607c:	b0c0      	sub	sp, #256	@ 0x100
 800607e:	af00      	add	r7, sp, #0
 8006080:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006094:	68d9      	ldr	r1, [r3, #12]
 8006096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	ea40 0301 	orr.w	r3, r0, r1
 80060a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	431a      	orrs	r2, r3
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	431a      	orrs	r2, r3
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	69db      	ldr	r3, [r3, #28]
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060d0:	f021 010c 	bic.w	r1, r1, #12
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060de:	430b      	orrs	r3, r1
 80060e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f2:	6999      	ldr	r1, [r3, #24]
 80060f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	ea40 0301 	orr.w	r3, r0, r1
 80060fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4b8f      	ldr	r3, [pc, #572]	@ (8006344 <UART_SetConfig+0x2cc>)
 8006108:	429a      	cmp	r2, r3
 800610a:	d005      	beq.n	8006118 <UART_SetConfig+0xa0>
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4b8d      	ldr	r3, [pc, #564]	@ (8006348 <UART_SetConfig+0x2d0>)
 8006114:	429a      	cmp	r2, r3
 8006116:	d104      	bne.n	8006122 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006118:	f7fe face 	bl	80046b8 <HAL_RCC_GetPCLK2Freq>
 800611c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006120:	e003      	b.n	800612a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006122:	f7fe fab5 	bl	8004690 <HAL_RCC_GetPCLK1Freq>
 8006126:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006134:	f040 810c 	bne.w	8006350 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800613c:	2200      	movs	r2, #0
 800613e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006142:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800614a:	4622      	mov	r2, r4
 800614c:	462b      	mov	r3, r5
 800614e:	1891      	adds	r1, r2, r2
 8006150:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006152:	415b      	adcs	r3, r3
 8006154:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800615a:	4621      	mov	r1, r4
 800615c:	eb12 0801 	adds.w	r8, r2, r1
 8006160:	4629      	mov	r1, r5
 8006162:	eb43 0901 	adc.w	r9, r3, r1
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800617a:	4690      	mov	r8, r2
 800617c:	4699      	mov	r9, r3
 800617e:	4623      	mov	r3, r4
 8006180:	eb18 0303 	adds.w	r3, r8, r3
 8006184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006188:	462b      	mov	r3, r5
 800618a:	eb49 0303 	adc.w	r3, r9, r3
 800618e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800619e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80061a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061a6:	460b      	mov	r3, r1
 80061a8:	18db      	adds	r3, r3, r3
 80061aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80061ac:	4613      	mov	r3, r2
 80061ae:	eb42 0303 	adc.w	r3, r2, r3
 80061b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80061b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061bc:	f7fa fd4c 	bl	8000c58 <__aeabi_uldivmod>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4b61      	ldr	r3, [pc, #388]	@ (800634c <UART_SetConfig+0x2d4>)
 80061c6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	011c      	lsls	r4, r3, #4
 80061ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061e0:	4642      	mov	r2, r8
 80061e2:	464b      	mov	r3, r9
 80061e4:	1891      	adds	r1, r2, r2
 80061e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061e8:	415b      	adcs	r3, r3
 80061ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061f0:	4641      	mov	r1, r8
 80061f2:	eb12 0a01 	adds.w	sl, r2, r1
 80061f6:	4649      	mov	r1, r9
 80061f8:	eb43 0b01 	adc.w	fp, r3, r1
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800620c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006210:	4692      	mov	sl, r2
 8006212:	469b      	mov	fp, r3
 8006214:	4643      	mov	r3, r8
 8006216:	eb1a 0303 	adds.w	r3, sl, r3
 800621a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800621e:	464b      	mov	r3, r9
 8006220:	eb4b 0303 	adc.w	r3, fp, r3
 8006224:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006234:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800623c:	460b      	mov	r3, r1
 800623e:	18db      	adds	r3, r3, r3
 8006240:	643b      	str	r3, [r7, #64]	@ 0x40
 8006242:	4613      	mov	r3, r2
 8006244:	eb42 0303 	adc.w	r3, r2, r3
 8006248:	647b      	str	r3, [r7, #68]	@ 0x44
 800624a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800624e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006252:	f7fa fd01 	bl	8000c58 <__aeabi_uldivmod>
 8006256:	4602      	mov	r2, r0
 8006258:	460b      	mov	r3, r1
 800625a:	4611      	mov	r1, r2
 800625c:	4b3b      	ldr	r3, [pc, #236]	@ (800634c <UART_SetConfig+0x2d4>)
 800625e:	fba3 2301 	umull	r2, r3, r3, r1
 8006262:	095b      	lsrs	r3, r3, #5
 8006264:	2264      	movs	r2, #100	@ 0x64
 8006266:	fb02 f303 	mul.w	r3, r2, r3
 800626a:	1acb      	subs	r3, r1, r3
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006272:	4b36      	ldr	r3, [pc, #216]	@ (800634c <UART_SetConfig+0x2d4>)
 8006274:	fba3 2302 	umull	r2, r3, r3, r2
 8006278:	095b      	lsrs	r3, r3, #5
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006280:	441c      	add	r4, r3
 8006282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006286:	2200      	movs	r2, #0
 8006288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800628c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006294:	4642      	mov	r2, r8
 8006296:	464b      	mov	r3, r9
 8006298:	1891      	adds	r1, r2, r2
 800629a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800629c:	415b      	adcs	r3, r3
 800629e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80062a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062a4:	4641      	mov	r1, r8
 80062a6:	1851      	adds	r1, r2, r1
 80062a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80062aa:	4649      	mov	r1, r9
 80062ac:	414b      	adcs	r3, r1
 80062ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062bc:	4659      	mov	r1, fp
 80062be:	00cb      	lsls	r3, r1, #3
 80062c0:	4651      	mov	r1, sl
 80062c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062c6:	4651      	mov	r1, sl
 80062c8:	00ca      	lsls	r2, r1, #3
 80062ca:	4610      	mov	r0, r2
 80062cc:	4619      	mov	r1, r3
 80062ce:	4603      	mov	r3, r0
 80062d0:	4642      	mov	r2, r8
 80062d2:	189b      	adds	r3, r3, r2
 80062d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062d8:	464b      	mov	r3, r9
 80062da:	460a      	mov	r2, r1
 80062dc:	eb42 0303 	adc.w	r3, r2, r3
 80062e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062f8:	460b      	mov	r3, r1
 80062fa:	18db      	adds	r3, r3, r3
 80062fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062fe:	4613      	mov	r3, r2
 8006300:	eb42 0303 	adc.w	r3, r2, r3
 8006304:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800630a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800630e:	f7fa fca3 	bl	8000c58 <__aeabi_uldivmod>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4b0d      	ldr	r3, [pc, #52]	@ (800634c <UART_SetConfig+0x2d4>)
 8006318:	fba3 1302 	umull	r1, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	2164      	movs	r1, #100	@ 0x64
 8006320:	fb01 f303 	mul.w	r3, r1, r3
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	00db      	lsls	r3, r3, #3
 8006328:	3332      	adds	r3, #50	@ 0x32
 800632a:	4a08      	ldr	r2, [pc, #32]	@ (800634c <UART_SetConfig+0x2d4>)
 800632c:	fba2 2303 	umull	r2, r3, r2, r3
 8006330:	095b      	lsrs	r3, r3, #5
 8006332:	f003 0207 	and.w	r2, r3, #7
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4422      	add	r2, r4
 800633e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006340:	e106      	b.n	8006550 <UART_SetConfig+0x4d8>
 8006342:	bf00      	nop
 8006344:	40011000 	.word	0x40011000
 8006348:	40011400 	.word	0x40011400
 800634c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006354:	2200      	movs	r2, #0
 8006356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800635a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800635e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006362:	4642      	mov	r2, r8
 8006364:	464b      	mov	r3, r9
 8006366:	1891      	adds	r1, r2, r2
 8006368:	6239      	str	r1, [r7, #32]
 800636a:	415b      	adcs	r3, r3
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
 800636e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006372:	4641      	mov	r1, r8
 8006374:	1854      	adds	r4, r2, r1
 8006376:	4649      	mov	r1, r9
 8006378:	eb43 0501 	adc.w	r5, r3, r1
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	00eb      	lsls	r3, r5, #3
 8006386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800638a:	00e2      	lsls	r2, r4, #3
 800638c:	4614      	mov	r4, r2
 800638e:	461d      	mov	r5, r3
 8006390:	4643      	mov	r3, r8
 8006392:	18e3      	adds	r3, r4, r3
 8006394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006398:	464b      	mov	r3, r9
 800639a:	eb45 0303 	adc.w	r3, r5, r3
 800639e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80063a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063b2:	f04f 0200 	mov.w	r2, #0
 80063b6:	f04f 0300 	mov.w	r3, #0
 80063ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063be:	4629      	mov	r1, r5
 80063c0:	008b      	lsls	r3, r1, #2
 80063c2:	4621      	mov	r1, r4
 80063c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063c8:	4621      	mov	r1, r4
 80063ca:	008a      	lsls	r2, r1, #2
 80063cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063d0:	f7fa fc42 	bl	8000c58 <__aeabi_uldivmod>
 80063d4:	4602      	mov	r2, r0
 80063d6:	460b      	mov	r3, r1
 80063d8:	4b60      	ldr	r3, [pc, #384]	@ (800655c <UART_SetConfig+0x4e4>)
 80063da:	fba3 2302 	umull	r2, r3, r3, r2
 80063de:	095b      	lsrs	r3, r3, #5
 80063e0:	011c      	lsls	r4, r3, #4
 80063e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e6:	2200      	movs	r2, #0
 80063e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063f4:	4642      	mov	r2, r8
 80063f6:	464b      	mov	r3, r9
 80063f8:	1891      	adds	r1, r2, r2
 80063fa:	61b9      	str	r1, [r7, #24]
 80063fc:	415b      	adcs	r3, r3
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006404:	4641      	mov	r1, r8
 8006406:	1851      	adds	r1, r2, r1
 8006408:	6139      	str	r1, [r7, #16]
 800640a:	4649      	mov	r1, r9
 800640c:	414b      	adcs	r3, r1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	f04f 0200 	mov.w	r2, #0
 8006414:	f04f 0300 	mov.w	r3, #0
 8006418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800641c:	4659      	mov	r1, fp
 800641e:	00cb      	lsls	r3, r1, #3
 8006420:	4651      	mov	r1, sl
 8006422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006426:	4651      	mov	r1, sl
 8006428:	00ca      	lsls	r2, r1, #3
 800642a:	4610      	mov	r0, r2
 800642c:	4619      	mov	r1, r3
 800642e:	4603      	mov	r3, r0
 8006430:	4642      	mov	r2, r8
 8006432:	189b      	adds	r3, r3, r2
 8006434:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006438:	464b      	mov	r3, r9
 800643a:	460a      	mov	r2, r1
 800643c:	eb42 0303 	adc.w	r3, r2, r3
 8006440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800644e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	f04f 0300 	mov.w	r3, #0
 8006458:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800645c:	4649      	mov	r1, r9
 800645e:	008b      	lsls	r3, r1, #2
 8006460:	4641      	mov	r1, r8
 8006462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006466:	4641      	mov	r1, r8
 8006468:	008a      	lsls	r2, r1, #2
 800646a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800646e:	f7fa fbf3 	bl	8000c58 <__aeabi_uldivmod>
 8006472:	4602      	mov	r2, r0
 8006474:	460b      	mov	r3, r1
 8006476:	4611      	mov	r1, r2
 8006478:	4b38      	ldr	r3, [pc, #224]	@ (800655c <UART_SetConfig+0x4e4>)
 800647a:	fba3 2301 	umull	r2, r3, r3, r1
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2264      	movs	r2, #100	@ 0x64
 8006482:	fb02 f303 	mul.w	r3, r2, r3
 8006486:	1acb      	subs	r3, r1, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	3332      	adds	r3, #50	@ 0x32
 800648c:	4a33      	ldr	r2, [pc, #204]	@ (800655c <UART_SetConfig+0x4e4>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006498:	441c      	add	r4, r3
 800649a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800649e:	2200      	movs	r2, #0
 80064a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80064a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80064a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064a8:	4642      	mov	r2, r8
 80064aa:	464b      	mov	r3, r9
 80064ac:	1891      	adds	r1, r2, r2
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	415b      	adcs	r3, r3
 80064b2:	60fb      	str	r3, [r7, #12]
 80064b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064b8:	4641      	mov	r1, r8
 80064ba:	1851      	adds	r1, r2, r1
 80064bc:	6039      	str	r1, [r7, #0]
 80064be:	4649      	mov	r1, r9
 80064c0:	414b      	adcs	r3, r1
 80064c2:	607b      	str	r3, [r7, #4]
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064d0:	4659      	mov	r1, fp
 80064d2:	00cb      	lsls	r3, r1, #3
 80064d4:	4651      	mov	r1, sl
 80064d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064da:	4651      	mov	r1, sl
 80064dc:	00ca      	lsls	r2, r1, #3
 80064de:	4610      	mov	r0, r2
 80064e0:	4619      	mov	r1, r3
 80064e2:	4603      	mov	r3, r0
 80064e4:	4642      	mov	r2, r8
 80064e6:	189b      	adds	r3, r3, r2
 80064e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ea:	464b      	mov	r3, r9
 80064ec:	460a      	mov	r2, r1
 80064ee:	eb42 0303 	adc.w	r3, r2, r3
 80064f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80064fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8006500:	f04f 0200 	mov.w	r2, #0
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800650c:	4649      	mov	r1, r9
 800650e:	008b      	lsls	r3, r1, #2
 8006510:	4641      	mov	r1, r8
 8006512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006516:	4641      	mov	r1, r8
 8006518:	008a      	lsls	r2, r1, #2
 800651a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800651e:	f7fa fb9b 	bl	8000c58 <__aeabi_uldivmod>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4b0d      	ldr	r3, [pc, #52]	@ (800655c <UART_SetConfig+0x4e4>)
 8006528:	fba3 1302 	umull	r1, r3, r3, r2
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	2164      	movs	r1, #100	@ 0x64
 8006530:	fb01 f303 	mul.w	r3, r1, r3
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	011b      	lsls	r3, r3, #4
 8006538:	3332      	adds	r3, #50	@ 0x32
 800653a:	4a08      	ldr	r2, [pc, #32]	@ (800655c <UART_SetConfig+0x4e4>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4422      	add	r2, r4
 800654e:	609a      	str	r2, [r3, #8]
}
 8006550:	bf00      	nop
 8006552:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006556:	46bd      	mov	sp, r7
 8006558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800655c:	51eb851f 	.word	0x51eb851f

08006560 <__cvt>:
 8006560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006564:	ec57 6b10 	vmov	r6, r7, d0
 8006568:	2f00      	cmp	r7, #0
 800656a:	460c      	mov	r4, r1
 800656c:	4619      	mov	r1, r3
 800656e:	463b      	mov	r3, r7
 8006570:	bfbb      	ittet	lt
 8006572:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006576:	461f      	movlt	r7, r3
 8006578:	2300      	movge	r3, #0
 800657a:	232d      	movlt	r3, #45	@ 0x2d
 800657c:	700b      	strb	r3, [r1, #0]
 800657e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006580:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006584:	4691      	mov	r9, r2
 8006586:	f023 0820 	bic.w	r8, r3, #32
 800658a:	bfbc      	itt	lt
 800658c:	4632      	movlt	r2, r6
 800658e:	4616      	movlt	r6, r2
 8006590:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006594:	d005      	beq.n	80065a2 <__cvt+0x42>
 8006596:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800659a:	d100      	bne.n	800659e <__cvt+0x3e>
 800659c:	3401      	adds	r4, #1
 800659e:	2102      	movs	r1, #2
 80065a0:	e000      	b.n	80065a4 <__cvt+0x44>
 80065a2:	2103      	movs	r1, #3
 80065a4:	ab03      	add	r3, sp, #12
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	ab02      	add	r3, sp, #8
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	ec47 6b10 	vmov	d0, r6, r7
 80065b0:	4653      	mov	r3, sl
 80065b2:	4622      	mov	r2, r4
 80065b4:	f000 fe68 	bl	8007288 <_dtoa_r>
 80065b8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80065bc:	4605      	mov	r5, r0
 80065be:	d119      	bne.n	80065f4 <__cvt+0x94>
 80065c0:	f019 0f01 	tst.w	r9, #1
 80065c4:	d00e      	beq.n	80065e4 <__cvt+0x84>
 80065c6:	eb00 0904 	add.w	r9, r0, r4
 80065ca:	2200      	movs	r2, #0
 80065cc:	2300      	movs	r3, #0
 80065ce:	4630      	mov	r0, r6
 80065d0:	4639      	mov	r1, r7
 80065d2:	f7fa fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80065d6:	b108      	cbz	r0, 80065dc <__cvt+0x7c>
 80065d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80065dc:	2230      	movs	r2, #48	@ 0x30
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	454b      	cmp	r3, r9
 80065e2:	d31e      	bcc.n	8006622 <__cvt+0xc2>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065e8:	1b5b      	subs	r3, r3, r5
 80065ea:	4628      	mov	r0, r5
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	b004      	add	sp, #16
 80065f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065f8:	eb00 0904 	add.w	r9, r0, r4
 80065fc:	d1e5      	bne.n	80065ca <__cvt+0x6a>
 80065fe:	7803      	ldrb	r3, [r0, #0]
 8006600:	2b30      	cmp	r3, #48	@ 0x30
 8006602:	d10a      	bne.n	800661a <__cvt+0xba>
 8006604:	2200      	movs	r2, #0
 8006606:	2300      	movs	r3, #0
 8006608:	4630      	mov	r0, r6
 800660a:	4639      	mov	r1, r7
 800660c:	f7fa fa64 	bl	8000ad8 <__aeabi_dcmpeq>
 8006610:	b918      	cbnz	r0, 800661a <__cvt+0xba>
 8006612:	f1c4 0401 	rsb	r4, r4, #1
 8006616:	f8ca 4000 	str.w	r4, [sl]
 800661a:	f8da 3000 	ldr.w	r3, [sl]
 800661e:	4499      	add	r9, r3
 8006620:	e7d3      	b.n	80065ca <__cvt+0x6a>
 8006622:	1c59      	adds	r1, r3, #1
 8006624:	9103      	str	r1, [sp, #12]
 8006626:	701a      	strb	r2, [r3, #0]
 8006628:	e7d9      	b.n	80065de <__cvt+0x7e>

0800662a <__exponent>:
 800662a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800662c:	2900      	cmp	r1, #0
 800662e:	bfba      	itte	lt
 8006630:	4249      	neglt	r1, r1
 8006632:	232d      	movlt	r3, #45	@ 0x2d
 8006634:	232b      	movge	r3, #43	@ 0x2b
 8006636:	2909      	cmp	r1, #9
 8006638:	7002      	strb	r2, [r0, #0]
 800663a:	7043      	strb	r3, [r0, #1]
 800663c:	dd29      	ble.n	8006692 <__exponent+0x68>
 800663e:	f10d 0307 	add.w	r3, sp, #7
 8006642:	461d      	mov	r5, r3
 8006644:	270a      	movs	r7, #10
 8006646:	461a      	mov	r2, r3
 8006648:	fbb1 f6f7 	udiv	r6, r1, r7
 800664c:	fb07 1416 	mls	r4, r7, r6, r1
 8006650:	3430      	adds	r4, #48	@ 0x30
 8006652:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006656:	460c      	mov	r4, r1
 8006658:	2c63      	cmp	r4, #99	@ 0x63
 800665a:	f103 33ff 	add.w	r3, r3, #4294967295
 800665e:	4631      	mov	r1, r6
 8006660:	dcf1      	bgt.n	8006646 <__exponent+0x1c>
 8006662:	3130      	adds	r1, #48	@ 0x30
 8006664:	1e94      	subs	r4, r2, #2
 8006666:	f803 1c01 	strb.w	r1, [r3, #-1]
 800666a:	1c41      	adds	r1, r0, #1
 800666c:	4623      	mov	r3, r4
 800666e:	42ab      	cmp	r3, r5
 8006670:	d30a      	bcc.n	8006688 <__exponent+0x5e>
 8006672:	f10d 0309 	add.w	r3, sp, #9
 8006676:	1a9b      	subs	r3, r3, r2
 8006678:	42ac      	cmp	r4, r5
 800667a:	bf88      	it	hi
 800667c:	2300      	movhi	r3, #0
 800667e:	3302      	adds	r3, #2
 8006680:	4403      	add	r3, r0
 8006682:	1a18      	subs	r0, r3, r0
 8006684:	b003      	add	sp, #12
 8006686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006688:	f813 6b01 	ldrb.w	r6, [r3], #1
 800668c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006690:	e7ed      	b.n	800666e <__exponent+0x44>
 8006692:	2330      	movs	r3, #48	@ 0x30
 8006694:	3130      	adds	r1, #48	@ 0x30
 8006696:	7083      	strb	r3, [r0, #2]
 8006698:	70c1      	strb	r1, [r0, #3]
 800669a:	1d03      	adds	r3, r0, #4
 800669c:	e7f1      	b.n	8006682 <__exponent+0x58>
	...

080066a0 <_printf_float>:
 80066a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a4:	b08d      	sub	sp, #52	@ 0x34
 80066a6:	460c      	mov	r4, r1
 80066a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066ac:	4616      	mov	r6, r2
 80066ae:	461f      	mov	r7, r3
 80066b0:	4605      	mov	r5, r0
 80066b2:	f000 fcdb 	bl	800706c <_localeconv_r>
 80066b6:	6803      	ldr	r3, [r0, #0]
 80066b8:	9304      	str	r3, [sp, #16]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7f9 fde0 	bl	8000280 <strlen>
 80066c0:	2300      	movs	r3, #0
 80066c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80066c4:	f8d8 3000 	ldr.w	r3, [r8]
 80066c8:	9005      	str	r0, [sp, #20]
 80066ca:	3307      	adds	r3, #7
 80066cc:	f023 0307 	bic.w	r3, r3, #7
 80066d0:	f103 0208 	add.w	r2, r3, #8
 80066d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066d8:	f8d4 b000 	ldr.w	fp, [r4]
 80066dc:	f8c8 2000 	str.w	r2, [r8]
 80066e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066e8:	9307      	str	r3, [sp, #28]
 80066ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80066ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066f6:	4b9c      	ldr	r3, [pc, #624]	@ (8006968 <_printf_float+0x2c8>)
 80066f8:	f04f 32ff 	mov.w	r2, #4294967295
 80066fc:	f7fa fa1e 	bl	8000b3c <__aeabi_dcmpun>
 8006700:	bb70      	cbnz	r0, 8006760 <_printf_float+0xc0>
 8006702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006706:	4b98      	ldr	r3, [pc, #608]	@ (8006968 <_printf_float+0x2c8>)
 8006708:	f04f 32ff 	mov.w	r2, #4294967295
 800670c:	f7fa f9f8 	bl	8000b00 <__aeabi_dcmple>
 8006710:	bb30      	cbnz	r0, 8006760 <_printf_float+0xc0>
 8006712:	2200      	movs	r2, #0
 8006714:	2300      	movs	r3, #0
 8006716:	4640      	mov	r0, r8
 8006718:	4649      	mov	r1, r9
 800671a:	f7fa f9e7 	bl	8000aec <__aeabi_dcmplt>
 800671e:	b110      	cbz	r0, 8006726 <_printf_float+0x86>
 8006720:	232d      	movs	r3, #45	@ 0x2d
 8006722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006726:	4a91      	ldr	r2, [pc, #580]	@ (800696c <_printf_float+0x2cc>)
 8006728:	4b91      	ldr	r3, [pc, #580]	@ (8006970 <_printf_float+0x2d0>)
 800672a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800672e:	bf94      	ite	ls
 8006730:	4690      	movls	r8, r2
 8006732:	4698      	movhi	r8, r3
 8006734:	2303      	movs	r3, #3
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	f02b 0304 	bic.w	r3, fp, #4
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	f04f 0900 	mov.w	r9, #0
 8006742:	9700      	str	r7, [sp, #0]
 8006744:	4633      	mov	r3, r6
 8006746:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006748:	4621      	mov	r1, r4
 800674a:	4628      	mov	r0, r5
 800674c:	f000 f9d2 	bl	8006af4 <_printf_common>
 8006750:	3001      	adds	r0, #1
 8006752:	f040 808d 	bne.w	8006870 <_printf_float+0x1d0>
 8006756:	f04f 30ff 	mov.w	r0, #4294967295
 800675a:	b00d      	add	sp, #52	@ 0x34
 800675c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	4640      	mov	r0, r8
 8006766:	4649      	mov	r1, r9
 8006768:	f7fa f9e8 	bl	8000b3c <__aeabi_dcmpun>
 800676c:	b140      	cbz	r0, 8006780 <_printf_float+0xe0>
 800676e:	464b      	mov	r3, r9
 8006770:	2b00      	cmp	r3, #0
 8006772:	bfbc      	itt	lt
 8006774:	232d      	movlt	r3, #45	@ 0x2d
 8006776:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800677a:	4a7e      	ldr	r2, [pc, #504]	@ (8006974 <_printf_float+0x2d4>)
 800677c:	4b7e      	ldr	r3, [pc, #504]	@ (8006978 <_printf_float+0x2d8>)
 800677e:	e7d4      	b.n	800672a <_printf_float+0x8a>
 8006780:	6863      	ldr	r3, [r4, #4]
 8006782:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006786:	9206      	str	r2, [sp, #24]
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	d13b      	bne.n	8006804 <_printf_float+0x164>
 800678c:	2306      	movs	r3, #6
 800678e:	6063      	str	r3, [r4, #4]
 8006790:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006794:	2300      	movs	r3, #0
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	9303      	str	r3, [sp, #12]
 800679a:	ab0a      	add	r3, sp, #40	@ 0x28
 800679c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80067a0:	ab09      	add	r3, sp, #36	@ 0x24
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	6861      	ldr	r1, [r4, #4]
 80067a6:	ec49 8b10 	vmov	d0, r8, r9
 80067aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067ae:	4628      	mov	r0, r5
 80067b0:	f7ff fed6 	bl	8006560 <__cvt>
 80067b4:	9b06      	ldr	r3, [sp, #24]
 80067b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067b8:	2b47      	cmp	r3, #71	@ 0x47
 80067ba:	4680      	mov	r8, r0
 80067bc:	d129      	bne.n	8006812 <_printf_float+0x172>
 80067be:	1cc8      	adds	r0, r1, #3
 80067c0:	db02      	blt.n	80067c8 <_printf_float+0x128>
 80067c2:	6863      	ldr	r3, [r4, #4]
 80067c4:	4299      	cmp	r1, r3
 80067c6:	dd41      	ble.n	800684c <_printf_float+0x1ac>
 80067c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80067cc:	fa5f fa8a 	uxtb.w	sl, sl
 80067d0:	3901      	subs	r1, #1
 80067d2:	4652      	mov	r2, sl
 80067d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80067da:	f7ff ff26 	bl	800662a <__exponent>
 80067de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067e0:	1813      	adds	r3, r2, r0
 80067e2:	2a01      	cmp	r2, #1
 80067e4:	4681      	mov	r9, r0
 80067e6:	6123      	str	r3, [r4, #16]
 80067e8:	dc02      	bgt.n	80067f0 <_printf_float+0x150>
 80067ea:	6822      	ldr	r2, [r4, #0]
 80067ec:	07d2      	lsls	r2, r2, #31
 80067ee:	d501      	bpl.n	80067f4 <_printf_float+0x154>
 80067f0:	3301      	adds	r3, #1
 80067f2:	6123      	str	r3, [r4, #16]
 80067f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d0a2      	beq.n	8006742 <_printf_float+0xa2>
 80067fc:	232d      	movs	r3, #45	@ 0x2d
 80067fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006802:	e79e      	b.n	8006742 <_printf_float+0xa2>
 8006804:	9a06      	ldr	r2, [sp, #24]
 8006806:	2a47      	cmp	r2, #71	@ 0x47
 8006808:	d1c2      	bne.n	8006790 <_printf_float+0xf0>
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1c0      	bne.n	8006790 <_printf_float+0xf0>
 800680e:	2301      	movs	r3, #1
 8006810:	e7bd      	b.n	800678e <_printf_float+0xee>
 8006812:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006816:	d9db      	bls.n	80067d0 <_printf_float+0x130>
 8006818:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800681c:	d118      	bne.n	8006850 <_printf_float+0x1b0>
 800681e:	2900      	cmp	r1, #0
 8006820:	6863      	ldr	r3, [r4, #4]
 8006822:	dd0b      	ble.n	800683c <_printf_float+0x19c>
 8006824:	6121      	str	r1, [r4, #16]
 8006826:	b913      	cbnz	r3, 800682e <_printf_float+0x18e>
 8006828:	6822      	ldr	r2, [r4, #0]
 800682a:	07d0      	lsls	r0, r2, #31
 800682c:	d502      	bpl.n	8006834 <_printf_float+0x194>
 800682e:	3301      	adds	r3, #1
 8006830:	440b      	add	r3, r1
 8006832:	6123      	str	r3, [r4, #16]
 8006834:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006836:	f04f 0900 	mov.w	r9, #0
 800683a:	e7db      	b.n	80067f4 <_printf_float+0x154>
 800683c:	b913      	cbnz	r3, 8006844 <_printf_float+0x1a4>
 800683e:	6822      	ldr	r2, [r4, #0]
 8006840:	07d2      	lsls	r2, r2, #31
 8006842:	d501      	bpl.n	8006848 <_printf_float+0x1a8>
 8006844:	3302      	adds	r3, #2
 8006846:	e7f4      	b.n	8006832 <_printf_float+0x192>
 8006848:	2301      	movs	r3, #1
 800684a:	e7f2      	b.n	8006832 <_printf_float+0x192>
 800684c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006850:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006852:	4299      	cmp	r1, r3
 8006854:	db05      	blt.n	8006862 <_printf_float+0x1c2>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	6121      	str	r1, [r4, #16]
 800685a:	07d8      	lsls	r0, r3, #31
 800685c:	d5ea      	bpl.n	8006834 <_printf_float+0x194>
 800685e:	1c4b      	adds	r3, r1, #1
 8006860:	e7e7      	b.n	8006832 <_printf_float+0x192>
 8006862:	2900      	cmp	r1, #0
 8006864:	bfd4      	ite	le
 8006866:	f1c1 0202 	rsble	r2, r1, #2
 800686a:	2201      	movgt	r2, #1
 800686c:	4413      	add	r3, r2
 800686e:	e7e0      	b.n	8006832 <_printf_float+0x192>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	055a      	lsls	r2, r3, #21
 8006874:	d407      	bmi.n	8006886 <_printf_float+0x1e6>
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	4642      	mov	r2, r8
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	d12b      	bne.n	80068dc <_printf_float+0x23c>
 8006884:	e767      	b.n	8006756 <_printf_float+0xb6>
 8006886:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800688a:	f240 80dd 	bls.w	8006a48 <_printf_float+0x3a8>
 800688e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006892:	2200      	movs	r2, #0
 8006894:	2300      	movs	r3, #0
 8006896:	f7fa f91f 	bl	8000ad8 <__aeabi_dcmpeq>
 800689a:	2800      	cmp	r0, #0
 800689c:	d033      	beq.n	8006906 <_printf_float+0x266>
 800689e:	4a37      	ldr	r2, [pc, #220]	@ (800697c <_printf_float+0x2dc>)
 80068a0:	2301      	movs	r3, #1
 80068a2:	4631      	mov	r1, r6
 80068a4:	4628      	mov	r0, r5
 80068a6:	47b8      	blx	r7
 80068a8:	3001      	adds	r0, #1
 80068aa:	f43f af54 	beq.w	8006756 <_printf_float+0xb6>
 80068ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068b2:	4543      	cmp	r3, r8
 80068b4:	db02      	blt.n	80068bc <_printf_float+0x21c>
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	07d8      	lsls	r0, r3, #31
 80068ba:	d50f      	bpl.n	80068dc <_printf_float+0x23c>
 80068bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068c0:	4631      	mov	r1, r6
 80068c2:	4628      	mov	r0, r5
 80068c4:	47b8      	blx	r7
 80068c6:	3001      	adds	r0, #1
 80068c8:	f43f af45 	beq.w	8006756 <_printf_float+0xb6>
 80068cc:	f04f 0900 	mov.w	r9, #0
 80068d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80068d4:	f104 0a1a 	add.w	sl, r4, #26
 80068d8:	45c8      	cmp	r8, r9
 80068da:	dc09      	bgt.n	80068f0 <_printf_float+0x250>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	079b      	lsls	r3, r3, #30
 80068e0:	f100 8103 	bmi.w	8006aea <_printf_float+0x44a>
 80068e4:	68e0      	ldr	r0, [r4, #12]
 80068e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068e8:	4298      	cmp	r0, r3
 80068ea:	bfb8      	it	lt
 80068ec:	4618      	movlt	r0, r3
 80068ee:	e734      	b.n	800675a <_printf_float+0xba>
 80068f0:	2301      	movs	r3, #1
 80068f2:	4652      	mov	r2, sl
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f af2b 	beq.w	8006756 <_printf_float+0xb6>
 8006900:	f109 0901 	add.w	r9, r9, #1
 8006904:	e7e8      	b.n	80068d8 <_printf_float+0x238>
 8006906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	dc39      	bgt.n	8006980 <_printf_float+0x2e0>
 800690c:	4a1b      	ldr	r2, [pc, #108]	@ (800697c <_printf_float+0x2dc>)
 800690e:	2301      	movs	r3, #1
 8006910:	4631      	mov	r1, r6
 8006912:	4628      	mov	r0, r5
 8006914:	47b8      	blx	r7
 8006916:	3001      	adds	r0, #1
 8006918:	f43f af1d 	beq.w	8006756 <_printf_float+0xb6>
 800691c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006920:	ea59 0303 	orrs.w	r3, r9, r3
 8006924:	d102      	bne.n	800692c <_printf_float+0x28c>
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	07d9      	lsls	r1, r3, #31
 800692a:	d5d7      	bpl.n	80068dc <_printf_float+0x23c>
 800692c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006930:	4631      	mov	r1, r6
 8006932:	4628      	mov	r0, r5
 8006934:	47b8      	blx	r7
 8006936:	3001      	adds	r0, #1
 8006938:	f43f af0d 	beq.w	8006756 <_printf_float+0xb6>
 800693c:	f04f 0a00 	mov.w	sl, #0
 8006940:	f104 0b1a 	add.w	fp, r4, #26
 8006944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006946:	425b      	negs	r3, r3
 8006948:	4553      	cmp	r3, sl
 800694a:	dc01      	bgt.n	8006950 <_printf_float+0x2b0>
 800694c:	464b      	mov	r3, r9
 800694e:	e793      	b.n	8006878 <_printf_float+0x1d8>
 8006950:	2301      	movs	r3, #1
 8006952:	465a      	mov	r2, fp
 8006954:	4631      	mov	r1, r6
 8006956:	4628      	mov	r0, r5
 8006958:	47b8      	blx	r7
 800695a:	3001      	adds	r0, #1
 800695c:	f43f aefb 	beq.w	8006756 <_printf_float+0xb6>
 8006960:	f10a 0a01 	add.w	sl, sl, #1
 8006964:	e7ee      	b.n	8006944 <_printf_float+0x2a4>
 8006966:	bf00      	nop
 8006968:	7fefffff 	.word	0x7fefffff
 800696c:	08009648 	.word	0x08009648
 8006970:	0800964c 	.word	0x0800964c
 8006974:	08009650 	.word	0x08009650
 8006978:	08009654 	.word	0x08009654
 800697c:	08009658 	.word	0x08009658
 8006980:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006982:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006986:	4553      	cmp	r3, sl
 8006988:	bfa8      	it	ge
 800698a:	4653      	movge	r3, sl
 800698c:	2b00      	cmp	r3, #0
 800698e:	4699      	mov	r9, r3
 8006990:	dc36      	bgt.n	8006a00 <_printf_float+0x360>
 8006992:	f04f 0b00 	mov.w	fp, #0
 8006996:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800699a:	f104 021a 	add.w	r2, r4, #26
 800699e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80069a0:	9306      	str	r3, [sp, #24]
 80069a2:	eba3 0309 	sub.w	r3, r3, r9
 80069a6:	455b      	cmp	r3, fp
 80069a8:	dc31      	bgt.n	8006a0e <_printf_float+0x36e>
 80069aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ac:	459a      	cmp	sl, r3
 80069ae:	dc3a      	bgt.n	8006a26 <_printf_float+0x386>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	07da      	lsls	r2, r3, #31
 80069b4:	d437      	bmi.n	8006a26 <_printf_float+0x386>
 80069b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b8:	ebaa 0903 	sub.w	r9, sl, r3
 80069bc:	9b06      	ldr	r3, [sp, #24]
 80069be:	ebaa 0303 	sub.w	r3, sl, r3
 80069c2:	4599      	cmp	r9, r3
 80069c4:	bfa8      	it	ge
 80069c6:	4699      	movge	r9, r3
 80069c8:	f1b9 0f00 	cmp.w	r9, #0
 80069cc:	dc33      	bgt.n	8006a36 <_printf_float+0x396>
 80069ce:	f04f 0800 	mov.w	r8, #0
 80069d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069d6:	f104 0b1a 	add.w	fp, r4, #26
 80069da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069dc:	ebaa 0303 	sub.w	r3, sl, r3
 80069e0:	eba3 0309 	sub.w	r3, r3, r9
 80069e4:	4543      	cmp	r3, r8
 80069e6:	f77f af79 	ble.w	80068dc <_printf_float+0x23c>
 80069ea:	2301      	movs	r3, #1
 80069ec:	465a      	mov	r2, fp
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	f43f aeae 	beq.w	8006756 <_printf_float+0xb6>
 80069fa:	f108 0801 	add.w	r8, r8, #1
 80069fe:	e7ec      	b.n	80069da <_printf_float+0x33a>
 8006a00:	4642      	mov	r2, r8
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d1c2      	bne.n	8006992 <_printf_float+0x2f2>
 8006a0c:	e6a3      	b.n	8006756 <_printf_float+0xb6>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	9206      	str	r2, [sp, #24]
 8006a16:	47b8      	blx	r7
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f43f ae9c 	beq.w	8006756 <_printf_float+0xb6>
 8006a1e:	9a06      	ldr	r2, [sp, #24]
 8006a20:	f10b 0b01 	add.w	fp, fp, #1
 8006a24:	e7bb      	b.n	800699e <_printf_float+0x2fe>
 8006a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	4628      	mov	r0, r5
 8006a2e:	47b8      	blx	r7
 8006a30:	3001      	adds	r0, #1
 8006a32:	d1c0      	bne.n	80069b6 <_printf_float+0x316>
 8006a34:	e68f      	b.n	8006756 <_printf_float+0xb6>
 8006a36:	9a06      	ldr	r2, [sp, #24]
 8006a38:	464b      	mov	r3, r9
 8006a3a:	4442      	add	r2, r8
 8006a3c:	4631      	mov	r1, r6
 8006a3e:	4628      	mov	r0, r5
 8006a40:	47b8      	blx	r7
 8006a42:	3001      	adds	r0, #1
 8006a44:	d1c3      	bne.n	80069ce <_printf_float+0x32e>
 8006a46:	e686      	b.n	8006756 <_printf_float+0xb6>
 8006a48:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a4c:	f1ba 0f01 	cmp.w	sl, #1
 8006a50:	dc01      	bgt.n	8006a56 <_printf_float+0x3b6>
 8006a52:	07db      	lsls	r3, r3, #31
 8006a54:	d536      	bpl.n	8006ac4 <_printf_float+0x424>
 8006a56:	2301      	movs	r3, #1
 8006a58:	4642      	mov	r2, r8
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	f43f ae78 	beq.w	8006756 <_printf_float+0xb6>
 8006a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b8      	blx	r7
 8006a70:	3001      	adds	r0, #1
 8006a72:	f43f ae70 	beq.w	8006756 <_printf_float+0xb6>
 8006a76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a82:	f7fa f829 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a86:	b9c0      	cbnz	r0, 8006aba <_printf_float+0x41a>
 8006a88:	4653      	mov	r3, sl
 8006a8a:	f108 0201 	add.w	r2, r8, #1
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	d10c      	bne.n	8006ab2 <_printf_float+0x412>
 8006a98:	e65d      	b.n	8006756 <_printf_float+0xb6>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	465a      	mov	r2, fp
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f ae56 	beq.w	8006756 <_printf_float+0xb6>
 8006aaa:	f108 0801 	add.w	r8, r8, #1
 8006aae:	45d0      	cmp	r8, sl
 8006ab0:	dbf3      	blt.n	8006a9a <_printf_float+0x3fa>
 8006ab2:	464b      	mov	r3, r9
 8006ab4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ab8:	e6df      	b.n	800687a <_printf_float+0x1da>
 8006aba:	f04f 0800 	mov.w	r8, #0
 8006abe:	f104 0b1a 	add.w	fp, r4, #26
 8006ac2:	e7f4      	b.n	8006aae <_printf_float+0x40e>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	4642      	mov	r2, r8
 8006ac8:	e7e1      	b.n	8006a8e <_printf_float+0x3ee>
 8006aca:	2301      	movs	r3, #1
 8006acc:	464a      	mov	r2, r9
 8006ace:	4631      	mov	r1, r6
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	47b8      	blx	r7
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	f43f ae3e 	beq.w	8006756 <_printf_float+0xb6>
 8006ada:	f108 0801 	add.w	r8, r8, #1
 8006ade:	68e3      	ldr	r3, [r4, #12]
 8006ae0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ae2:	1a5b      	subs	r3, r3, r1
 8006ae4:	4543      	cmp	r3, r8
 8006ae6:	dcf0      	bgt.n	8006aca <_printf_float+0x42a>
 8006ae8:	e6fc      	b.n	80068e4 <_printf_float+0x244>
 8006aea:	f04f 0800 	mov.w	r8, #0
 8006aee:	f104 0919 	add.w	r9, r4, #25
 8006af2:	e7f4      	b.n	8006ade <_printf_float+0x43e>

08006af4 <_printf_common>:
 8006af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af8:	4616      	mov	r6, r2
 8006afa:	4698      	mov	r8, r3
 8006afc:	688a      	ldr	r2, [r1, #8]
 8006afe:	690b      	ldr	r3, [r1, #16]
 8006b00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b04:	4293      	cmp	r3, r2
 8006b06:	bfb8      	it	lt
 8006b08:	4613      	movlt	r3, r2
 8006b0a:	6033      	str	r3, [r6, #0]
 8006b0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b10:	4607      	mov	r7, r0
 8006b12:	460c      	mov	r4, r1
 8006b14:	b10a      	cbz	r2, 8006b1a <_printf_common+0x26>
 8006b16:	3301      	adds	r3, #1
 8006b18:	6033      	str	r3, [r6, #0]
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	0699      	lsls	r1, r3, #26
 8006b1e:	bf42      	ittt	mi
 8006b20:	6833      	ldrmi	r3, [r6, #0]
 8006b22:	3302      	addmi	r3, #2
 8006b24:	6033      	strmi	r3, [r6, #0]
 8006b26:	6825      	ldr	r5, [r4, #0]
 8006b28:	f015 0506 	ands.w	r5, r5, #6
 8006b2c:	d106      	bne.n	8006b3c <_printf_common+0x48>
 8006b2e:	f104 0a19 	add.w	sl, r4, #25
 8006b32:	68e3      	ldr	r3, [r4, #12]
 8006b34:	6832      	ldr	r2, [r6, #0]
 8006b36:	1a9b      	subs	r3, r3, r2
 8006b38:	42ab      	cmp	r3, r5
 8006b3a:	dc26      	bgt.n	8006b8a <_printf_common+0x96>
 8006b3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	3b00      	subs	r3, #0
 8006b44:	bf18      	it	ne
 8006b46:	2301      	movne	r3, #1
 8006b48:	0692      	lsls	r2, r2, #26
 8006b4a:	d42b      	bmi.n	8006ba4 <_printf_common+0xb0>
 8006b4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b50:	4641      	mov	r1, r8
 8006b52:	4638      	mov	r0, r7
 8006b54:	47c8      	blx	r9
 8006b56:	3001      	adds	r0, #1
 8006b58:	d01e      	beq.n	8006b98 <_printf_common+0xa4>
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	f003 0306 	and.w	r3, r3, #6
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	bf02      	ittt	eq
 8006b66:	68e5      	ldreq	r5, [r4, #12]
 8006b68:	6833      	ldreq	r3, [r6, #0]
 8006b6a:	1aed      	subeq	r5, r5, r3
 8006b6c:	68a3      	ldr	r3, [r4, #8]
 8006b6e:	bf0c      	ite	eq
 8006b70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b74:	2500      	movne	r5, #0
 8006b76:	4293      	cmp	r3, r2
 8006b78:	bfc4      	itt	gt
 8006b7a:	1a9b      	subgt	r3, r3, r2
 8006b7c:	18ed      	addgt	r5, r5, r3
 8006b7e:	2600      	movs	r6, #0
 8006b80:	341a      	adds	r4, #26
 8006b82:	42b5      	cmp	r5, r6
 8006b84:	d11a      	bne.n	8006bbc <_printf_common+0xc8>
 8006b86:	2000      	movs	r0, #0
 8006b88:	e008      	b.n	8006b9c <_printf_common+0xa8>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	4652      	mov	r2, sl
 8006b8e:	4641      	mov	r1, r8
 8006b90:	4638      	mov	r0, r7
 8006b92:	47c8      	blx	r9
 8006b94:	3001      	adds	r0, #1
 8006b96:	d103      	bne.n	8006ba0 <_printf_common+0xac>
 8006b98:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	e7c6      	b.n	8006b32 <_printf_common+0x3e>
 8006ba4:	18e1      	adds	r1, r4, r3
 8006ba6:	1c5a      	adds	r2, r3, #1
 8006ba8:	2030      	movs	r0, #48	@ 0x30
 8006baa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bae:	4422      	add	r2, r4
 8006bb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bb4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bb8:	3302      	adds	r3, #2
 8006bba:	e7c7      	b.n	8006b4c <_printf_common+0x58>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	4641      	mov	r1, r8
 8006bc2:	4638      	mov	r0, r7
 8006bc4:	47c8      	blx	r9
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	d0e6      	beq.n	8006b98 <_printf_common+0xa4>
 8006bca:	3601      	adds	r6, #1
 8006bcc:	e7d9      	b.n	8006b82 <_printf_common+0x8e>
	...

08006bd0 <_printf_i>:
 8006bd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd4:	7e0f      	ldrb	r7, [r1, #24]
 8006bd6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bd8:	2f78      	cmp	r7, #120	@ 0x78
 8006bda:	4691      	mov	r9, r2
 8006bdc:	4680      	mov	r8, r0
 8006bde:	460c      	mov	r4, r1
 8006be0:	469a      	mov	sl, r3
 8006be2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006be6:	d807      	bhi.n	8006bf8 <_printf_i+0x28>
 8006be8:	2f62      	cmp	r7, #98	@ 0x62
 8006bea:	d80a      	bhi.n	8006c02 <_printf_i+0x32>
 8006bec:	2f00      	cmp	r7, #0
 8006bee:	f000 80d2 	beq.w	8006d96 <_printf_i+0x1c6>
 8006bf2:	2f58      	cmp	r7, #88	@ 0x58
 8006bf4:	f000 80b9 	beq.w	8006d6a <_printf_i+0x19a>
 8006bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c00:	e03a      	b.n	8006c78 <_printf_i+0xa8>
 8006c02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c06:	2b15      	cmp	r3, #21
 8006c08:	d8f6      	bhi.n	8006bf8 <_printf_i+0x28>
 8006c0a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c10 <_printf_i+0x40>)
 8006c0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c10:	08006c69 	.word	0x08006c69
 8006c14:	08006c7d 	.word	0x08006c7d
 8006c18:	08006bf9 	.word	0x08006bf9
 8006c1c:	08006bf9 	.word	0x08006bf9
 8006c20:	08006bf9 	.word	0x08006bf9
 8006c24:	08006bf9 	.word	0x08006bf9
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006bf9 	.word	0x08006bf9
 8006c30:	08006bf9 	.word	0x08006bf9
 8006c34:	08006bf9 	.word	0x08006bf9
 8006c38:	08006bf9 	.word	0x08006bf9
 8006c3c:	08006d7d 	.word	0x08006d7d
 8006c40:	08006ca7 	.word	0x08006ca7
 8006c44:	08006d37 	.word	0x08006d37
 8006c48:	08006bf9 	.word	0x08006bf9
 8006c4c:	08006bf9 	.word	0x08006bf9
 8006c50:	08006d9f 	.word	0x08006d9f
 8006c54:	08006bf9 	.word	0x08006bf9
 8006c58:	08006ca7 	.word	0x08006ca7
 8006c5c:	08006bf9 	.word	0x08006bf9
 8006c60:	08006bf9 	.word	0x08006bf9
 8006c64:	08006d3f 	.word	0x08006d3f
 8006c68:	6833      	ldr	r3, [r6, #0]
 8006c6a:	1d1a      	adds	r2, r3, #4
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6032      	str	r2, [r6, #0]
 8006c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e09d      	b.n	8006db8 <_printf_i+0x1e8>
 8006c7c:	6833      	ldr	r3, [r6, #0]
 8006c7e:	6820      	ldr	r0, [r4, #0]
 8006c80:	1d19      	adds	r1, r3, #4
 8006c82:	6031      	str	r1, [r6, #0]
 8006c84:	0606      	lsls	r6, r0, #24
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0xbc>
 8006c88:	681d      	ldr	r5, [r3, #0]
 8006c8a:	e003      	b.n	8006c94 <_printf_i+0xc4>
 8006c8c:	0645      	lsls	r5, r0, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0xb8>
 8006c90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	da03      	bge.n	8006ca0 <_printf_i+0xd0>
 8006c98:	232d      	movs	r3, #45	@ 0x2d
 8006c9a:	426d      	negs	r5, r5
 8006c9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ca0:	4859      	ldr	r0, [pc, #356]	@ (8006e08 <_printf_i+0x238>)
 8006ca2:	230a      	movs	r3, #10
 8006ca4:	e011      	b.n	8006cca <_printf_i+0xfa>
 8006ca6:	6821      	ldr	r1, [r4, #0]
 8006ca8:	6833      	ldr	r3, [r6, #0]
 8006caa:	0608      	lsls	r0, r1, #24
 8006cac:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cb0:	d402      	bmi.n	8006cb8 <_printf_i+0xe8>
 8006cb2:	0649      	lsls	r1, r1, #25
 8006cb4:	bf48      	it	mi
 8006cb6:	b2ad      	uxthmi	r5, r5
 8006cb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cba:	4853      	ldr	r0, [pc, #332]	@ (8006e08 <_printf_i+0x238>)
 8006cbc:	6033      	str	r3, [r6, #0]
 8006cbe:	bf14      	ite	ne
 8006cc0:	230a      	movne	r3, #10
 8006cc2:	2308      	moveq	r3, #8
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cca:	6866      	ldr	r6, [r4, #4]
 8006ccc:	60a6      	str	r6, [r4, #8]
 8006cce:	2e00      	cmp	r6, #0
 8006cd0:	bfa2      	ittt	ge
 8006cd2:	6821      	ldrge	r1, [r4, #0]
 8006cd4:	f021 0104 	bicge.w	r1, r1, #4
 8006cd8:	6021      	strge	r1, [r4, #0]
 8006cda:	b90d      	cbnz	r5, 8006ce0 <_printf_i+0x110>
 8006cdc:	2e00      	cmp	r6, #0
 8006cde:	d04b      	beq.n	8006d78 <_printf_i+0x1a8>
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ce6:	fb03 5711 	mls	r7, r3, r1, r5
 8006cea:	5dc7      	ldrb	r7, [r0, r7]
 8006cec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cf0:	462f      	mov	r7, r5
 8006cf2:	42bb      	cmp	r3, r7
 8006cf4:	460d      	mov	r5, r1
 8006cf6:	d9f4      	bls.n	8006ce2 <_printf_i+0x112>
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d10b      	bne.n	8006d14 <_printf_i+0x144>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	07df      	lsls	r7, r3, #31
 8006d00:	d508      	bpl.n	8006d14 <_printf_i+0x144>
 8006d02:	6923      	ldr	r3, [r4, #16]
 8006d04:	6861      	ldr	r1, [r4, #4]
 8006d06:	4299      	cmp	r1, r3
 8006d08:	bfde      	ittt	le
 8006d0a:	2330      	movle	r3, #48	@ 0x30
 8006d0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d14:	1b92      	subs	r2, r2, r6
 8006d16:	6122      	str	r2, [r4, #16]
 8006d18:	f8cd a000 	str.w	sl, [sp]
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	aa03      	add	r2, sp, #12
 8006d20:	4621      	mov	r1, r4
 8006d22:	4640      	mov	r0, r8
 8006d24:	f7ff fee6 	bl	8006af4 <_printf_common>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d14a      	bne.n	8006dc2 <_printf_i+0x1f2>
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	b004      	add	sp, #16
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	f043 0320 	orr.w	r3, r3, #32
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	4833      	ldr	r0, [pc, #204]	@ (8006e0c <_printf_i+0x23c>)
 8006d40:	2778      	movs	r7, #120	@ 0x78
 8006d42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d46:	6823      	ldr	r3, [r4, #0]
 8006d48:	6831      	ldr	r1, [r6, #0]
 8006d4a:	061f      	lsls	r7, r3, #24
 8006d4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d50:	d402      	bmi.n	8006d58 <_printf_i+0x188>
 8006d52:	065f      	lsls	r7, r3, #25
 8006d54:	bf48      	it	mi
 8006d56:	b2ad      	uxthmi	r5, r5
 8006d58:	6031      	str	r1, [r6, #0]
 8006d5a:	07d9      	lsls	r1, r3, #31
 8006d5c:	bf44      	itt	mi
 8006d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d62:	6023      	strmi	r3, [r4, #0]
 8006d64:	b11d      	cbz	r5, 8006d6e <_printf_i+0x19e>
 8006d66:	2310      	movs	r3, #16
 8006d68:	e7ac      	b.n	8006cc4 <_printf_i+0xf4>
 8006d6a:	4827      	ldr	r0, [pc, #156]	@ (8006e08 <_printf_i+0x238>)
 8006d6c:	e7e9      	b.n	8006d42 <_printf_i+0x172>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	f023 0320 	bic.w	r3, r3, #32
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	e7f6      	b.n	8006d66 <_printf_i+0x196>
 8006d78:	4616      	mov	r6, r2
 8006d7a:	e7bd      	b.n	8006cf8 <_printf_i+0x128>
 8006d7c:	6833      	ldr	r3, [r6, #0]
 8006d7e:	6825      	ldr	r5, [r4, #0]
 8006d80:	6961      	ldr	r1, [r4, #20]
 8006d82:	1d18      	adds	r0, r3, #4
 8006d84:	6030      	str	r0, [r6, #0]
 8006d86:	062e      	lsls	r6, r5, #24
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	d501      	bpl.n	8006d90 <_printf_i+0x1c0>
 8006d8c:	6019      	str	r1, [r3, #0]
 8006d8e:	e002      	b.n	8006d96 <_printf_i+0x1c6>
 8006d90:	0668      	lsls	r0, r5, #25
 8006d92:	d5fb      	bpl.n	8006d8c <_printf_i+0x1bc>
 8006d94:	8019      	strh	r1, [r3, #0]
 8006d96:	2300      	movs	r3, #0
 8006d98:	6123      	str	r3, [r4, #16]
 8006d9a:	4616      	mov	r6, r2
 8006d9c:	e7bc      	b.n	8006d18 <_printf_i+0x148>
 8006d9e:	6833      	ldr	r3, [r6, #0]
 8006da0:	1d1a      	adds	r2, r3, #4
 8006da2:	6032      	str	r2, [r6, #0]
 8006da4:	681e      	ldr	r6, [r3, #0]
 8006da6:	6862      	ldr	r2, [r4, #4]
 8006da8:	2100      	movs	r1, #0
 8006daa:	4630      	mov	r0, r6
 8006dac:	f7f9 fa18 	bl	80001e0 <memchr>
 8006db0:	b108      	cbz	r0, 8006db6 <_printf_i+0x1e6>
 8006db2:	1b80      	subs	r0, r0, r6
 8006db4:	6060      	str	r0, [r4, #4]
 8006db6:	6863      	ldr	r3, [r4, #4]
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dc0:	e7aa      	b.n	8006d18 <_printf_i+0x148>
 8006dc2:	6923      	ldr	r3, [r4, #16]
 8006dc4:	4632      	mov	r2, r6
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	4640      	mov	r0, r8
 8006dca:	47d0      	blx	sl
 8006dcc:	3001      	adds	r0, #1
 8006dce:	d0ad      	beq.n	8006d2c <_printf_i+0x15c>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	079b      	lsls	r3, r3, #30
 8006dd4:	d413      	bmi.n	8006dfe <_printf_i+0x22e>
 8006dd6:	68e0      	ldr	r0, [r4, #12]
 8006dd8:	9b03      	ldr	r3, [sp, #12]
 8006dda:	4298      	cmp	r0, r3
 8006ddc:	bfb8      	it	lt
 8006dde:	4618      	movlt	r0, r3
 8006de0:	e7a6      	b.n	8006d30 <_printf_i+0x160>
 8006de2:	2301      	movs	r3, #1
 8006de4:	4632      	mov	r2, r6
 8006de6:	4649      	mov	r1, r9
 8006de8:	4640      	mov	r0, r8
 8006dea:	47d0      	blx	sl
 8006dec:	3001      	adds	r0, #1
 8006dee:	d09d      	beq.n	8006d2c <_printf_i+0x15c>
 8006df0:	3501      	adds	r5, #1
 8006df2:	68e3      	ldr	r3, [r4, #12]
 8006df4:	9903      	ldr	r1, [sp, #12]
 8006df6:	1a5b      	subs	r3, r3, r1
 8006df8:	42ab      	cmp	r3, r5
 8006dfa:	dcf2      	bgt.n	8006de2 <_printf_i+0x212>
 8006dfc:	e7eb      	b.n	8006dd6 <_printf_i+0x206>
 8006dfe:	2500      	movs	r5, #0
 8006e00:	f104 0619 	add.w	r6, r4, #25
 8006e04:	e7f5      	b.n	8006df2 <_printf_i+0x222>
 8006e06:	bf00      	nop
 8006e08:	0800965a 	.word	0x0800965a
 8006e0c:	0800966b 	.word	0x0800966b

08006e10 <std>:
 8006e10:	2300      	movs	r3, #0
 8006e12:	b510      	push	{r4, lr}
 8006e14:	4604      	mov	r4, r0
 8006e16:	e9c0 3300 	strd	r3, r3, [r0]
 8006e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e1e:	6083      	str	r3, [r0, #8]
 8006e20:	8181      	strh	r1, [r0, #12]
 8006e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e24:	81c2      	strh	r2, [r0, #14]
 8006e26:	6183      	str	r3, [r0, #24]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2208      	movs	r2, #8
 8006e2c:	305c      	adds	r0, #92	@ 0x5c
 8006e2e:	f000 f914 	bl	800705a <memset>
 8006e32:	4b0d      	ldr	r3, [pc, #52]	@ (8006e68 <std+0x58>)
 8006e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <std+0x5c>)
 8006e38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <std+0x60>)
 8006e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e74 <std+0x64>)
 8006e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <std+0x68>)
 8006e44:	6224      	str	r4, [r4, #32]
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d006      	beq.n	8006e58 <std+0x48>
 8006e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e4e:	4294      	cmp	r4, r2
 8006e50:	d002      	beq.n	8006e58 <std+0x48>
 8006e52:	33d0      	adds	r3, #208	@ 0xd0
 8006e54:	429c      	cmp	r4, r3
 8006e56:	d105      	bne.n	8006e64 <std+0x54>
 8006e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e60:	f000 b978 	b.w	8007154 <__retarget_lock_init_recursive>
 8006e64:	bd10      	pop	{r4, pc}
 8006e66:	bf00      	nop
 8006e68:	08006fd5 	.word	0x08006fd5
 8006e6c:	08006ff7 	.word	0x08006ff7
 8006e70:	0800702f 	.word	0x0800702f
 8006e74:	08007053 	.word	0x08007053
 8006e78:	20000448 	.word	0x20000448

08006e7c <stdio_exit_handler>:
 8006e7c:	4a02      	ldr	r2, [pc, #8]	@ (8006e88 <stdio_exit_handler+0xc>)
 8006e7e:	4903      	ldr	r1, [pc, #12]	@ (8006e8c <stdio_exit_handler+0x10>)
 8006e80:	4803      	ldr	r0, [pc, #12]	@ (8006e90 <stdio_exit_handler+0x14>)
 8006e82:	f000 b869 	b.w	8006f58 <_fwalk_sglue>
 8006e86:	bf00      	nop
 8006e88:	20000018 	.word	0x20000018
 8006e8c:	08008acd 	.word	0x08008acd
 8006e90:	20000028 	.word	0x20000028

08006e94 <cleanup_stdio>:
 8006e94:	6841      	ldr	r1, [r0, #4]
 8006e96:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec8 <cleanup_stdio+0x34>)
 8006e98:	4299      	cmp	r1, r3
 8006e9a:	b510      	push	{r4, lr}
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	d001      	beq.n	8006ea4 <cleanup_stdio+0x10>
 8006ea0:	f001 fe14 	bl	8008acc <_fflush_r>
 8006ea4:	68a1      	ldr	r1, [r4, #8]
 8006ea6:	4b09      	ldr	r3, [pc, #36]	@ (8006ecc <cleanup_stdio+0x38>)
 8006ea8:	4299      	cmp	r1, r3
 8006eaa:	d002      	beq.n	8006eb2 <cleanup_stdio+0x1e>
 8006eac:	4620      	mov	r0, r4
 8006eae:	f001 fe0d 	bl	8008acc <_fflush_r>
 8006eb2:	68e1      	ldr	r1, [r4, #12]
 8006eb4:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <cleanup_stdio+0x3c>)
 8006eb6:	4299      	cmp	r1, r3
 8006eb8:	d004      	beq.n	8006ec4 <cleanup_stdio+0x30>
 8006eba:	4620      	mov	r0, r4
 8006ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec0:	f001 be04 	b.w	8008acc <_fflush_r>
 8006ec4:	bd10      	pop	{r4, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000448 	.word	0x20000448
 8006ecc:	200004b0 	.word	0x200004b0
 8006ed0:	20000518 	.word	0x20000518

08006ed4 <global_stdio_init.part.0>:
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8006f04 <global_stdio_init.part.0+0x30>)
 8006ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8006f08 <global_stdio_init.part.0+0x34>)
 8006eda:	4a0c      	ldr	r2, [pc, #48]	@ (8006f0c <global_stdio_init.part.0+0x38>)
 8006edc:	601a      	str	r2, [r3, #0]
 8006ede:	4620      	mov	r0, r4
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2104      	movs	r1, #4
 8006ee4:	f7ff ff94 	bl	8006e10 <std>
 8006ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006eec:	2201      	movs	r2, #1
 8006eee:	2109      	movs	r1, #9
 8006ef0:	f7ff ff8e 	bl	8006e10 <std>
 8006ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ef8:	2202      	movs	r2, #2
 8006efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006efe:	2112      	movs	r1, #18
 8006f00:	f7ff bf86 	b.w	8006e10 <std>
 8006f04:	20000580 	.word	0x20000580
 8006f08:	20000448 	.word	0x20000448
 8006f0c:	08006e7d 	.word	0x08006e7d

08006f10 <__sfp_lock_acquire>:
 8006f10:	4801      	ldr	r0, [pc, #4]	@ (8006f18 <__sfp_lock_acquire+0x8>)
 8006f12:	f000 b920 	b.w	8007156 <__retarget_lock_acquire_recursive>
 8006f16:	bf00      	nop
 8006f18:	20000589 	.word	0x20000589

08006f1c <__sfp_lock_release>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	@ (8006f24 <__sfp_lock_release+0x8>)
 8006f1e:	f000 b91b 	b.w	8007158 <__retarget_lock_release_recursive>
 8006f22:	bf00      	nop
 8006f24:	20000589 	.word	0x20000589

08006f28 <__sinit>:
 8006f28:	b510      	push	{r4, lr}
 8006f2a:	4604      	mov	r4, r0
 8006f2c:	f7ff fff0 	bl	8006f10 <__sfp_lock_acquire>
 8006f30:	6a23      	ldr	r3, [r4, #32]
 8006f32:	b11b      	cbz	r3, 8006f3c <__sinit+0x14>
 8006f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f38:	f7ff bff0 	b.w	8006f1c <__sfp_lock_release>
 8006f3c:	4b04      	ldr	r3, [pc, #16]	@ (8006f50 <__sinit+0x28>)
 8006f3e:	6223      	str	r3, [r4, #32]
 8006f40:	4b04      	ldr	r3, [pc, #16]	@ (8006f54 <__sinit+0x2c>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1f5      	bne.n	8006f34 <__sinit+0xc>
 8006f48:	f7ff ffc4 	bl	8006ed4 <global_stdio_init.part.0>
 8006f4c:	e7f2      	b.n	8006f34 <__sinit+0xc>
 8006f4e:	bf00      	nop
 8006f50:	08006e95 	.word	0x08006e95
 8006f54:	20000580 	.word	0x20000580

08006f58 <_fwalk_sglue>:
 8006f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4607      	mov	r7, r0
 8006f5e:	4688      	mov	r8, r1
 8006f60:	4614      	mov	r4, r2
 8006f62:	2600      	movs	r6, #0
 8006f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f68:	f1b9 0901 	subs.w	r9, r9, #1
 8006f6c:	d505      	bpl.n	8006f7a <_fwalk_sglue+0x22>
 8006f6e:	6824      	ldr	r4, [r4, #0]
 8006f70:	2c00      	cmp	r4, #0
 8006f72:	d1f7      	bne.n	8006f64 <_fwalk_sglue+0xc>
 8006f74:	4630      	mov	r0, r6
 8006f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7a:	89ab      	ldrh	r3, [r5, #12]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d907      	bls.n	8006f90 <_fwalk_sglue+0x38>
 8006f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f84:	3301      	adds	r3, #1
 8006f86:	d003      	beq.n	8006f90 <_fwalk_sglue+0x38>
 8006f88:	4629      	mov	r1, r5
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	47c0      	blx	r8
 8006f8e:	4306      	orrs	r6, r0
 8006f90:	3568      	adds	r5, #104	@ 0x68
 8006f92:	e7e9      	b.n	8006f68 <_fwalk_sglue+0x10>

08006f94 <siprintf>:
 8006f94:	b40e      	push	{r1, r2, r3}
 8006f96:	b500      	push	{lr}
 8006f98:	b09c      	sub	sp, #112	@ 0x70
 8006f9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006f9c:	9002      	str	r0, [sp, #8]
 8006f9e:	9006      	str	r0, [sp, #24]
 8006fa0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fa4:	4809      	ldr	r0, [pc, #36]	@ (8006fcc <siprintf+0x38>)
 8006fa6:	9107      	str	r1, [sp, #28]
 8006fa8:	9104      	str	r1, [sp, #16]
 8006faa:	4909      	ldr	r1, [pc, #36]	@ (8006fd0 <siprintf+0x3c>)
 8006fac:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb0:	9105      	str	r1, [sp, #20]
 8006fb2:	6800      	ldr	r0, [r0, #0]
 8006fb4:	9301      	str	r3, [sp, #4]
 8006fb6:	a902      	add	r1, sp, #8
 8006fb8:	f001 fc08 	bl	80087cc <_svfiprintf_r>
 8006fbc:	9b02      	ldr	r3, [sp, #8]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	b01c      	add	sp, #112	@ 0x70
 8006fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fc8:	b003      	add	sp, #12
 8006fca:	4770      	bx	lr
 8006fcc:	20000024 	.word	0x20000024
 8006fd0:	ffff0208 	.word	0xffff0208

08006fd4 <__sread>:
 8006fd4:	b510      	push	{r4, lr}
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fdc:	f000 f86c 	bl	80070b8 <_read_r>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	bfab      	itete	ge
 8006fe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8006fe8:	181b      	addge	r3, r3, r0
 8006fea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fee:	bfac      	ite	ge
 8006ff0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ff2:	81a3      	strhlt	r3, [r4, #12]
 8006ff4:	bd10      	pop	{r4, pc}

08006ff6 <__swrite>:
 8006ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffa:	461f      	mov	r7, r3
 8006ffc:	898b      	ldrh	r3, [r1, #12]
 8006ffe:	05db      	lsls	r3, r3, #23
 8007000:	4605      	mov	r5, r0
 8007002:	460c      	mov	r4, r1
 8007004:	4616      	mov	r6, r2
 8007006:	d505      	bpl.n	8007014 <__swrite+0x1e>
 8007008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700c:	2302      	movs	r3, #2
 800700e:	2200      	movs	r2, #0
 8007010:	f000 f840 	bl	8007094 <_lseek_r>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800701a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	4632      	mov	r2, r6
 8007022:	463b      	mov	r3, r7
 8007024:	4628      	mov	r0, r5
 8007026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800702a:	f000 b857 	b.w	80070dc <_write_r>

0800702e <__sseek>:
 800702e:	b510      	push	{r4, lr}
 8007030:	460c      	mov	r4, r1
 8007032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007036:	f000 f82d 	bl	8007094 <_lseek_r>
 800703a:	1c43      	adds	r3, r0, #1
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	bf15      	itete	ne
 8007040:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007042:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007046:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800704a:	81a3      	strheq	r3, [r4, #12]
 800704c:	bf18      	it	ne
 800704e:	81a3      	strhne	r3, [r4, #12]
 8007050:	bd10      	pop	{r4, pc}

08007052 <__sclose>:
 8007052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007056:	f000 b80d 	b.w	8007074 <_close_r>

0800705a <memset>:
 800705a:	4402      	add	r2, r0
 800705c:	4603      	mov	r3, r0
 800705e:	4293      	cmp	r3, r2
 8007060:	d100      	bne.n	8007064 <memset+0xa>
 8007062:	4770      	bx	lr
 8007064:	f803 1b01 	strb.w	r1, [r3], #1
 8007068:	e7f9      	b.n	800705e <memset+0x4>
	...

0800706c <_localeconv_r>:
 800706c:	4800      	ldr	r0, [pc, #0]	@ (8007070 <_localeconv_r+0x4>)
 800706e:	4770      	bx	lr
 8007070:	20000164 	.word	0x20000164

08007074 <_close_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d06      	ldr	r5, [pc, #24]	@ (8007090 <_close_r+0x1c>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fb f8ac 	bl	80021dc <_close>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_close_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_close_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000584 	.word	0x20000584

08007094 <_lseek_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d07      	ldr	r5, [pc, #28]	@ (80070b4 <_lseek_r+0x20>)
 8007098:	4604      	mov	r4, r0
 800709a:	4608      	mov	r0, r1
 800709c:	4611      	mov	r1, r2
 800709e:	2200      	movs	r2, #0
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fb f8c1 	bl	800222a <_lseek>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_lseek_r+0x1e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_lseek_r+0x1e>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20000584 	.word	0x20000584

080070b8 <_read_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d07      	ldr	r5, [pc, #28]	@ (80070d8 <_read_r+0x20>)
 80070bc:	4604      	mov	r4, r0
 80070be:	4608      	mov	r0, r1
 80070c0:	4611      	mov	r1, r2
 80070c2:	2200      	movs	r2, #0
 80070c4:	602a      	str	r2, [r5, #0]
 80070c6:	461a      	mov	r2, r3
 80070c8:	f7fb f84f 	bl	800216a <_read>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	d102      	bne.n	80070d6 <_read_r+0x1e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	b103      	cbz	r3, 80070d6 <_read_r+0x1e>
 80070d4:	6023      	str	r3, [r4, #0]
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
 80070d8:	20000584 	.word	0x20000584

080070dc <_write_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	@ (80070fc <_write_r+0x20>)
 80070e0:	4604      	mov	r4, r0
 80070e2:	4608      	mov	r0, r1
 80070e4:	4611      	mov	r1, r2
 80070e6:	2200      	movs	r2, #0
 80070e8:	602a      	str	r2, [r5, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f7fb f85a 	bl	80021a4 <_write>
 80070f0:	1c43      	adds	r3, r0, #1
 80070f2:	d102      	bne.n	80070fa <_write_r+0x1e>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b103      	cbz	r3, 80070fa <_write_r+0x1e>
 80070f8:	6023      	str	r3, [r4, #0]
 80070fa:	bd38      	pop	{r3, r4, r5, pc}
 80070fc:	20000584 	.word	0x20000584

08007100 <__errno>:
 8007100:	4b01      	ldr	r3, [pc, #4]	@ (8007108 <__errno+0x8>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20000024 	.word	0x20000024

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4d0d      	ldr	r5, [pc, #52]	@ (8007144 <__libc_init_array+0x38>)
 8007110:	4c0d      	ldr	r4, [pc, #52]	@ (8007148 <__libc_init_array+0x3c>)
 8007112:	1b64      	subs	r4, r4, r5
 8007114:	10a4      	asrs	r4, r4, #2
 8007116:	2600      	movs	r6, #0
 8007118:	42a6      	cmp	r6, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	4d0b      	ldr	r5, [pc, #44]	@ (800714c <__libc_init_array+0x40>)
 800711e:	4c0c      	ldr	r4, [pc, #48]	@ (8007150 <__libc_init_array+0x44>)
 8007120:	f002 f9e2 	bl	80094e8 <_init>
 8007124:	1b64      	subs	r4, r4, r5
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	2600      	movs	r6, #0
 800712a:	42a6      	cmp	r6, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f855 3b04 	ldr.w	r3, [r5], #4
 8007134:	4798      	blx	r3
 8007136:	3601      	adds	r6, #1
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f855 3b04 	ldr.w	r3, [r5], #4
 800713e:	4798      	blx	r3
 8007140:	3601      	adds	r6, #1
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	080099f8 	.word	0x080099f8
 8007148:	080099f8 	.word	0x080099f8
 800714c:	080099f8 	.word	0x080099f8
 8007150:	080099fc 	.word	0x080099fc

08007154 <__retarget_lock_init_recursive>:
 8007154:	4770      	bx	lr

08007156 <__retarget_lock_acquire_recursive>:
 8007156:	4770      	bx	lr

08007158 <__retarget_lock_release_recursive>:
 8007158:	4770      	bx	lr

0800715a <memcpy>:
 800715a:	440a      	add	r2, r1
 800715c:	4291      	cmp	r1, r2
 800715e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007162:	d100      	bne.n	8007166 <memcpy+0xc>
 8007164:	4770      	bx	lr
 8007166:	b510      	push	{r4, lr}
 8007168:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007170:	4291      	cmp	r1, r2
 8007172:	d1f9      	bne.n	8007168 <memcpy+0xe>
 8007174:	bd10      	pop	{r4, pc}

08007176 <quorem>:
 8007176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	6903      	ldr	r3, [r0, #16]
 800717c:	690c      	ldr	r4, [r1, #16]
 800717e:	42a3      	cmp	r3, r4
 8007180:	4607      	mov	r7, r0
 8007182:	db7e      	blt.n	8007282 <quorem+0x10c>
 8007184:	3c01      	subs	r4, #1
 8007186:	f101 0814 	add.w	r8, r1, #20
 800718a:	00a3      	lsls	r3, r4, #2
 800718c:	f100 0514 	add.w	r5, r0, #20
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800719c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071a0:	3301      	adds	r3, #1
 80071a2:	429a      	cmp	r2, r3
 80071a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80071ac:	d32e      	bcc.n	800720c <quorem+0x96>
 80071ae:	f04f 0a00 	mov.w	sl, #0
 80071b2:	46c4      	mov	ip, r8
 80071b4:	46ae      	mov	lr, r5
 80071b6:	46d3      	mov	fp, sl
 80071b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071bc:	b298      	uxth	r0, r3
 80071be:	fb06 a000 	mla	r0, r6, r0, sl
 80071c2:	0c02      	lsrs	r2, r0, #16
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	fb06 2303 	mla	r3, r6, r3, r2
 80071ca:	f8de 2000 	ldr.w	r2, [lr]
 80071ce:	b280      	uxth	r0, r0
 80071d0:	b292      	uxth	r2, r2
 80071d2:	1a12      	subs	r2, r2, r0
 80071d4:	445a      	add	r2, fp
 80071d6:	f8de 0000 	ldr.w	r0, [lr]
 80071da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071de:	b29b      	uxth	r3, r3
 80071e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80071e8:	b292      	uxth	r2, r2
 80071ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80071ee:	45e1      	cmp	r9, ip
 80071f0:	f84e 2b04 	str.w	r2, [lr], #4
 80071f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80071f8:	d2de      	bcs.n	80071b8 <quorem+0x42>
 80071fa:	9b00      	ldr	r3, [sp, #0]
 80071fc:	58eb      	ldr	r3, [r5, r3]
 80071fe:	b92b      	cbnz	r3, 800720c <quorem+0x96>
 8007200:	9b01      	ldr	r3, [sp, #4]
 8007202:	3b04      	subs	r3, #4
 8007204:	429d      	cmp	r5, r3
 8007206:	461a      	mov	r2, r3
 8007208:	d32f      	bcc.n	800726a <quorem+0xf4>
 800720a:	613c      	str	r4, [r7, #16]
 800720c:	4638      	mov	r0, r7
 800720e:	f001 f979 	bl	8008504 <__mcmp>
 8007212:	2800      	cmp	r0, #0
 8007214:	db25      	blt.n	8007262 <quorem+0xec>
 8007216:	4629      	mov	r1, r5
 8007218:	2000      	movs	r0, #0
 800721a:	f858 2b04 	ldr.w	r2, [r8], #4
 800721e:	f8d1 c000 	ldr.w	ip, [r1]
 8007222:	fa1f fe82 	uxth.w	lr, r2
 8007226:	fa1f f38c 	uxth.w	r3, ip
 800722a:	eba3 030e 	sub.w	r3, r3, lr
 800722e:	4403      	add	r3, r0
 8007230:	0c12      	lsrs	r2, r2, #16
 8007232:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007236:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007240:	45c1      	cmp	r9, r8
 8007242:	f841 3b04 	str.w	r3, [r1], #4
 8007246:	ea4f 4022 	mov.w	r0, r2, asr #16
 800724a:	d2e6      	bcs.n	800721a <quorem+0xa4>
 800724c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007250:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007254:	b922      	cbnz	r2, 8007260 <quorem+0xea>
 8007256:	3b04      	subs	r3, #4
 8007258:	429d      	cmp	r5, r3
 800725a:	461a      	mov	r2, r3
 800725c:	d30b      	bcc.n	8007276 <quorem+0x100>
 800725e:	613c      	str	r4, [r7, #16]
 8007260:	3601      	adds	r6, #1
 8007262:	4630      	mov	r0, r6
 8007264:	b003      	add	sp, #12
 8007266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	3b04      	subs	r3, #4
 800726e:	2a00      	cmp	r2, #0
 8007270:	d1cb      	bne.n	800720a <quorem+0x94>
 8007272:	3c01      	subs	r4, #1
 8007274:	e7c6      	b.n	8007204 <quorem+0x8e>
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	3b04      	subs	r3, #4
 800727a:	2a00      	cmp	r2, #0
 800727c:	d1ef      	bne.n	800725e <quorem+0xe8>
 800727e:	3c01      	subs	r4, #1
 8007280:	e7ea      	b.n	8007258 <quorem+0xe2>
 8007282:	2000      	movs	r0, #0
 8007284:	e7ee      	b.n	8007264 <quorem+0xee>
	...

08007288 <_dtoa_r>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	69c7      	ldr	r7, [r0, #28]
 800728e:	b099      	sub	sp, #100	@ 0x64
 8007290:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007294:	ec55 4b10 	vmov	r4, r5, d0
 8007298:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800729a:	9109      	str	r1, [sp, #36]	@ 0x24
 800729c:	4683      	mov	fp, r0
 800729e:	920e      	str	r2, [sp, #56]	@ 0x38
 80072a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072a2:	b97f      	cbnz	r7, 80072c4 <_dtoa_r+0x3c>
 80072a4:	2010      	movs	r0, #16
 80072a6:	f000 fdfd 	bl	8007ea4 <malloc>
 80072aa:	4602      	mov	r2, r0
 80072ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80072b0:	b920      	cbnz	r0, 80072bc <_dtoa_r+0x34>
 80072b2:	4ba7      	ldr	r3, [pc, #668]	@ (8007550 <_dtoa_r+0x2c8>)
 80072b4:	21ef      	movs	r1, #239	@ 0xef
 80072b6:	48a7      	ldr	r0, [pc, #668]	@ (8007554 <_dtoa_r+0x2cc>)
 80072b8:	f001 fc5a 	bl	8008b70 <__assert_func>
 80072bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80072c0:	6007      	str	r7, [r0, #0]
 80072c2:	60c7      	str	r7, [r0, #12]
 80072c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072c8:	6819      	ldr	r1, [r3, #0]
 80072ca:	b159      	cbz	r1, 80072e4 <_dtoa_r+0x5c>
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	604a      	str	r2, [r1, #4]
 80072d0:	2301      	movs	r3, #1
 80072d2:	4093      	lsls	r3, r2
 80072d4:	608b      	str	r3, [r1, #8]
 80072d6:	4658      	mov	r0, fp
 80072d8:	f000 feda 	bl	8008090 <_Bfree>
 80072dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	1e2b      	subs	r3, r5, #0
 80072e6:	bfb9      	ittee	lt
 80072e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072ec:	9303      	strlt	r3, [sp, #12]
 80072ee:	2300      	movge	r3, #0
 80072f0:	6033      	strge	r3, [r6, #0]
 80072f2:	9f03      	ldr	r7, [sp, #12]
 80072f4:	4b98      	ldr	r3, [pc, #608]	@ (8007558 <_dtoa_r+0x2d0>)
 80072f6:	bfbc      	itt	lt
 80072f8:	2201      	movlt	r2, #1
 80072fa:	6032      	strlt	r2, [r6, #0]
 80072fc:	43bb      	bics	r3, r7
 80072fe:	d112      	bne.n	8007326 <_dtoa_r+0x9e>
 8007300:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007302:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007306:	6013      	str	r3, [r2, #0]
 8007308:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800730c:	4323      	orrs	r3, r4
 800730e:	f000 854d 	beq.w	8007dac <_dtoa_r+0xb24>
 8007312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007314:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800756c <_dtoa_r+0x2e4>
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 854f 	beq.w	8007dbc <_dtoa_r+0xb34>
 800731e:	f10a 0303 	add.w	r3, sl, #3
 8007322:	f000 bd49 	b.w	8007db8 <_dtoa_r+0xb30>
 8007326:	ed9d 7b02 	vldr	d7, [sp, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	ec51 0b17 	vmov	r0, r1, d7
 8007330:	2300      	movs	r3, #0
 8007332:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007336:	f7f9 fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800733a:	4680      	mov	r8, r0
 800733c:	b158      	cbz	r0, 8007356 <_dtoa_r+0xce>
 800733e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007340:	2301      	movs	r3, #1
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007346:	b113      	cbz	r3, 800734e <_dtoa_r+0xc6>
 8007348:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800734a:	4b84      	ldr	r3, [pc, #528]	@ (800755c <_dtoa_r+0x2d4>)
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007570 <_dtoa_r+0x2e8>
 8007352:	f000 bd33 	b.w	8007dbc <_dtoa_r+0xb34>
 8007356:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800735a:	aa16      	add	r2, sp, #88	@ 0x58
 800735c:	a917      	add	r1, sp, #92	@ 0x5c
 800735e:	4658      	mov	r0, fp
 8007360:	f001 f980 	bl	8008664 <__d2b>
 8007364:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007368:	4681      	mov	r9, r0
 800736a:	2e00      	cmp	r6, #0
 800736c:	d077      	beq.n	800745e <_dtoa_r+0x1d6>
 800736e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007370:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800737c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007380:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007384:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007388:	4619      	mov	r1, r3
 800738a:	2200      	movs	r2, #0
 800738c:	4b74      	ldr	r3, [pc, #464]	@ (8007560 <_dtoa_r+0x2d8>)
 800738e:	f7f8 ff83 	bl	8000298 <__aeabi_dsub>
 8007392:	a369      	add	r3, pc, #420	@ (adr r3, 8007538 <_dtoa_r+0x2b0>)
 8007394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007398:	f7f9 f936 	bl	8000608 <__aeabi_dmul>
 800739c:	a368      	add	r3, pc, #416	@ (adr r3, 8007540 <_dtoa_r+0x2b8>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f8 ff7b 	bl	800029c <__adddf3>
 80073a6:	4604      	mov	r4, r0
 80073a8:	4630      	mov	r0, r6
 80073aa:	460d      	mov	r5, r1
 80073ac:	f7f9 f8c2 	bl	8000534 <__aeabi_i2d>
 80073b0:	a365      	add	r3, pc, #404	@ (adr r3, 8007548 <_dtoa_r+0x2c0>)
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	f7f9 f927 	bl	8000608 <__aeabi_dmul>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4620      	mov	r0, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f8 ff6b 	bl	800029c <__adddf3>
 80073c6:	4604      	mov	r4, r0
 80073c8:	460d      	mov	r5, r1
 80073ca:	f7f9 fbcd 	bl	8000b68 <__aeabi_d2iz>
 80073ce:	2200      	movs	r2, #0
 80073d0:	4607      	mov	r7, r0
 80073d2:	2300      	movs	r3, #0
 80073d4:	4620      	mov	r0, r4
 80073d6:	4629      	mov	r1, r5
 80073d8:	f7f9 fb88 	bl	8000aec <__aeabi_dcmplt>
 80073dc:	b140      	cbz	r0, 80073f0 <_dtoa_r+0x168>
 80073de:	4638      	mov	r0, r7
 80073e0:	f7f9 f8a8 	bl	8000534 <__aeabi_i2d>
 80073e4:	4622      	mov	r2, r4
 80073e6:	462b      	mov	r3, r5
 80073e8:	f7f9 fb76 	bl	8000ad8 <__aeabi_dcmpeq>
 80073ec:	b900      	cbnz	r0, 80073f0 <_dtoa_r+0x168>
 80073ee:	3f01      	subs	r7, #1
 80073f0:	2f16      	cmp	r7, #22
 80073f2:	d851      	bhi.n	8007498 <_dtoa_r+0x210>
 80073f4:	4b5b      	ldr	r3, [pc, #364]	@ (8007564 <_dtoa_r+0x2dc>)
 80073f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007402:	f7f9 fb73 	bl	8000aec <__aeabi_dcmplt>
 8007406:	2800      	cmp	r0, #0
 8007408:	d048      	beq.n	800749c <_dtoa_r+0x214>
 800740a:	3f01      	subs	r7, #1
 800740c:	2300      	movs	r3, #0
 800740e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007410:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007412:	1b9b      	subs	r3, r3, r6
 8007414:	1e5a      	subs	r2, r3, #1
 8007416:	bf44      	itt	mi
 8007418:	f1c3 0801 	rsbmi	r8, r3, #1
 800741c:	2300      	movmi	r3, #0
 800741e:	9208      	str	r2, [sp, #32]
 8007420:	bf54      	ite	pl
 8007422:	f04f 0800 	movpl.w	r8, #0
 8007426:	9308      	strmi	r3, [sp, #32]
 8007428:	2f00      	cmp	r7, #0
 800742a:	db39      	blt.n	80074a0 <_dtoa_r+0x218>
 800742c:	9b08      	ldr	r3, [sp, #32]
 800742e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007430:	443b      	add	r3, r7
 8007432:	9308      	str	r3, [sp, #32]
 8007434:	2300      	movs	r3, #0
 8007436:	930a      	str	r3, [sp, #40]	@ 0x28
 8007438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743a:	2b09      	cmp	r3, #9
 800743c:	d864      	bhi.n	8007508 <_dtoa_r+0x280>
 800743e:	2b05      	cmp	r3, #5
 8007440:	bfc4      	itt	gt
 8007442:	3b04      	subgt	r3, #4
 8007444:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007448:	f1a3 0302 	sub.w	r3, r3, #2
 800744c:	bfcc      	ite	gt
 800744e:	2400      	movgt	r4, #0
 8007450:	2401      	movle	r4, #1
 8007452:	2b03      	cmp	r3, #3
 8007454:	d863      	bhi.n	800751e <_dtoa_r+0x296>
 8007456:	e8df f003 	tbb	[pc, r3]
 800745a:	372a      	.short	0x372a
 800745c:	5535      	.short	0x5535
 800745e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007462:	441e      	add	r6, r3
 8007464:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007468:	2b20      	cmp	r3, #32
 800746a:	bfc1      	itttt	gt
 800746c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007470:	409f      	lslgt	r7, r3
 8007472:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007476:	fa24 f303 	lsrgt.w	r3, r4, r3
 800747a:	bfd6      	itet	le
 800747c:	f1c3 0320 	rsble	r3, r3, #32
 8007480:	ea47 0003 	orrgt.w	r0, r7, r3
 8007484:	fa04 f003 	lslle.w	r0, r4, r3
 8007488:	f7f9 f844 	bl	8000514 <__aeabi_ui2d>
 800748c:	2201      	movs	r2, #1
 800748e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007492:	3e01      	subs	r6, #1
 8007494:	9214      	str	r2, [sp, #80]	@ 0x50
 8007496:	e777      	b.n	8007388 <_dtoa_r+0x100>
 8007498:	2301      	movs	r3, #1
 800749a:	e7b8      	b.n	800740e <_dtoa_r+0x186>
 800749c:	9012      	str	r0, [sp, #72]	@ 0x48
 800749e:	e7b7      	b.n	8007410 <_dtoa_r+0x188>
 80074a0:	427b      	negs	r3, r7
 80074a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a4:	2300      	movs	r3, #0
 80074a6:	eba8 0807 	sub.w	r8, r8, r7
 80074aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074ac:	e7c4      	b.n	8007438 <_dtoa_r+0x1b0>
 80074ae:	2300      	movs	r3, #0
 80074b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dc35      	bgt.n	8007524 <_dtoa_r+0x29c>
 80074b8:	2301      	movs	r3, #1
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	9307      	str	r3, [sp, #28]
 80074be:	461a      	mov	r2, r3
 80074c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80074c2:	e00b      	b.n	80074dc <_dtoa_r+0x254>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e7f3      	b.n	80074b0 <_dtoa_r+0x228>
 80074c8:	2300      	movs	r3, #0
 80074ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074ce:	18fb      	adds	r3, r7, r3
 80074d0:	9300      	str	r3, [sp, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	bfb8      	it	lt
 80074da:	2301      	movlt	r3, #1
 80074dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80074e0:	2100      	movs	r1, #0
 80074e2:	2204      	movs	r2, #4
 80074e4:	f102 0514 	add.w	r5, r2, #20
 80074e8:	429d      	cmp	r5, r3
 80074ea:	d91f      	bls.n	800752c <_dtoa_r+0x2a4>
 80074ec:	6041      	str	r1, [r0, #4]
 80074ee:	4658      	mov	r0, fp
 80074f0:	f000 fd8e 	bl	8008010 <_Balloc>
 80074f4:	4682      	mov	sl, r0
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d13c      	bne.n	8007574 <_dtoa_r+0x2ec>
 80074fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007568 <_dtoa_r+0x2e0>)
 80074fc:	4602      	mov	r2, r0
 80074fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007502:	e6d8      	b.n	80072b6 <_dtoa_r+0x2e>
 8007504:	2301      	movs	r3, #1
 8007506:	e7e0      	b.n	80074ca <_dtoa_r+0x242>
 8007508:	2401      	movs	r4, #1
 800750a:	2300      	movs	r3, #0
 800750c:	9309      	str	r3, [sp, #36]	@ 0x24
 800750e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007510:	f04f 33ff 	mov.w	r3, #4294967295
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	9307      	str	r3, [sp, #28]
 8007518:	2200      	movs	r2, #0
 800751a:	2312      	movs	r3, #18
 800751c:	e7d0      	b.n	80074c0 <_dtoa_r+0x238>
 800751e:	2301      	movs	r3, #1
 8007520:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007522:	e7f5      	b.n	8007510 <_dtoa_r+0x288>
 8007524:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	9307      	str	r3, [sp, #28]
 800752a:	e7d7      	b.n	80074dc <_dtoa_r+0x254>
 800752c:	3101      	adds	r1, #1
 800752e:	0052      	lsls	r2, r2, #1
 8007530:	e7d8      	b.n	80074e4 <_dtoa_r+0x25c>
 8007532:	bf00      	nop
 8007534:	f3af 8000 	nop.w
 8007538:	636f4361 	.word	0x636f4361
 800753c:	3fd287a7 	.word	0x3fd287a7
 8007540:	8b60c8b3 	.word	0x8b60c8b3
 8007544:	3fc68a28 	.word	0x3fc68a28
 8007548:	509f79fb 	.word	0x509f79fb
 800754c:	3fd34413 	.word	0x3fd34413
 8007550:	08009689 	.word	0x08009689
 8007554:	080096a0 	.word	0x080096a0
 8007558:	7ff00000 	.word	0x7ff00000
 800755c:	08009659 	.word	0x08009659
 8007560:	3ff80000 	.word	0x3ff80000
 8007564:	08009798 	.word	0x08009798
 8007568:	080096f8 	.word	0x080096f8
 800756c:	08009685 	.word	0x08009685
 8007570:	08009658 	.word	0x08009658
 8007574:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007578:	6018      	str	r0, [r3, #0]
 800757a:	9b07      	ldr	r3, [sp, #28]
 800757c:	2b0e      	cmp	r3, #14
 800757e:	f200 80a4 	bhi.w	80076ca <_dtoa_r+0x442>
 8007582:	2c00      	cmp	r4, #0
 8007584:	f000 80a1 	beq.w	80076ca <_dtoa_r+0x442>
 8007588:	2f00      	cmp	r7, #0
 800758a:	dd33      	ble.n	80075f4 <_dtoa_r+0x36c>
 800758c:	4bad      	ldr	r3, [pc, #692]	@ (8007844 <_dtoa_r+0x5bc>)
 800758e:	f007 020f 	and.w	r2, r7, #15
 8007592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007596:	ed93 7b00 	vldr	d7, [r3]
 800759a:	05f8      	lsls	r0, r7, #23
 800759c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80075a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075a4:	d516      	bpl.n	80075d4 <_dtoa_r+0x34c>
 80075a6:	4ba8      	ldr	r3, [pc, #672]	@ (8007848 <_dtoa_r+0x5c0>)
 80075a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075b0:	f7f9 f954 	bl	800085c <__aeabi_ddiv>
 80075b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075b8:	f004 040f 	and.w	r4, r4, #15
 80075bc:	2603      	movs	r6, #3
 80075be:	4da2      	ldr	r5, [pc, #648]	@ (8007848 <_dtoa_r+0x5c0>)
 80075c0:	b954      	cbnz	r4, 80075d8 <_dtoa_r+0x350>
 80075c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ca:	f7f9 f947 	bl	800085c <__aeabi_ddiv>
 80075ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075d2:	e028      	b.n	8007626 <_dtoa_r+0x39e>
 80075d4:	2602      	movs	r6, #2
 80075d6:	e7f2      	b.n	80075be <_dtoa_r+0x336>
 80075d8:	07e1      	lsls	r1, r4, #31
 80075da:	d508      	bpl.n	80075ee <_dtoa_r+0x366>
 80075dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075e4:	f7f9 f810 	bl	8000608 <__aeabi_dmul>
 80075e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075ec:	3601      	adds	r6, #1
 80075ee:	1064      	asrs	r4, r4, #1
 80075f0:	3508      	adds	r5, #8
 80075f2:	e7e5      	b.n	80075c0 <_dtoa_r+0x338>
 80075f4:	f000 80d2 	beq.w	800779c <_dtoa_r+0x514>
 80075f8:	427c      	negs	r4, r7
 80075fa:	4b92      	ldr	r3, [pc, #584]	@ (8007844 <_dtoa_r+0x5bc>)
 80075fc:	4d92      	ldr	r5, [pc, #584]	@ (8007848 <_dtoa_r+0x5c0>)
 80075fe:	f004 020f 	and.w	r2, r4, #15
 8007602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800760e:	f7f8 fffb 	bl	8000608 <__aeabi_dmul>
 8007612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007616:	1124      	asrs	r4, r4, #4
 8007618:	2300      	movs	r3, #0
 800761a:	2602      	movs	r6, #2
 800761c:	2c00      	cmp	r4, #0
 800761e:	f040 80b2 	bne.w	8007786 <_dtoa_r+0x4fe>
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1d3      	bne.n	80075ce <_dtoa_r+0x346>
 8007626:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007628:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f000 80b7 	beq.w	80077a0 <_dtoa_r+0x518>
 8007632:	4b86      	ldr	r3, [pc, #536]	@ (800784c <_dtoa_r+0x5c4>)
 8007634:	2200      	movs	r2, #0
 8007636:	4620      	mov	r0, r4
 8007638:	4629      	mov	r1, r5
 800763a:	f7f9 fa57 	bl	8000aec <__aeabi_dcmplt>
 800763e:	2800      	cmp	r0, #0
 8007640:	f000 80ae 	beq.w	80077a0 <_dtoa_r+0x518>
 8007644:	9b07      	ldr	r3, [sp, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80aa 	beq.w	80077a0 <_dtoa_r+0x518>
 800764c:	9b00      	ldr	r3, [sp, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	dd37      	ble.n	80076c2 <_dtoa_r+0x43a>
 8007652:	1e7b      	subs	r3, r7, #1
 8007654:	9304      	str	r3, [sp, #16]
 8007656:	4620      	mov	r0, r4
 8007658:	4b7d      	ldr	r3, [pc, #500]	@ (8007850 <_dtoa_r+0x5c8>)
 800765a:	2200      	movs	r2, #0
 800765c:	4629      	mov	r1, r5
 800765e:	f7f8 ffd3 	bl	8000608 <__aeabi_dmul>
 8007662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007666:	9c00      	ldr	r4, [sp, #0]
 8007668:	3601      	adds	r6, #1
 800766a:	4630      	mov	r0, r6
 800766c:	f7f8 ff62 	bl	8000534 <__aeabi_i2d>
 8007670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007674:	f7f8 ffc8 	bl	8000608 <__aeabi_dmul>
 8007678:	4b76      	ldr	r3, [pc, #472]	@ (8007854 <_dtoa_r+0x5cc>)
 800767a:	2200      	movs	r2, #0
 800767c:	f7f8 fe0e 	bl	800029c <__adddf3>
 8007680:	4605      	mov	r5, r0
 8007682:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007686:	2c00      	cmp	r4, #0
 8007688:	f040 808d 	bne.w	80077a6 <_dtoa_r+0x51e>
 800768c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007690:	4b71      	ldr	r3, [pc, #452]	@ (8007858 <_dtoa_r+0x5d0>)
 8007692:	2200      	movs	r2, #0
 8007694:	f7f8 fe00 	bl	8000298 <__aeabi_dsub>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80076a0:	462a      	mov	r2, r5
 80076a2:	4633      	mov	r3, r6
 80076a4:	f7f9 fa40 	bl	8000b28 <__aeabi_dcmpgt>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f040 828b 	bne.w	8007bc4 <_dtoa_r+0x93c>
 80076ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076b2:	462a      	mov	r2, r5
 80076b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076b8:	f7f9 fa18 	bl	8000aec <__aeabi_dcmplt>
 80076bc:	2800      	cmp	r0, #0
 80076be:	f040 8128 	bne.w	8007912 <_dtoa_r+0x68a>
 80076c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80076c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80076ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f2c0 815a 	blt.w	8007986 <_dtoa_r+0x6fe>
 80076d2:	2f0e      	cmp	r7, #14
 80076d4:	f300 8157 	bgt.w	8007986 <_dtoa_r+0x6fe>
 80076d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007844 <_dtoa_r+0x5bc>)
 80076da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076de:	ed93 7b00 	vldr	d7, [r3]
 80076e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	ed8d 7b00 	vstr	d7, [sp]
 80076ea:	da03      	bge.n	80076f4 <_dtoa_r+0x46c>
 80076ec:	9b07      	ldr	r3, [sp, #28]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f340 8101 	ble.w	80078f6 <_dtoa_r+0x66e>
 80076f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80076f8:	4656      	mov	r6, sl
 80076fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076fe:	4620      	mov	r0, r4
 8007700:	4629      	mov	r1, r5
 8007702:	f7f9 f8ab 	bl	800085c <__aeabi_ddiv>
 8007706:	f7f9 fa2f 	bl	8000b68 <__aeabi_d2iz>
 800770a:	4680      	mov	r8, r0
 800770c:	f7f8 ff12 	bl	8000534 <__aeabi_i2d>
 8007710:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007714:	f7f8 ff78 	bl	8000608 <__aeabi_dmul>
 8007718:	4602      	mov	r2, r0
 800771a:	460b      	mov	r3, r1
 800771c:	4620      	mov	r0, r4
 800771e:	4629      	mov	r1, r5
 8007720:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007724:	f7f8 fdb8 	bl	8000298 <__aeabi_dsub>
 8007728:	f806 4b01 	strb.w	r4, [r6], #1
 800772c:	9d07      	ldr	r5, [sp, #28]
 800772e:	eba6 040a 	sub.w	r4, r6, sl
 8007732:	42a5      	cmp	r5, r4
 8007734:	4602      	mov	r2, r0
 8007736:	460b      	mov	r3, r1
 8007738:	f040 8117 	bne.w	800796a <_dtoa_r+0x6e2>
 800773c:	f7f8 fdae 	bl	800029c <__adddf3>
 8007740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007744:	4604      	mov	r4, r0
 8007746:	460d      	mov	r5, r1
 8007748:	f7f9 f9ee 	bl	8000b28 <__aeabi_dcmpgt>
 800774c:	2800      	cmp	r0, #0
 800774e:	f040 80f9 	bne.w	8007944 <_dtoa_r+0x6bc>
 8007752:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	f7f9 f9bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800775e:	b118      	cbz	r0, 8007768 <_dtoa_r+0x4e0>
 8007760:	f018 0f01 	tst.w	r8, #1
 8007764:	f040 80ee 	bne.w	8007944 <_dtoa_r+0x6bc>
 8007768:	4649      	mov	r1, r9
 800776a:	4658      	mov	r0, fp
 800776c:	f000 fc90 	bl	8008090 <_Bfree>
 8007770:	2300      	movs	r3, #0
 8007772:	7033      	strb	r3, [r6, #0]
 8007774:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007776:	3701      	adds	r7, #1
 8007778:	601f      	str	r7, [r3, #0]
 800777a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 831d 	beq.w	8007dbc <_dtoa_r+0xb34>
 8007782:	601e      	str	r6, [r3, #0]
 8007784:	e31a      	b.n	8007dbc <_dtoa_r+0xb34>
 8007786:	07e2      	lsls	r2, r4, #31
 8007788:	d505      	bpl.n	8007796 <_dtoa_r+0x50e>
 800778a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800778e:	f7f8 ff3b 	bl	8000608 <__aeabi_dmul>
 8007792:	3601      	adds	r6, #1
 8007794:	2301      	movs	r3, #1
 8007796:	1064      	asrs	r4, r4, #1
 8007798:	3508      	adds	r5, #8
 800779a:	e73f      	b.n	800761c <_dtoa_r+0x394>
 800779c:	2602      	movs	r6, #2
 800779e:	e742      	b.n	8007626 <_dtoa_r+0x39e>
 80077a0:	9c07      	ldr	r4, [sp, #28]
 80077a2:	9704      	str	r7, [sp, #16]
 80077a4:	e761      	b.n	800766a <_dtoa_r+0x3e2>
 80077a6:	4b27      	ldr	r3, [pc, #156]	@ (8007844 <_dtoa_r+0x5bc>)
 80077a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80077aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077b2:	4454      	add	r4, sl
 80077b4:	2900      	cmp	r1, #0
 80077b6:	d053      	beq.n	8007860 <_dtoa_r+0x5d8>
 80077b8:	4928      	ldr	r1, [pc, #160]	@ (800785c <_dtoa_r+0x5d4>)
 80077ba:	2000      	movs	r0, #0
 80077bc:	f7f9 f84e 	bl	800085c <__aeabi_ddiv>
 80077c0:	4633      	mov	r3, r6
 80077c2:	462a      	mov	r2, r5
 80077c4:	f7f8 fd68 	bl	8000298 <__aeabi_dsub>
 80077c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80077cc:	4656      	mov	r6, sl
 80077ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d2:	f7f9 f9c9 	bl	8000b68 <__aeabi_d2iz>
 80077d6:	4605      	mov	r5, r0
 80077d8:	f7f8 feac 	bl	8000534 <__aeabi_i2d>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e4:	f7f8 fd58 	bl	8000298 <__aeabi_dsub>
 80077e8:	3530      	adds	r5, #48	@ 0x30
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077f2:	f806 5b01 	strb.w	r5, [r6], #1
 80077f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077fa:	f7f9 f977 	bl	8000aec <__aeabi_dcmplt>
 80077fe:	2800      	cmp	r0, #0
 8007800:	d171      	bne.n	80078e6 <_dtoa_r+0x65e>
 8007802:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007806:	4911      	ldr	r1, [pc, #68]	@ (800784c <_dtoa_r+0x5c4>)
 8007808:	2000      	movs	r0, #0
 800780a:	f7f8 fd45 	bl	8000298 <__aeabi_dsub>
 800780e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007812:	f7f9 f96b 	bl	8000aec <__aeabi_dcmplt>
 8007816:	2800      	cmp	r0, #0
 8007818:	f040 8095 	bne.w	8007946 <_dtoa_r+0x6be>
 800781c:	42a6      	cmp	r6, r4
 800781e:	f43f af50 	beq.w	80076c2 <_dtoa_r+0x43a>
 8007822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007826:	4b0a      	ldr	r3, [pc, #40]	@ (8007850 <_dtoa_r+0x5c8>)
 8007828:	2200      	movs	r2, #0
 800782a:	f7f8 feed 	bl	8000608 <__aeabi_dmul>
 800782e:	4b08      	ldr	r3, [pc, #32]	@ (8007850 <_dtoa_r+0x5c8>)
 8007830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007834:	2200      	movs	r2, #0
 8007836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800783a:	f7f8 fee5 	bl	8000608 <__aeabi_dmul>
 800783e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007842:	e7c4      	b.n	80077ce <_dtoa_r+0x546>
 8007844:	08009798 	.word	0x08009798
 8007848:	08009770 	.word	0x08009770
 800784c:	3ff00000 	.word	0x3ff00000
 8007850:	40240000 	.word	0x40240000
 8007854:	401c0000 	.word	0x401c0000
 8007858:	40140000 	.word	0x40140000
 800785c:	3fe00000 	.word	0x3fe00000
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	f7f8 fed0 	bl	8000608 <__aeabi_dmul>
 8007868:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800786c:	9415      	str	r4, [sp, #84]	@ 0x54
 800786e:	4656      	mov	r6, sl
 8007870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007874:	f7f9 f978 	bl	8000b68 <__aeabi_d2iz>
 8007878:	4605      	mov	r5, r0
 800787a:	f7f8 fe5b 	bl	8000534 <__aeabi_i2d>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007886:	f7f8 fd07 	bl	8000298 <__aeabi_dsub>
 800788a:	3530      	adds	r5, #48	@ 0x30
 800788c:	f806 5b01 	strb.w	r5, [r6], #1
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	42a6      	cmp	r6, r4
 8007896:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800789a:	f04f 0200 	mov.w	r2, #0
 800789e:	d124      	bne.n	80078ea <_dtoa_r+0x662>
 80078a0:	4bac      	ldr	r3, [pc, #688]	@ (8007b54 <_dtoa_r+0x8cc>)
 80078a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80078a6:	f7f8 fcf9 	bl	800029c <__adddf3>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078b2:	f7f9 f939 	bl	8000b28 <__aeabi_dcmpgt>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	d145      	bne.n	8007946 <_dtoa_r+0x6be>
 80078ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80078be:	49a5      	ldr	r1, [pc, #660]	@ (8007b54 <_dtoa_r+0x8cc>)
 80078c0:	2000      	movs	r0, #0
 80078c2:	f7f8 fce9 	bl	8000298 <__aeabi_dsub>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ce:	f7f9 f90d 	bl	8000aec <__aeabi_dcmplt>
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f43f aef5 	beq.w	80076c2 <_dtoa_r+0x43a>
 80078d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80078da:	1e73      	subs	r3, r6, #1
 80078dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80078de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078e2:	2b30      	cmp	r3, #48	@ 0x30
 80078e4:	d0f8      	beq.n	80078d8 <_dtoa_r+0x650>
 80078e6:	9f04      	ldr	r7, [sp, #16]
 80078e8:	e73e      	b.n	8007768 <_dtoa_r+0x4e0>
 80078ea:	4b9b      	ldr	r3, [pc, #620]	@ (8007b58 <_dtoa_r+0x8d0>)
 80078ec:	f7f8 fe8c 	bl	8000608 <__aeabi_dmul>
 80078f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f4:	e7bc      	b.n	8007870 <_dtoa_r+0x5e8>
 80078f6:	d10c      	bne.n	8007912 <_dtoa_r+0x68a>
 80078f8:	4b98      	ldr	r3, [pc, #608]	@ (8007b5c <_dtoa_r+0x8d4>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007900:	f7f8 fe82 	bl	8000608 <__aeabi_dmul>
 8007904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007908:	f7f9 f904 	bl	8000b14 <__aeabi_dcmpge>
 800790c:	2800      	cmp	r0, #0
 800790e:	f000 8157 	beq.w	8007bc0 <_dtoa_r+0x938>
 8007912:	2400      	movs	r4, #0
 8007914:	4625      	mov	r5, r4
 8007916:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007918:	43db      	mvns	r3, r3
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	4656      	mov	r6, sl
 800791e:	2700      	movs	r7, #0
 8007920:	4621      	mov	r1, r4
 8007922:	4658      	mov	r0, fp
 8007924:	f000 fbb4 	bl	8008090 <_Bfree>
 8007928:	2d00      	cmp	r5, #0
 800792a:	d0dc      	beq.n	80078e6 <_dtoa_r+0x65e>
 800792c:	b12f      	cbz	r7, 800793a <_dtoa_r+0x6b2>
 800792e:	42af      	cmp	r7, r5
 8007930:	d003      	beq.n	800793a <_dtoa_r+0x6b2>
 8007932:	4639      	mov	r1, r7
 8007934:	4658      	mov	r0, fp
 8007936:	f000 fbab 	bl	8008090 <_Bfree>
 800793a:	4629      	mov	r1, r5
 800793c:	4658      	mov	r0, fp
 800793e:	f000 fba7 	bl	8008090 <_Bfree>
 8007942:	e7d0      	b.n	80078e6 <_dtoa_r+0x65e>
 8007944:	9704      	str	r7, [sp, #16]
 8007946:	4633      	mov	r3, r6
 8007948:	461e      	mov	r6, r3
 800794a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800794e:	2a39      	cmp	r2, #57	@ 0x39
 8007950:	d107      	bne.n	8007962 <_dtoa_r+0x6da>
 8007952:	459a      	cmp	sl, r3
 8007954:	d1f8      	bne.n	8007948 <_dtoa_r+0x6c0>
 8007956:	9a04      	ldr	r2, [sp, #16]
 8007958:	3201      	adds	r2, #1
 800795a:	9204      	str	r2, [sp, #16]
 800795c:	2230      	movs	r2, #48	@ 0x30
 800795e:	f88a 2000 	strb.w	r2, [sl]
 8007962:	781a      	ldrb	r2, [r3, #0]
 8007964:	3201      	adds	r2, #1
 8007966:	701a      	strb	r2, [r3, #0]
 8007968:	e7bd      	b.n	80078e6 <_dtoa_r+0x65e>
 800796a:	4b7b      	ldr	r3, [pc, #492]	@ (8007b58 <_dtoa_r+0x8d0>)
 800796c:	2200      	movs	r2, #0
 800796e:	f7f8 fe4b 	bl	8000608 <__aeabi_dmul>
 8007972:	2200      	movs	r2, #0
 8007974:	2300      	movs	r3, #0
 8007976:	4604      	mov	r4, r0
 8007978:	460d      	mov	r5, r1
 800797a:	f7f9 f8ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800797e:	2800      	cmp	r0, #0
 8007980:	f43f aebb 	beq.w	80076fa <_dtoa_r+0x472>
 8007984:	e6f0      	b.n	8007768 <_dtoa_r+0x4e0>
 8007986:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007988:	2a00      	cmp	r2, #0
 800798a:	f000 80db 	beq.w	8007b44 <_dtoa_r+0x8bc>
 800798e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007990:	2a01      	cmp	r2, #1
 8007992:	f300 80bf 	bgt.w	8007b14 <_dtoa_r+0x88c>
 8007996:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007998:	2a00      	cmp	r2, #0
 800799a:	f000 80b7 	beq.w	8007b0c <_dtoa_r+0x884>
 800799e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80079a4:	4646      	mov	r6, r8
 80079a6:	9a08      	ldr	r2, [sp, #32]
 80079a8:	2101      	movs	r1, #1
 80079aa:	441a      	add	r2, r3
 80079ac:	4658      	mov	r0, fp
 80079ae:	4498      	add	r8, r3
 80079b0:	9208      	str	r2, [sp, #32]
 80079b2:	f000 fc21 	bl	80081f8 <__i2b>
 80079b6:	4605      	mov	r5, r0
 80079b8:	b15e      	cbz	r6, 80079d2 <_dtoa_r+0x74a>
 80079ba:	9b08      	ldr	r3, [sp, #32]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dd08      	ble.n	80079d2 <_dtoa_r+0x74a>
 80079c0:	42b3      	cmp	r3, r6
 80079c2:	9a08      	ldr	r2, [sp, #32]
 80079c4:	bfa8      	it	ge
 80079c6:	4633      	movge	r3, r6
 80079c8:	eba8 0803 	sub.w	r8, r8, r3
 80079cc:	1af6      	subs	r6, r6, r3
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	9308      	str	r3, [sp, #32]
 80079d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079d4:	b1f3      	cbz	r3, 8007a14 <_dtoa_r+0x78c>
 80079d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80b7 	beq.w	8007b4c <_dtoa_r+0x8c4>
 80079de:	b18c      	cbz	r4, 8007a04 <_dtoa_r+0x77c>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4622      	mov	r2, r4
 80079e4:	4658      	mov	r0, fp
 80079e6:	f000 fcc7 	bl	8008378 <__pow5mult>
 80079ea:	464a      	mov	r2, r9
 80079ec:	4601      	mov	r1, r0
 80079ee:	4605      	mov	r5, r0
 80079f0:	4658      	mov	r0, fp
 80079f2:	f000 fc17 	bl	8008224 <__multiply>
 80079f6:	4649      	mov	r1, r9
 80079f8:	9004      	str	r0, [sp, #16]
 80079fa:	4658      	mov	r0, fp
 80079fc:	f000 fb48 	bl	8008090 <_Bfree>
 8007a00:	9b04      	ldr	r3, [sp, #16]
 8007a02:	4699      	mov	r9, r3
 8007a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a06:	1b1a      	subs	r2, r3, r4
 8007a08:	d004      	beq.n	8007a14 <_dtoa_r+0x78c>
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	4658      	mov	r0, fp
 8007a0e:	f000 fcb3 	bl	8008378 <__pow5mult>
 8007a12:	4681      	mov	r9, r0
 8007a14:	2101      	movs	r1, #1
 8007a16:	4658      	mov	r0, fp
 8007a18:	f000 fbee 	bl	80081f8 <__i2b>
 8007a1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a1e:	4604      	mov	r4, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 81cf 	beq.w	8007dc4 <_dtoa_r+0xb3c>
 8007a26:	461a      	mov	r2, r3
 8007a28:	4601      	mov	r1, r0
 8007a2a:	4658      	mov	r0, fp
 8007a2c:	f000 fca4 	bl	8008378 <__pow5mult>
 8007a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	4604      	mov	r4, r0
 8007a36:	f300 8095 	bgt.w	8007b64 <_dtoa_r+0x8dc>
 8007a3a:	9b02      	ldr	r3, [sp, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f040 8087 	bne.w	8007b50 <_dtoa_r+0x8c8>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f040 8089 	bne.w	8007b60 <_dtoa_r+0x8d8>
 8007a4e:	9b03      	ldr	r3, [sp, #12]
 8007a50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a54:	0d1b      	lsrs	r3, r3, #20
 8007a56:	051b      	lsls	r3, r3, #20
 8007a58:	b12b      	cbz	r3, 8007a66 <_dtoa_r+0x7de>
 8007a5a:	9b08      	ldr	r3, [sp, #32]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	9308      	str	r3, [sp, #32]
 8007a60:	f108 0801 	add.w	r8, r8, #1
 8007a64:	2301      	movs	r3, #1
 8007a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 81b0 	beq.w	8007dd0 <_dtoa_r+0xb48>
 8007a70:	6923      	ldr	r3, [r4, #16]
 8007a72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a76:	6918      	ldr	r0, [r3, #16]
 8007a78:	f000 fb72 	bl	8008160 <__hi0bits>
 8007a7c:	f1c0 0020 	rsb	r0, r0, #32
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	4418      	add	r0, r3
 8007a84:	f010 001f 	ands.w	r0, r0, #31
 8007a88:	d077      	beq.n	8007b7a <_dtoa_r+0x8f2>
 8007a8a:	f1c0 0320 	rsb	r3, r0, #32
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	dd6b      	ble.n	8007b6a <_dtoa_r+0x8e2>
 8007a92:	9b08      	ldr	r3, [sp, #32]
 8007a94:	f1c0 001c 	rsb	r0, r0, #28
 8007a98:	4403      	add	r3, r0
 8007a9a:	4480      	add	r8, r0
 8007a9c:	4406      	add	r6, r0
 8007a9e:	9308      	str	r3, [sp, #32]
 8007aa0:	f1b8 0f00 	cmp.w	r8, #0
 8007aa4:	dd05      	ble.n	8007ab2 <_dtoa_r+0x82a>
 8007aa6:	4649      	mov	r1, r9
 8007aa8:	4642      	mov	r2, r8
 8007aaa:	4658      	mov	r0, fp
 8007aac:	f000 fcbe 	bl	800842c <__lshift>
 8007ab0:	4681      	mov	r9, r0
 8007ab2:	9b08      	ldr	r3, [sp, #32]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	dd05      	ble.n	8007ac4 <_dtoa_r+0x83c>
 8007ab8:	4621      	mov	r1, r4
 8007aba:	461a      	mov	r2, r3
 8007abc:	4658      	mov	r0, fp
 8007abe:	f000 fcb5 	bl	800842c <__lshift>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d059      	beq.n	8007b7e <_dtoa_r+0x8f6>
 8007aca:	4621      	mov	r1, r4
 8007acc:	4648      	mov	r0, r9
 8007ace:	f000 fd19 	bl	8008504 <__mcmp>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	da53      	bge.n	8007b7e <_dtoa_r+0x8f6>
 8007ad6:	1e7b      	subs	r3, r7, #1
 8007ad8:	9304      	str	r3, [sp, #16]
 8007ada:	4649      	mov	r1, r9
 8007adc:	2300      	movs	r3, #0
 8007ade:	220a      	movs	r2, #10
 8007ae0:	4658      	mov	r0, fp
 8007ae2:	f000 faf7 	bl	80080d4 <__multadd>
 8007ae6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ae8:	4681      	mov	r9, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 8172 	beq.w	8007dd4 <_dtoa_r+0xb4c>
 8007af0:	2300      	movs	r3, #0
 8007af2:	4629      	mov	r1, r5
 8007af4:	220a      	movs	r2, #10
 8007af6:	4658      	mov	r0, fp
 8007af8:	f000 faec 	bl	80080d4 <__multadd>
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	4605      	mov	r5, r0
 8007b02:	dc67      	bgt.n	8007bd4 <_dtoa_r+0x94c>
 8007b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	dc41      	bgt.n	8007b8e <_dtoa_r+0x906>
 8007b0a:	e063      	b.n	8007bd4 <_dtoa_r+0x94c>
 8007b0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b12:	e746      	b.n	80079a2 <_dtoa_r+0x71a>
 8007b14:	9b07      	ldr	r3, [sp, #28]
 8007b16:	1e5c      	subs	r4, r3, #1
 8007b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	bfbf      	itttt	lt
 8007b1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b24:	1ae3      	sublt	r3, r4, r3
 8007b26:	bfb4      	ite	lt
 8007b28:	18d2      	addlt	r2, r2, r3
 8007b2a:	1b1c      	subge	r4, r3, r4
 8007b2c:	9b07      	ldr	r3, [sp, #28]
 8007b2e:	bfbc      	itt	lt
 8007b30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b32:	2400      	movlt	r4, #0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	bfb5      	itete	lt
 8007b38:	eba8 0603 	sublt.w	r6, r8, r3
 8007b3c:	9b07      	ldrge	r3, [sp, #28]
 8007b3e:	2300      	movlt	r3, #0
 8007b40:	4646      	movge	r6, r8
 8007b42:	e730      	b.n	80079a6 <_dtoa_r+0x71e>
 8007b44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007b48:	4646      	mov	r6, r8
 8007b4a:	e735      	b.n	80079b8 <_dtoa_r+0x730>
 8007b4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b4e:	e75c      	b.n	8007a0a <_dtoa_r+0x782>
 8007b50:	2300      	movs	r3, #0
 8007b52:	e788      	b.n	8007a66 <_dtoa_r+0x7de>
 8007b54:	3fe00000 	.word	0x3fe00000
 8007b58:	40240000 	.word	0x40240000
 8007b5c:	40140000 	.word	0x40140000
 8007b60:	9b02      	ldr	r3, [sp, #8]
 8007b62:	e780      	b.n	8007a66 <_dtoa_r+0x7de>
 8007b64:	2300      	movs	r3, #0
 8007b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b68:	e782      	b.n	8007a70 <_dtoa_r+0x7e8>
 8007b6a:	d099      	beq.n	8007aa0 <_dtoa_r+0x818>
 8007b6c:	9a08      	ldr	r2, [sp, #32]
 8007b6e:	331c      	adds	r3, #28
 8007b70:	441a      	add	r2, r3
 8007b72:	4498      	add	r8, r3
 8007b74:	441e      	add	r6, r3
 8007b76:	9208      	str	r2, [sp, #32]
 8007b78:	e792      	b.n	8007aa0 <_dtoa_r+0x818>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	e7f6      	b.n	8007b6c <_dtoa_r+0x8e4>
 8007b7e:	9b07      	ldr	r3, [sp, #28]
 8007b80:	9704      	str	r7, [sp, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	dc20      	bgt.n	8007bc8 <_dtoa_r+0x940>
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8a:	2b02      	cmp	r3, #2
 8007b8c:	dd1e      	ble.n	8007bcc <_dtoa_r+0x944>
 8007b8e:	9b00      	ldr	r3, [sp, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f47f aec0 	bne.w	8007916 <_dtoa_r+0x68e>
 8007b96:	4621      	mov	r1, r4
 8007b98:	2205      	movs	r2, #5
 8007b9a:	4658      	mov	r0, fp
 8007b9c:	f000 fa9a 	bl	80080d4 <__multadd>
 8007ba0:	4601      	mov	r1, r0
 8007ba2:	4604      	mov	r4, r0
 8007ba4:	4648      	mov	r0, r9
 8007ba6:	f000 fcad 	bl	8008504 <__mcmp>
 8007baa:	2800      	cmp	r0, #0
 8007bac:	f77f aeb3 	ble.w	8007916 <_dtoa_r+0x68e>
 8007bb0:	4656      	mov	r6, sl
 8007bb2:	2331      	movs	r3, #49	@ 0x31
 8007bb4:	f806 3b01 	strb.w	r3, [r6], #1
 8007bb8:	9b04      	ldr	r3, [sp, #16]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	9304      	str	r3, [sp, #16]
 8007bbe:	e6ae      	b.n	800791e <_dtoa_r+0x696>
 8007bc0:	9c07      	ldr	r4, [sp, #28]
 8007bc2:	9704      	str	r7, [sp, #16]
 8007bc4:	4625      	mov	r5, r4
 8007bc6:	e7f3      	b.n	8007bb0 <_dtoa_r+0x928>
 8007bc8:	9b07      	ldr	r3, [sp, #28]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8104 	beq.w	8007ddc <_dtoa_r+0xb54>
 8007bd4:	2e00      	cmp	r6, #0
 8007bd6:	dd05      	ble.n	8007be4 <_dtoa_r+0x95c>
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4632      	mov	r2, r6
 8007bdc:	4658      	mov	r0, fp
 8007bde:	f000 fc25 	bl	800842c <__lshift>
 8007be2:	4605      	mov	r5, r0
 8007be4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d05a      	beq.n	8007ca0 <_dtoa_r+0xa18>
 8007bea:	6869      	ldr	r1, [r5, #4]
 8007bec:	4658      	mov	r0, fp
 8007bee:	f000 fa0f 	bl	8008010 <_Balloc>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	b928      	cbnz	r0, 8007c02 <_dtoa_r+0x97a>
 8007bf6:	4b84      	ldr	r3, [pc, #528]	@ (8007e08 <_dtoa_r+0xb80>)
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007bfe:	f7ff bb5a 	b.w	80072b6 <_dtoa_r+0x2e>
 8007c02:	692a      	ldr	r2, [r5, #16]
 8007c04:	3202      	adds	r2, #2
 8007c06:	0092      	lsls	r2, r2, #2
 8007c08:	f105 010c 	add.w	r1, r5, #12
 8007c0c:	300c      	adds	r0, #12
 8007c0e:	f7ff faa4 	bl	800715a <memcpy>
 8007c12:	2201      	movs	r2, #1
 8007c14:	4631      	mov	r1, r6
 8007c16:	4658      	mov	r0, fp
 8007c18:	f000 fc08 	bl	800842c <__lshift>
 8007c1c:	f10a 0301 	add.w	r3, sl, #1
 8007c20:	9307      	str	r3, [sp, #28]
 8007c22:	9b00      	ldr	r3, [sp, #0]
 8007c24:	4453      	add	r3, sl
 8007c26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c28:	9b02      	ldr	r3, [sp, #8]
 8007c2a:	f003 0301 	and.w	r3, r3, #1
 8007c2e:	462f      	mov	r7, r5
 8007c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c32:	4605      	mov	r5, r0
 8007c34:	9b07      	ldr	r3, [sp, #28]
 8007c36:	4621      	mov	r1, r4
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	4648      	mov	r0, r9
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	f7ff fa9a 	bl	8007176 <quorem>
 8007c42:	4639      	mov	r1, r7
 8007c44:	9002      	str	r0, [sp, #8]
 8007c46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007c4a:	4648      	mov	r0, r9
 8007c4c:	f000 fc5a 	bl	8008504 <__mcmp>
 8007c50:	462a      	mov	r2, r5
 8007c52:	9008      	str	r0, [sp, #32]
 8007c54:	4621      	mov	r1, r4
 8007c56:	4658      	mov	r0, fp
 8007c58:	f000 fc70 	bl	800853c <__mdiff>
 8007c5c:	68c2      	ldr	r2, [r0, #12]
 8007c5e:	4606      	mov	r6, r0
 8007c60:	bb02      	cbnz	r2, 8007ca4 <_dtoa_r+0xa1c>
 8007c62:	4601      	mov	r1, r0
 8007c64:	4648      	mov	r0, r9
 8007c66:	f000 fc4d 	bl	8008504 <__mcmp>
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	4658      	mov	r0, fp
 8007c70:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c72:	f000 fa0d 	bl	8008090 <_Bfree>
 8007c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c7a:	9e07      	ldr	r6, [sp, #28]
 8007c7c:	ea43 0102 	orr.w	r1, r3, r2
 8007c80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c82:	4319      	orrs	r1, r3
 8007c84:	d110      	bne.n	8007ca8 <_dtoa_r+0xa20>
 8007c86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c8a:	d029      	beq.n	8007ce0 <_dtoa_r+0xa58>
 8007c8c:	9b08      	ldr	r3, [sp, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	dd02      	ble.n	8007c98 <_dtoa_r+0xa10>
 8007c92:	9b02      	ldr	r3, [sp, #8]
 8007c94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007c98:	9b00      	ldr	r3, [sp, #0]
 8007c9a:	f883 8000 	strb.w	r8, [r3]
 8007c9e:	e63f      	b.n	8007920 <_dtoa_r+0x698>
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	e7bb      	b.n	8007c1c <_dtoa_r+0x994>
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	e7e1      	b.n	8007c6c <_dtoa_r+0x9e4>
 8007ca8:	9b08      	ldr	r3, [sp, #32]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	db04      	blt.n	8007cb8 <_dtoa_r+0xa30>
 8007cae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	d120      	bne.n	8007cfa <_dtoa_r+0xa72>
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	dded      	ble.n	8007c98 <_dtoa_r+0xa10>
 8007cbc:	4649      	mov	r1, r9
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	4658      	mov	r0, fp
 8007cc2:	f000 fbb3 	bl	800842c <__lshift>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4681      	mov	r9, r0
 8007cca:	f000 fc1b 	bl	8008504 <__mcmp>
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	dc03      	bgt.n	8007cda <_dtoa_r+0xa52>
 8007cd2:	d1e1      	bne.n	8007c98 <_dtoa_r+0xa10>
 8007cd4:	f018 0f01 	tst.w	r8, #1
 8007cd8:	d0de      	beq.n	8007c98 <_dtoa_r+0xa10>
 8007cda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cde:	d1d8      	bne.n	8007c92 <_dtoa_r+0xa0a>
 8007ce0:	9a00      	ldr	r2, [sp, #0]
 8007ce2:	2339      	movs	r3, #57	@ 0x39
 8007ce4:	7013      	strb	r3, [r2, #0]
 8007ce6:	4633      	mov	r3, r6
 8007ce8:	461e      	mov	r6, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cf0:	2a39      	cmp	r2, #57	@ 0x39
 8007cf2:	d052      	beq.n	8007d9a <_dtoa_r+0xb12>
 8007cf4:	3201      	adds	r2, #1
 8007cf6:	701a      	strb	r2, [r3, #0]
 8007cf8:	e612      	b.n	8007920 <_dtoa_r+0x698>
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	dd07      	ble.n	8007d0e <_dtoa_r+0xa86>
 8007cfe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d02:	d0ed      	beq.n	8007ce0 <_dtoa_r+0xa58>
 8007d04:	9a00      	ldr	r2, [sp, #0]
 8007d06:	f108 0301 	add.w	r3, r8, #1
 8007d0a:	7013      	strb	r3, [r2, #0]
 8007d0c:	e608      	b.n	8007920 <_dtoa_r+0x698>
 8007d0e:	9b07      	ldr	r3, [sp, #28]
 8007d10:	9a07      	ldr	r2, [sp, #28]
 8007d12:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d028      	beq.n	8007d6e <_dtoa_r+0xae6>
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	2300      	movs	r3, #0
 8007d20:	220a      	movs	r2, #10
 8007d22:	4658      	mov	r0, fp
 8007d24:	f000 f9d6 	bl	80080d4 <__multadd>
 8007d28:	42af      	cmp	r7, r5
 8007d2a:	4681      	mov	r9, r0
 8007d2c:	f04f 0300 	mov.w	r3, #0
 8007d30:	f04f 020a 	mov.w	r2, #10
 8007d34:	4639      	mov	r1, r7
 8007d36:	4658      	mov	r0, fp
 8007d38:	d107      	bne.n	8007d4a <_dtoa_r+0xac2>
 8007d3a:	f000 f9cb 	bl	80080d4 <__multadd>
 8007d3e:	4607      	mov	r7, r0
 8007d40:	4605      	mov	r5, r0
 8007d42:	9b07      	ldr	r3, [sp, #28]
 8007d44:	3301      	adds	r3, #1
 8007d46:	9307      	str	r3, [sp, #28]
 8007d48:	e774      	b.n	8007c34 <_dtoa_r+0x9ac>
 8007d4a:	f000 f9c3 	bl	80080d4 <__multadd>
 8007d4e:	4629      	mov	r1, r5
 8007d50:	4607      	mov	r7, r0
 8007d52:	2300      	movs	r3, #0
 8007d54:	220a      	movs	r2, #10
 8007d56:	4658      	mov	r0, fp
 8007d58:	f000 f9bc 	bl	80080d4 <__multadd>
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	e7f0      	b.n	8007d42 <_dtoa_r+0xaba>
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfcc      	ite	gt
 8007d66:	461e      	movgt	r6, r3
 8007d68:	2601      	movle	r6, #1
 8007d6a:	4456      	add	r6, sl
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	4649      	mov	r1, r9
 8007d70:	2201      	movs	r2, #1
 8007d72:	4658      	mov	r0, fp
 8007d74:	f000 fb5a 	bl	800842c <__lshift>
 8007d78:	4621      	mov	r1, r4
 8007d7a:	4681      	mov	r9, r0
 8007d7c:	f000 fbc2 	bl	8008504 <__mcmp>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	dcb0      	bgt.n	8007ce6 <_dtoa_r+0xa5e>
 8007d84:	d102      	bne.n	8007d8c <_dtoa_r+0xb04>
 8007d86:	f018 0f01 	tst.w	r8, #1
 8007d8a:	d1ac      	bne.n	8007ce6 <_dtoa_r+0xa5e>
 8007d8c:	4633      	mov	r3, r6
 8007d8e:	461e      	mov	r6, r3
 8007d90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d94:	2a30      	cmp	r2, #48	@ 0x30
 8007d96:	d0fa      	beq.n	8007d8e <_dtoa_r+0xb06>
 8007d98:	e5c2      	b.n	8007920 <_dtoa_r+0x698>
 8007d9a:	459a      	cmp	sl, r3
 8007d9c:	d1a4      	bne.n	8007ce8 <_dtoa_r+0xa60>
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	3301      	adds	r3, #1
 8007da2:	9304      	str	r3, [sp, #16]
 8007da4:	2331      	movs	r3, #49	@ 0x31
 8007da6:	f88a 3000 	strb.w	r3, [sl]
 8007daa:	e5b9      	b.n	8007920 <_dtoa_r+0x698>
 8007dac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e0c <_dtoa_r+0xb84>
 8007db2:	b11b      	cbz	r3, 8007dbc <_dtoa_r+0xb34>
 8007db4:	f10a 0308 	add.w	r3, sl, #8
 8007db8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	4650      	mov	r0, sl
 8007dbe:	b019      	add	sp, #100	@ 0x64
 8007dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	f77f ae37 	ble.w	8007a3a <_dtoa_r+0x7b2>
 8007dcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dd0:	2001      	movs	r0, #1
 8007dd2:	e655      	b.n	8007a80 <_dtoa_r+0x7f8>
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f77f aed6 	ble.w	8007b88 <_dtoa_r+0x900>
 8007ddc:	4656      	mov	r6, sl
 8007dde:	4621      	mov	r1, r4
 8007de0:	4648      	mov	r0, r9
 8007de2:	f7ff f9c8 	bl	8007176 <quorem>
 8007de6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007dea:	f806 8b01 	strb.w	r8, [r6], #1
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	eba6 020a 	sub.w	r2, r6, sl
 8007df4:	4293      	cmp	r3, r2
 8007df6:	ddb3      	ble.n	8007d60 <_dtoa_r+0xad8>
 8007df8:	4649      	mov	r1, r9
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	220a      	movs	r2, #10
 8007dfe:	4658      	mov	r0, fp
 8007e00:	f000 f968 	bl	80080d4 <__multadd>
 8007e04:	4681      	mov	r9, r0
 8007e06:	e7ea      	b.n	8007dde <_dtoa_r+0xb56>
 8007e08:	080096f8 	.word	0x080096f8
 8007e0c:	0800967c 	.word	0x0800967c

08007e10 <_free_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4605      	mov	r5, r0
 8007e14:	2900      	cmp	r1, #0
 8007e16:	d041      	beq.n	8007e9c <_free_r+0x8c>
 8007e18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1c:	1f0c      	subs	r4, r1, #4
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	bfb8      	it	lt
 8007e22:	18e4      	addlt	r4, r4, r3
 8007e24:	f000 f8e8 	bl	8007ff8 <__malloc_lock>
 8007e28:	4a1d      	ldr	r2, [pc, #116]	@ (8007ea0 <_free_r+0x90>)
 8007e2a:	6813      	ldr	r3, [r2, #0]
 8007e2c:	b933      	cbnz	r3, 8007e3c <_free_r+0x2c>
 8007e2e:	6063      	str	r3, [r4, #4]
 8007e30:	6014      	str	r4, [r2, #0]
 8007e32:	4628      	mov	r0, r5
 8007e34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e38:	f000 b8e4 	b.w	8008004 <__malloc_unlock>
 8007e3c:	42a3      	cmp	r3, r4
 8007e3e:	d908      	bls.n	8007e52 <_free_r+0x42>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	1821      	adds	r1, r4, r0
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf01      	itttt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	1809      	addeq	r1, r1, r0
 8007e4e:	6021      	streq	r1, [r4, #0]
 8007e50:	e7ed      	b.n	8007e2e <_free_r+0x1e>
 8007e52:	461a      	mov	r2, r3
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	b10b      	cbz	r3, 8007e5c <_free_r+0x4c>
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	d9fa      	bls.n	8007e52 <_free_r+0x42>
 8007e5c:	6811      	ldr	r1, [r2, #0]
 8007e5e:	1850      	adds	r0, r2, r1
 8007e60:	42a0      	cmp	r0, r4
 8007e62:	d10b      	bne.n	8007e7c <_free_r+0x6c>
 8007e64:	6820      	ldr	r0, [r4, #0]
 8007e66:	4401      	add	r1, r0
 8007e68:	1850      	adds	r0, r2, r1
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	6011      	str	r1, [r2, #0]
 8007e6e:	d1e0      	bne.n	8007e32 <_free_r+0x22>
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	6053      	str	r3, [r2, #4]
 8007e76:	4408      	add	r0, r1
 8007e78:	6010      	str	r0, [r2, #0]
 8007e7a:	e7da      	b.n	8007e32 <_free_r+0x22>
 8007e7c:	d902      	bls.n	8007e84 <_free_r+0x74>
 8007e7e:	230c      	movs	r3, #12
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	e7d6      	b.n	8007e32 <_free_r+0x22>
 8007e84:	6820      	ldr	r0, [r4, #0]
 8007e86:	1821      	adds	r1, r4, r0
 8007e88:	428b      	cmp	r3, r1
 8007e8a:	bf04      	itt	eq
 8007e8c:	6819      	ldreq	r1, [r3, #0]
 8007e8e:	685b      	ldreq	r3, [r3, #4]
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	bf04      	itt	eq
 8007e94:	1809      	addeq	r1, r1, r0
 8007e96:	6021      	streq	r1, [r4, #0]
 8007e98:	6054      	str	r4, [r2, #4]
 8007e9a:	e7ca      	b.n	8007e32 <_free_r+0x22>
 8007e9c:	bd38      	pop	{r3, r4, r5, pc}
 8007e9e:	bf00      	nop
 8007ea0:	20000590 	.word	0x20000590

08007ea4 <malloc>:
 8007ea4:	4b02      	ldr	r3, [pc, #8]	@ (8007eb0 <malloc+0xc>)
 8007ea6:	4601      	mov	r1, r0
 8007ea8:	6818      	ldr	r0, [r3, #0]
 8007eaa:	f000 b825 	b.w	8007ef8 <_malloc_r>
 8007eae:	bf00      	nop
 8007eb0:	20000024 	.word	0x20000024

08007eb4 <sbrk_aligned>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8007ef4 <sbrk_aligned+0x40>)
 8007eb8:	460c      	mov	r4, r1
 8007eba:	6831      	ldr	r1, [r6, #0]
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	b911      	cbnz	r1, 8007ec6 <sbrk_aligned+0x12>
 8007ec0:	f000 fe46 	bl	8008b50 <_sbrk_r>
 8007ec4:	6030      	str	r0, [r6, #0]
 8007ec6:	4621      	mov	r1, r4
 8007ec8:	4628      	mov	r0, r5
 8007eca:	f000 fe41 	bl	8008b50 <_sbrk_r>
 8007ece:	1c43      	adds	r3, r0, #1
 8007ed0:	d103      	bne.n	8007eda <sbrk_aligned+0x26>
 8007ed2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	bd70      	pop	{r4, r5, r6, pc}
 8007eda:	1cc4      	adds	r4, r0, #3
 8007edc:	f024 0403 	bic.w	r4, r4, #3
 8007ee0:	42a0      	cmp	r0, r4
 8007ee2:	d0f8      	beq.n	8007ed6 <sbrk_aligned+0x22>
 8007ee4:	1a21      	subs	r1, r4, r0
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f000 fe32 	bl	8008b50 <_sbrk_r>
 8007eec:	3001      	adds	r0, #1
 8007eee:	d1f2      	bne.n	8007ed6 <sbrk_aligned+0x22>
 8007ef0:	e7ef      	b.n	8007ed2 <sbrk_aligned+0x1e>
 8007ef2:	bf00      	nop
 8007ef4:	2000058c 	.word	0x2000058c

08007ef8 <_malloc_r>:
 8007ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007efc:	1ccd      	adds	r5, r1, #3
 8007efe:	f025 0503 	bic.w	r5, r5, #3
 8007f02:	3508      	adds	r5, #8
 8007f04:	2d0c      	cmp	r5, #12
 8007f06:	bf38      	it	cc
 8007f08:	250c      	movcc	r5, #12
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	4606      	mov	r6, r0
 8007f0e:	db01      	blt.n	8007f14 <_malloc_r+0x1c>
 8007f10:	42a9      	cmp	r1, r5
 8007f12:	d904      	bls.n	8007f1e <_malloc_r+0x26>
 8007f14:	230c      	movs	r3, #12
 8007f16:	6033      	str	r3, [r6, #0]
 8007f18:	2000      	movs	r0, #0
 8007f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ff4 <_malloc_r+0xfc>
 8007f22:	f000 f869 	bl	8007ff8 <__malloc_lock>
 8007f26:	f8d8 3000 	ldr.w	r3, [r8]
 8007f2a:	461c      	mov	r4, r3
 8007f2c:	bb44      	cbnz	r4, 8007f80 <_malloc_r+0x88>
 8007f2e:	4629      	mov	r1, r5
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7ff ffbf 	bl	8007eb4 <sbrk_aligned>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	4604      	mov	r4, r0
 8007f3a:	d158      	bne.n	8007fee <_malloc_r+0xf6>
 8007f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8007f40:	4627      	mov	r7, r4
 8007f42:	2f00      	cmp	r7, #0
 8007f44:	d143      	bne.n	8007fce <_malloc_r+0xd6>
 8007f46:	2c00      	cmp	r4, #0
 8007f48:	d04b      	beq.n	8007fe2 <_malloc_r+0xea>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	4630      	mov	r0, r6
 8007f50:	eb04 0903 	add.w	r9, r4, r3
 8007f54:	f000 fdfc 	bl	8008b50 <_sbrk_r>
 8007f58:	4581      	cmp	r9, r0
 8007f5a:	d142      	bne.n	8007fe2 <_malloc_r+0xea>
 8007f5c:	6821      	ldr	r1, [r4, #0]
 8007f5e:	1a6d      	subs	r5, r5, r1
 8007f60:	4629      	mov	r1, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff ffa6 	bl	8007eb4 <sbrk_aligned>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	d03a      	beq.n	8007fe2 <_malloc_r+0xea>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	442b      	add	r3, r5
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	f8d8 3000 	ldr.w	r3, [r8]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	bb62      	cbnz	r2, 8007fd4 <_malloc_r+0xdc>
 8007f7a:	f8c8 7000 	str.w	r7, [r8]
 8007f7e:	e00f      	b.n	8007fa0 <_malloc_r+0xa8>
 8007f80:	6822      	ldr	r2, [r4, #0]
 8007f82:	1b52      	subs	r2, r2, r5
 8007f84:	d420      	bmi.n	8007fc8 <_malloc_r+0xd0>
 8007f86:	2a0b      	cmp	r2, #11
 8007f88:	d917      	bls.n	8007fba <_malloc_r+0xc2>
 8007f8a:	1961      	adds	r1, r4, r5
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	6025      	str	r5, [r4, #0]
 8007f90:	bf18      	it	ne
 8007f92:	6059      	strne	r1, [r3, #4]
 8007f94:	6863      	ldr	r3, [r4, #4]
 8007f96:	bf08      	it	eq
 8007f98:	f8c8 1000 	streq.w	r1, [r8]
 8007f9c:	5162      	str	r2, [r4, r5]
 8007f9e:	604b      	str	r3, [r1, #4]
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 f82f 	bl	8008004 <__malloc_unlock>
 8007fa6:	f104 000b 	add.w	r0, r4, #11
 8007faa:	1d23      	adds	r3, r4, #4
 8007fac:	f020 0007 	bic.w	r0, r0, #7
 8007fb0:	1ac2      	subs	r2, r0, r3
 8007fb2:	bf1c      	itt	ne
 8007fb4:	1a1b      	subne	r3, r3, r0
 8007fb6:	50a3      	strne	r3, [r4, r2]
 8007fb8:	e7af      	b.n	8007f1a <_malloc_r+0x22>
 8007fba:	6862      	ldr	r2, [r4, #4]
 8007fbc:	42a3      	cmp	r3, r4
 8007fbe:	bf0c      	ite	eq
 8007fc0:	f8c8 2000 	streq.w	r2, [r8]
 8007fc4:	605a      	strne	r2, [r3, #4]
 8007fc6:	e7eb      	b.n	8007fa0 <_malloc_r+0xa8>
 8007fc8:	4623      	mov	r3, r4
 8007fca:	6864      	ldr	r4, [r4, #4]
 8007fcc:	e7ae      	b.n	8007f2c <_malloc_r+0x34>
 8007fce:	463c      	mov	r4, r7
 8007fd0:	687f      	ldr	r7, [r7, #4]
 8007fd2:	e7b6      	b.n	8007f42 <_malloc_r+0x4a>
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	d1fb      	bne.n	8007fd4 <_malloc_r+0xdc>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	6053      	str	r3, [r2, #4]
 8007fe0:	e7de      	b.n	8007fa0 <_malloc_r+0xa8>
 8007fe2:	230c      	movs	r3, #12
 8007fe4:	6033      	str	r3, [r6, #0]
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	f000 f80c 	bl	8008004 <__malloc_unlock>
 8007fec:	e794      	b.n	8007f18 <_malloc_r+0x20>
 8007fee:	6005      	str	r5, [r0, #0]
 8007ff0:	e7d6      	b.n	8007fa0 <_malloc_r+0xa8>
 8007ff2:	bf00      	nop
 8007ff4:	20000590 	.word	0x20000590

08007ff8 <__malloc_lock>:
 8007ff8:	4801      	ldr	r0, [pc, #4]	@ (8008000 <__malloc_lock+0x8>)
 8007ffa:	f7ff b8ac 	b.w	8007156 <__retarget_lock_acquire_recursive>
 8007ffe:	bf00      	nop
 8008000:	20000588 	.word	0x20000588

08008004 <__malloc_unlock>:
 8008004:	4801      	ldr	r0, [pc, #4]	@ (800800c <__malloc_unlock+0x8>)
 8008006:	f7ff b8a7 	b.w	8007158 <__retarget_lock_release_recursive>
 800800a:	bf00      	nop
 800800c:	20000588 	.word	0x20000588

08008010 <_Balloc>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	69c6      	ldr	r6, [r0, #28]
 8008014:	4604      	mov	r4, r0
 8008016:	460d      	mov	r5, r1
 8008018:	b976      	cbnz	r6, 8008038 <_Balloc+0x28>
 800801a:	2010      	movs	r0, #16
 800801c:	f7ff ff42 	bl	8007ea4 <malloc>
 8008020:	4602      	mov	r2, r0
 8008022:	61e0      	str	r0, [r4, #28]
 8008024:	b920      	cbnz	r0, 8008030 <_Balloc+0x20>
 8008026:	4b18      	ldr	r3, [pc, #96]	@ (8008088 <_Balloc+0x78>)
 8008028:	4818      	ldr	r0, [pc, #96]	@ (800808c <_Balloc+0x7c>)
 800802a:	216b      	movs	r1, #107	@ 0x6b
 800802c:	f000 fda0 	bl	8008b70 <__assert_func>
 8008030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008034:	6006      	str	r6, [r0, #0]
 8008036:	60c6      	str	r6, [r0, #12]
 8008038:	69e6      	ldr	r6, [r4, #28]
 800803a:	68f3      	ldr	r3, [r6, #12]
 800803c:	b183      	cbz	r3, 8008060 <_Balloc+0x50>
 800803e:	69e3      	ldr	r3, [r4, #28]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008046:	b9b8      	cbnz	r0, 8008078 <_Balloc+0x68>
 8008048:	2101      	movs	r1, #1
 800804a:	fa01 f605 	lsl.w	r6, r1, r5
 800804e:	1d72      	adds	r2, r6, #5
 8008050:	0092      	lsls	r2, r2, #2
 8008052:	4620      	mov	r0, r4
 8008054:	f000 fdaa 	bl	8008bac <_calloc_r>
 8008058:	b160      	cbz	r0, 8008074 <_Balloc+0x64>
 800805a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800805e:	e00e      	b.n	800807e <_Balloc+0x6e>
 8008060:	2221      	movs	r2, #33	@ 0x21
 8008062:	2104      	movs	r1, #4
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fda1 	bl	8008bac <_calloc_r>
 800806a:	69e3      	ldr	r3, [r4, #28]
 800806c:	60f0      	str	r0, [r6, #12]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e4      	bne.n	800803e <_Balloc+0x2e>
 8008074:	2000      	movs	r0, #0
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	6802      	ldr	r2, [r0, #0]
 800807a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800807e:	2300      	movs	r3, #0
 8008080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008084:	e7f7      	b.n	8008076 <_Balloc+0x66>
 8008086:	bf00      	nop
 8008088:	08009689 	.word	0x08009689
 800808c:	08009709 	.word	0x08009709

08008090 <_Bfree>:
 8008090:	b570      	push	{r4, r5, r6, lr}
 8008092:	69c6      	ldr	r6, [r0, #28]
 8008094:	4605      	mov	r5, r0
 8008096:	460c      	mov	r4, r1
 8008098:	b976      	cbnz	r6, 80080b8 <_Bfree+0x28>
 800809a:	2010      	movs	r0, #16
 800809c:	f7ff ff02 	bl	8007ea4 <malloc>
 80080a0:	4602      	mov	r2, r0
 80080a2:	61e8      	str	r0, [r5, #28]
 80080a4:	b920      	cbnz	r0, 80080b0 <_Bfree+0x20>
 80080a6:	4b09      	ldr	r3, [pc, #36]	@ (80080cc <_Bfree+0x3c>)
 80080a8:	4809      	ldr	r0, [pc, #36]	@ (80080d0 <_Bfree+0x40>)
 80080aa:	218f      	movs	r1, #143	@ 0x8f
 80080ac:	f000 fd60 	bl	8008b70 <__assert_func>
 80080b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080b4:	6006      	str	r6, [r0, #0]
 80080b6:	60c6      	str	r6, [r0, #12]
 80080b8:	b13c      	cbz	r4, 80080ca <_Bfree+0x3a>
 80080ba:	69eb      	ldr	r3, [r5, #28]
 80080bc:	6862      	ldr	r2, [r4, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080c4:	6021      	str	r1, [r4, #0]
 80080c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	08009689 	.word	0x08009689
 80080d0:	08009709 	.word	0x08009709

080080d4 <__multadd>:
 80080d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080d8:	690d      	ldr	r5, [r1, #16]
 80080da:	4607      	mov	r7, r0
 80080dc:	460c      	mov	r4, r1
 80080de:	461e      	mov	r6, r3
 80080e0:	f101 0c14 	add.w	ip, r1, #20
 80080e4:	2000      	movs	r0, #0
 80080e6:	f8dc 3000 	ldr.w	r3, [ip]
 80080ea:	b299      	uxth	r1, r3
 80080ec:	fb02 6101 	mla	r1, r2, r1, r6
 80080f0:	0c1e      	lsrs	r6, r3, #16
 80080f2:	0c0b      	lsrs	r3, r1, #16
 80080f4:	fb02 3306 	mla	r3, r2, r6, r3
 80080f8:	b289      	uxth	r1, r1
 80080fa:	3001      	adds	r0, #1
 80080fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008100:	4285      	cmp	r5, r0
 8008102:	f84c 1b04 	str.w	r1, [ip], #4
 8008106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800810a:	dcec      	bgt.n	80080e6 <__multadd+0x12>
 800810c:	b30e      	cbz	r6, 8008152 <__multadd+0x7e>
 800810e:	68a3      	ldr	r3, [r4, #8]
 8008110:	42ab      	cmp	r3, r5
 8008112:	dc19      	bgt.n	8008148 <__multadd+0x74>
 8008114:	6861      	ldr	r1, [r4, #4]
 8008116:	4638      	mov	r0, r7
 8008118:	3101      	adds	r1, #1
 800811a:	f7ff ff79 	bl	8008010 <_Balloc>
 800811e:	4680      	mov	r8, r0
 8008120:	b928      	cbnz	r0, 800812e <__multadd+0x5a>
 8008122:	4602      	mov	r2, r0
 8008124:	4b0c      	ldr	r3, [pc, #48]	@ (8008158 <__multadd+0x84>)
 8008126:	480d      	ldr	r0, [pc, #52]	@ (800815c <__multadd+0x88>)
 8008128:	21ba      	movs	r1, #186	@ 0xba
 800812a:	f000 fd21 	bl	8008b70 <__assert_func>
 800812e:	6922      	ldr	r2, [r4, #16]
 8008130:	3202      	adds	r2, #2
 8008132:	f104 010c 	add.w	r1, r4, #12
 8008136:	0092      	lsls	r2, r2, #2
 8008138:	300c      	adds	r0, #12
 800813a:	f7ff f80e 	bl	800715a <memcpy>
 800813e:	4621      	mov	r1, r4
 8008140:	4638      	mov	r0, r7
 8008142:	f7ff ffa5 	bl	8008090 <_Bfree>
 8008146:	4644      	mov	r4, r8
 8008148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800814c:	3501      	adds	r5, #1
 800814e:	615e      	str	r6, [r3, #20]
 8008150:	6125      	str	r5, [r4, #16]
 8008152:	4620      	mov	r0, r4
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	080096f8 	.word	0x080096f8
 800815c:	08009709 	.word	0x08009709

08008160 <__hi0bits>:
 8008160:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008164:	4603      	mov	r3, r0
 8008166:	bf36      	itet	cc
 8008168:	0403      	lslcc	r3, r0, #16
 800816a:	2000      	movcs	r0, #0
 800816c:	2010      	movcc	r0, #16
 800816e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008172:	bf3c      	itt	cc
 8008174:	021b      	lslcc	r3, r3, #8
 8008176:	3008      	addcc	r0, #8
 8008178:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800817c:	bf3c      	itt	cc
 800817e:	011b      	lslcc	r3, r3, #4
 8008180:	3004      	addcc	r0, #4
 8008182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008186:	bf3c      	itt	cc
 8008188:	009b      	lslcc	r3, r3, #2
 800818a:	3002      	addcc	r0, #2
 800818c:	2b00      	cmp	r3, #0
 800818e:	db05      	blt.n	800819c <__hi0bits+0x3c>
 8008190:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008194:	f100 0001 	add.w	r0, r0, #1
 8008198:	bf08      	it	eq
 800819a:	2020      	moveq	r0, #32
 800819c:	4770      	bx	lr

0800819e <__lo0bits>:
 800819e:	6803      	ldr	r3, [r0, #0]
 80081a0:	4602      	mov	r2, r0
 80081a2:	f013 0007 	ands.w	r0, r3, #7
 80081a6:	d00b      	beq.n	80081c0 <__lo0bits+0x22>
 80081a8:	07d9      	lsls	r1, r3, #31
 80081aa:	d421      	bmi.n	80081f0 <__lo0bits+0x52>
 80081ac:	0798      	lsls	r0, r3, #30
 80081ae:	bf49      	itett	mi
 80081b0:	085b      	lsrmi	r3, r3, #1
 80081b2:	089b      	lsrpl	r3, r3, #2
 80081b4:	2001      	movmi	r0, #1
 80081b6:	6013      	strmi	r3, [r2, #0]
 80081b8:	bf5c      	itt	pl
 80081ba:	6013      	strpl	r3, [r2, #0]
 80081bc:	2002      	movpl	r0, #2
 80081be:	4770      	bx	lr
 80081c0:	b299      	uxth	r1, r3
 80081c2:	b909      	cbnz	r1, 80081c8 <__lo0bits+0x2a>
 80081c4:	0c1b      	lsrs	r3, r3, #16
 80081c6:	2010      	movs	r0, #16
 80081c8:	b2d9      	uxtb	r1, r3
 80081ca:	b909      	cbnz	r1, 80081d0 <__lo0bits+0x32>
 80081cc:	3008      	adds	r0, #8
 80081ce:	0a1b      	lsrs	r3, r3, #8
 80081d0:	0719      	lsls	r1, r3, #28
 80081d2:	bf04      	itt	eq
 80081d4:	091b      	lsreq	r3, r3, #4
 80081d6:	3004      	addeq	r0, #4
 80081d8:	0799      	lsls	r1, r3, #30
 80081da:	bf04      	itt	eq
 80081dc:	089b      	lsreq	r3, r3, #2
 80081de:	3002      	addeq	r0, #2
 80081e0:	07d9      	lsls	r1, r3, #31
 80081e2:	d403      	bmi.n	80081ec <__lo0bits+0x4e>
 80081e4:	085b      	lsrs	r3, r3, #1
 80081e6:	f100 0001 	add.w	r0, r0, #1
 80081ea:	d003      	beq.n	80081f4 <__lo0bits+0x56>
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	4770      	bx	lr
 80081f0:	2000      	movs	r0, #0
 80081f2:	4770      	bx	lr
 80081f4:	2020      	movs	r0, #32
 80081f6:	4770      	bx	lr

080081f8 <__i2b>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	460c      	mov	r4, r1
 80081fc:	2101      	movs	r1, #1
 80081fe:	f7ff ff07 	bl	8008010 <_Balloc>
 8008202:	4602      	mov	r2, r0
 8008204:	b928      	cbnz	r0, 8008212 <__i2b+0x1a>
 8008206:	4b05      	ldr	r3, [pc, #20]	@ (800821c <__i2b+0x24>)
 8008208:	4805      	ldr	r0, [pc, #20]	@ (8008220 <__i2b+0x28>)
 800820a:	f240 1145 	movw	r1, #325	@ 0x145
 800820e:	f000 fcaf 	bl	8008b70 <__assert_func>
 8008212:	2301      	movs	r3, #1
 8008214:	6144      	str	r4, [r0, #20]
 8008216:	6103      	str	r3, [r0, #16]
 8008218:	bd10      	pop	{r4, pc}
 800821a:	bf00      	nop
 800821c:	080096f8 	.word	0x080096f8
 8008220:	08009709 	.word	0x08009709

08008224 <__multiply>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	4614      	mov	r4, r2
 800822a:	690a      	ldr	r2, [r1, #16]
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	429a      	cmp	r2, r3
 8008230:	bfa8      	it	ge
 8008232:	4623      	movge	r3, r4
 8008234:	460f      	mov	r7, r1
 8008236:	bfa4      	itt	ge
 8008238:	460c      	movge	r4, r1
 800823a:	461f      	movge	r7, r3
 800823c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008240:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008244:	68a3      	ldr	r3, [r4, #8]
 8008246:	6861      	ldr	r1, [r4, #4]
 8008248:	eb0a 0609 	add.w	r6, sl, r9
 800824c:	42b3      	cmp	r3, r6
 800824e:	b085      	sub	sp, #20
 8008250:	bfb8      	it	lt
 8008252:	3101      	addlt	r1, #1
 8008254:	f7ff fedc 	bl	8008010 <_Balloc>
 8008258:	b930      	cbnz	r0, 8008268 <__multiply+0x44>
 800825a:	4602      	mov	r2, r0
 800825c:	4b44      	ldr	r3, [pc, #272]	@ (8008370 <__multiply+0x14c>)
 800825e:	4845      	ldr	r0, [pc, #276]	@ (8008374 <__multiply+0x150>)
 8008260:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008264:	f000 fc84 	bl	8008b70 <__assert_func>
 8008268:	f100 0514 	add.w	r5, r0, #20
 800826c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008270:	462b      	mov	r3, r5
 8008272:	2200      	movs	r2, #0
 8008274:	4543      	cmp	r3, r8
 8008276:	d321      	bcc.n	80082bc <__multiply+0x98>
 8008278:	f107 0114 	add.w	r1, r7, #20
 800827c:	f104 0214 	add.w	r2, r4, #20
 8008280:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008284:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008288:	9302      	str	r3, [sp, #8]
 800828a:	1b13      	subs	r3, r2, r4
 800828c:	3b15      	subs	r3, #21
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	3304      	adds	r3, #4
 8008294:	f104 0715 	add.w	r7, r4, #21
 8008298:	42ba      	cmp	r2, r7
 800829a:	bf38      	it	cc
 800829c:	2304      	movcc	r3, #4
 800829e:	9301      	str	r3, [sp, #4]
 80082a0:	9b02      	ldr	r3, [sp, #8]
 80082a2:	9103      	str	r1, [sp, #12]
 80082a4:	428b      	cmp	r3, r1
 80082a6:	d80c      	bhi.n	80082c2 <__multiply+0x9e>
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	dd03      	ble.n	80082b4 <__multiply+0x90>
 80082ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d05b      	beq.n	800836c <__multiply+0x148>
 80082b4:	6106      	str	r6, [r0, #16]
 80082b6:	b005      	add	sp, #20
 80082b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082bc:	f843 2b04 	str.w	r2, [r3], #4
 80082c0:	e7d8      	b.n	8008274 <__multiply+0x50>
 80082c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80082c6:	f1ba 0f00 	cmp.w	sl, #0
 80082ca:	d024      	beq.n	8008316 <__multiply+0xf2>
 80082cc:	f104 0e14 	add.w	lr, r4, #20
 80082d0:	46a9      	mov	r9, r5
 80082d2:	f04f 0c00 	mov.w	ip, #0
 80082d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082da:	f8d9 3000 	ldr.w	r3, [r9]
 80082de:	fa1f fb87 	uxth.w	fp, r7
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80082e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80082ec:	f8d9 7000 	ldr.w	r7, [r9]
 80082f0:	4463      	add	r3, ip
 80082f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80082fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80082fe:	b29b      	uxth	r3, r3
 8008300:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008304:	4572      	cmp	r2, lr
 8008306:	f849 3b04 	str.w	r3, [r9], #4
 800830a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800830e:	d8e2      	bhi.n	80082d6 <__multiply+0xb2>
 8008310:	9b01      	ldr	r3, [sp, #4]
 8008312:	f845 c003 	str.w	ip, [r5, r3]
 8008316:	9b03      	ldr	r3, [sp, #12]
 8008318:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800831c:	3104      	adds	r1, #4
 800831e:	f1b9 0f00 	cmp.w	r9, #0
 8008322:	d021      	beq.n	8008368 <__multiply+0x144>
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	f104 0c14 	add.w	ip, r4, #20
 800832a:	46ae      	mov	lr, r5
 800832c:	f04f 0a00 	mov.w	sl, #0
 8008330:	f8bc b000 	ldrh.w	fp, [ip]
 8008334:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008338:	fb09 770b 	mla	r7, r9, fp, r7
 800833c:	4457      	add	r7, sl
 800833e:	b29b      	uxth	r3, r3
 8008340:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008344:	f84e 3b04 	str.w	r3, [lr], #4
 8008348:	f85c 3b04 	ldr.w	r3, [ip], #4
 800834c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008350:	f8be 3000 	ldrh.w	r3, [lr]
 8008354:	fb09 330a 	mla	r3, r9, sl, r3
 8008358:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800835c:	4562      	cmp	r2, ip
 800835e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008362:	d8e5      	bhi.n	8008330 <__multiply+0x10c>
 8008364:	9f01      	ldr	r7, [sp, #4]
 8008366:	51eb      	str	r3, [r5, r7]
 8008368:	3504      	adds	r5, #4
 800836a:	e799      	b.n	80082a0 <__multiply+0x7c>
 800836c:	3e01      	subs	r6, #1
 800836e:	e79b      	b.n	80082a8 <__multiply+0x84>
 8008370:	080096f8 	.word	0x080096f8
 8008374:	08009709 	.word	0x08009709

08008378 <__pow5mult>:
 8008378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800837c:	4615      	mov	r5, r2
 800837e:	f012 0203 	ands.w	r2, r2, #3
 8008382:	4607      	mov	r7, r0
 8008384:	460e      	mov	r6, r1
 8008386:	d007      	beq.n	8008398 <__pow5mult+0x20>
 8008388:	4c25      	ldr	r4, [pc, #148]	@ (8008420 <__pow5mult+0xa8>)
 800838a:	3a01      	subs	r2, #1
 800838c:	2300      	movs	r3, #0
 800838e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008392:	f7ff fe9f 	bl	80080d4 <__multadd>
 8008396:	4606      	mov	r6, r0
 8008398:	10ad      	asrs	r5, r5, #2
 800839a:	d03d      	beq.n	8008418 <__pow5mult+0xa0>
 800839c:	69fc      	ldr	r4, [r7, #28]
 800839e:	b97c      	cbnz	r4, 80083c0 <__pow5mult+0x48>
 80083a0:	2010      	movs	r0, #16
 80083a2:	f7ff fd7f 	bl	8007ea4 <malloc>
 80083a6:	4602      	mov	r2, r0
 80083a8:	61f8      	str	r0, [r7, #28]
 80083aa:	b928      	cbnz	r0, 80083b8 <__pow5mult+0x40>
 80083ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008424 <__pow5mult+0xac>)
 80083ae:	481e      	ldr	r0, [pc, #120]	@ (8008428 <__pow5mult+0xb0>)
 80083b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80083b4:	f000 fbdc 	bl	8008b70 <__assert_func>
 80083b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083bc:	6004      	str	r4, [r0, #0]
 80083be:	60c4      	str	r4, [r0, #12]
 80083c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083c8:	b94c      	cbnz	r4, 80083de <__pow5mult+0x66>
 80083ca:	f240 2171 	movw	r1, #625	@ 0x271
 80083ce:	4638      	mov	r0, r7
 80083d0:	f7ff ff12 	bl	80081f8 <__i2b>
 80083d4:	2300      	movs	r3, #0
 80083d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80083da:	4604      	mov	r4, r0
 80083dc:	6003      	str	r3, [r0, #0]
 80083de:	f04f 0900 	mov.w	r9, #0
 80083e2:	07eb      	lsls	r3, r5, #31
 80083e4:	d50a      	bpl.n	80083fc <__pow5mult+0x84>
 80083e6:	4631      	mov	r1, r6
 80083e8:	4622      	mov	r2, r4
 80083ea:	4638      	mov	r0, r7
 80083ec:	f7ff ff1a 	bl	8008224 <__multiply>
 80083f0:	4631      	mov	r1, r6
 80083f2:	4680      	mov	r8, r0
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff fe4b 	bl	8008090 <_Bfree>
 80083fa:	4646      	mov	r6, r8
 80083fc:	106d      	asrs	r5, r5, #1
 80083fe:	d00b      	beq.n	8008418 <__pow5mult+0xa0>
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	b938      	cbnz	r0, 8008414 <__pow5mult+0x9c>
 8008404:	4622      	mov	r2, r4
 8008406:	4621      	mov	r1, r4
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff ff0b 	bl	8008224 <__multiply>
 800840e:	6020      	str	r0, [r4, #0]
 8008410:	f8c0 9000 	str.w	r9, [r0]
 8008414:	4604      	mov	r4, r0
 8008416:	e7e4      	b.n	80083e2 <__pow5mult+0x6a>
 8008418:	4630      	mov	r0, r6
 800841a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800841e:	bf00      	nop
 8008420:	08009764 	.word	0x08009764
 8008424:	08009689 	.word	0x08009689
 8008428:	08009709 	.word	0x08009709

0800842c <__lshift>:
 800842c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008430:	460c      	mov	r4, r1
 8008432:	6849      	ldr	r1, [r1, #4]
 8008434:	6923      	ldr	r3, [r4, #16]
 8008436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800843a:	68a3      	ldr	r3, [r4, #8]
 800843c:	4607      	mov	r7, r0
 800843e:	4691      	mov	r9, r2
 8008440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008444:	f108 0601 	add.w	r6, r8, #1
 8008448:	42b3      	cmp	r3, r6
 800844a:	db0b      	blt.n	8008464 <__lshift+0x38>
 800844c:	4638      	mov	r0, r7
 800844e:	f7ff fddf 	bl	8008010 <_Balloc>
 8008452:	4605      	mov	r5, r0
 8008454:	b948      	cbnz	r0, 800846a <__lshift+0x3e>
 8008456:	4602      	mov	r2, r0
 8008458:	4b28      	ldr	r3, [pc, #160]	@ (80084fc <__lshift+0xd0>)
 800845a:	4829      	ldr	r0, [pc, #164]	@ (8008500 <__lshift+0xd4>)
 800845c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008460:	f000 fb86 	bl	8008b70 <__assert_func>
 8008464:	3101      	adds	r1, #1
 8008466:	005b      	lsls	r3, r3, #1
 8008468:	e7ee      	b.n	8008448 <__lshift+0x1c>
 800846a:	2300      	movs	r3, #0
 800846c:	f100 0114 	add.w	r1, r0, #20
 8008470:	f100 0210 	add.w	r2, r0, #16
 8008474:	4618      	mov	r0, r3
 8008476:	4553      	cmp	r3, sl
 8008478:	db33      	blt.n	80084e2 <__lshift+0xb6>
 800847a:	6920      	ldr	r0, [r4, #16]
 800847c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008480:	f104 0314 	add.w	r3, r4, #20
 8008484:	f019 091f 	ands.w	r9, r9, #31
 8008488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800848c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008490:	d02b      	beq.n	80084ea <__lshift+0xbe>
 8008492:	f1c9 0e20 	rsb	lr, r9, #32
 8008496:	468a      	mov	sl, r1
 8008498:	2200      	movs	r2, #0
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	fa00 f009 	lsl.w	r0, r0, r9
 80084a0:	4310      	orrs	r0, r2
 80084a2:	f84a 0b04 	str.w	r0, [sl], #4
 80084a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80084aa:	459c      	cmp	ip, r3
 80084ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80084b0:	d8f3      	bhi.n	800849a <__lshift+0x6e>
 80084b2:	ebac 0304 	sub.w	r3, ip, r4
 80084b6:	3b15      	subs	r3, #21
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	3304      	adds	r3, #4
 80084be:	f104 0015 	add.w	r0, r4, #21
 80084c2:	4584      	cmp	ip, r0
 80084c4:	bf38      	it	cc
 80084c6:	2304      	movcc	r3, #4
 80084c8:	50ca      	str	r2, [r1, r3]
 80084ca:	b10a      	cbz	r2, 80084d0 <__lshift+0xa4>
 80084cc:	f108 0602 	add.w	r6, r8, #2
 80084d0:	3e01      	subs	r6, #1
 80084d2:	4638      	mov	r0, r7
 80084d4:	612e      	str	r6, [r5, #16]
 80084d6:	4621      	mov	r1, r4
 80084d8:	f7ff fdda 	bl	8008090 <_Bfree>
 80084dc:	4628      	mov	r0, r5
 80084de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80084e6:	3301      	adds	r3, #1
 80084e8:	e7c5      	b.n	8008476 <__lshift+0x4a>
 80084ea:	3904      	subs	r1, #4
 80084ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80084f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80084f4:	459c      	cmp	ip, r3
 80084f6:	d8f9      	bhi.n	80084ec <__lshift+0xc0>
 80084f8:	e7ea      	b.n	80084d0 <__lshift+0xa4>
 80084fa:	bf00      	nop
 80084fc:	080096f8 	.word	0x080096f8
 8008500:	08009709 	.word	0x08009709

08008504 <__mcmp>:
 8008504:	690a      	ldr	r2, [r1, #16]
 8008506:	4603      	mov	r3, r0
 8008508:	6900      	ldr	r0, [r0, #16]
 800850a:	1a80      	subs	r0, r0, r2
 800850c:	b530      	push	{r4, r5, lr}
 800850e:	d10e      	bne.n	800852e <__mcmp+0x2a>
 8008510:	3314      	adds	r3, #20
 8008512:	3114      	adds	r1, #20
 8008514:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008518:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800851c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008520:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008524:	4295      	cmp	r5, r2
 8008526:	d003      	beq.n	8008530 <__mcmp+0x2c>
 8008528:	d205      	bcs.n	8008536 <__mcmp+0x32>
 800852a:	f04f 30ff 	mov.w	r0, #4294967295
 800852e:	bd30      	pop	{r4, r5, pc}
 8008530:	42a3      	cmp	r3, r4
 8008532:	d3f3      	bcc.n	800851c <__mcmp+0x18>
 8008534:	e7fb      	b.n	800852e <__mcmp+0x2a>
 8008536:	2001      	movs	r0, #1
 8008538:	e7f9      	b.n	800852e <__mcmp+0x2a>
	...

0800853c <__mdiff>:
 800853c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	4689      	mov	r9, r1
 8008542:	4606      	mov	r6, r0
 8008544:	4611      	mov	r1, r2
 8008546:	4648      	mov	r0, r9
 8008548:	4614      	mov	r4, r2
 800854a:	f7ff ffdb 	bl	8008504 <__mcmp>
 800854e:	1e05      	subs	r5, r0, #0
 8008550:	d112      	bne.n	8008578 <__mdiff+0x3c>
 8008552:	4629      	mov	r1, r5
 8008554:	4630      	mov	r0, r6
 8008556:	f7ff fd5b 	bl	8008010 <_Balloc>
 800855a:	4602      	mov	r2, r0
 800855c:	b928      	cbnz	r0, 800856a <__mdiff+0x2e>
 800855e:	4b3f      	ldr	r3, [pc, #252]	@ (800865c <__mdiff+0x120>)
 8008560:	f240 2137 	movw	r1, #567	@ 0x237
 8008564:	483e      	ldr	r0, [pc, #248]	@ (8008660 <__mdiff+0x124>)
 8008566:	f000 fb03 	bl	8008b70 <__assert_func>
 800856a:	2301      	movs	r3, #1
 800856c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008570:	4610      	mov	r0, r2
 8008572:	b003      	add	sp, #12
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	bfbc      	itt	lt
 800857a:	464b      	movlt	r3, r9
 800857c:	46a1      	movlt	r9, r4
 800857e:	4630      	mov	r0, r6
 8008580:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008584:	bfba      	itte	lt
 8008586:	461c      	movlt	r4, r3
 8008588:	2501      	movlt	r5, #1
 800858a:	2500      	movge	r5, #0
 800858c:	f7ff fd40 	bl	8008010 <_Balloc>
 8008590:	4602      	mov	r2, r0
 8008592:	b918      	cbnz	r0, 800859c <__mdiff+0x60>
 8008594:	4b31      	ldr	r3, [pc, #196]	@ (800865c <__mdiff+0x120>)
 8008596:	f240 2145 	movw	r1, #581	@ 0x245
 800859a:	e7e3      	b.n	8008564 <__mdiff+0x28>
 800859c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80085a0:	6926      	ldr	r6, [r4, #16]
 80085a2:	60c5      	str	r5, [r0, #12]
 80085a4:	f109 0310 	add.w	r3, r9, #16
 80085a8:	f109 0514 	add.w	r5, r9, #20
 80085ac:	f104 0e14 	add.w	lr, r4, #20
 80085b0:	f100 0b14 	add.w	fp, r0, #20
 80085b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80085b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	46d9      	mov	r9, fp
 80085c0:	f04f 0c00 	mov.w	ip, #0
 80085c4:	9b01      	ldr	r3, [sp, #4]
 80085c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	fa1f f38a 	uxth.w	r3, sl
 80085d4:	4619      	mov	r1, r3
 80085d6:	b283      	uxth	r3, r0
 80085d8:	1acb      	subs	r3, r1, r3
 80085da:	0c00      	lsrs	r0, r0, #16
 80085dc:	4463      	add	r3, ip
 80085de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085ec:	4576      	cmp	r6, lr
 80085ee:	f849 3b04 	str.w	r3, [r9], #4
 80085f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085f6:	d8e5      	bhi.n	80085c4 <__mdiff+0x88>
 80085f8:	1b33      	subs	r3, r6, r4
 80085fa:	3b15      	subs	r3, #21
 80085fc:	f023 0303 	bic.w	r3, r3, #3
 8008600:	3415      	adds	r4, #21
 8008602:	3304      	adds	r3, #4
 8008604:	42a6      	cmp	r6, r4
 8008606:	bf38      	it	cc
 8008608:	2304      	movcc	r3, #4
 800860a:	441d      	add	r5, r3
 800860c:	445b      	add	r3, fp
 800860e:	461e      	mov	r6, r3
 8008610:	462c      	mov	r4, r5
 8008612:	4544      	cmp	r4, r8
 8008614:	d30e      	bcc.n	8008634 <__mdiff+0xf8>
 8008616:	f108 0103 	add.w	r1, r8, #3
 800861a:	1b49      	subs	r1, r1, r5
 800861c:	f021 0103 	bic.w	r1, r1, #3
 8008620:	3d03      	subs	r5, #3
 8008622:	45a8      	cmp	r8, r5
 8008624:	bf38      	it	cc
 8008626:	2100      	movcc	r1, #0
 8008628:	440b      	add	r3, r1
 800862a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800862e:	b191      	cbz	r1, 8008656 <__mdiff+0x11a>
 8008630:	6117      	str	r7, [r2, #16]
 8008632:	e79d      	b.n	8008570 <__mdiff+0x34>
 8008634:	f854 1b04 	ldr.w	r1, [r4], #4
 8008638:	46e6      	mov	lr, ip
 800863a:	0c08      	lsrs	r0, r1, #16
 800863c:	fa1c fc81 	uxtah	ip, ip, r1
 8008640:	4471      	add	r1, lr
 8008642:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008646:	b289      	uxth	r1, r1
 8008648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800864c:	f846 1b04 	str.w	r1, [r6], #4
 8008650:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008654:	e7dd      	b.n	8008612 <__mdiff+0xd6>
 8008656:	3f01      	subs	r7, #1
 8008658:	e7e7      	b.n	800862a <__mdiff+0xee>
 800865a:	bf00      	nop
 800865c:	080096f8 	.word	0x080096f8
 8008660:	08009709 	.word	0x08009709

08008664 <__d2b>:
 8008664:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008668:	460f      	mov	r7, r1
 800866a:	2101      	movs	r1, #1
 800866c:	ec59 8b10 	vmov	r8, r9, d0
 8008670:	4616      	mov	r6, r2
 8008672:	f7ff fccd 	bl	8008010 <_Balloc>
 8008676:	4604      	mov	r4, r0
 8008678:	b930      	cbnz	r0, 8008688 <__d2b+0x24>
 800867a:	4602      	mov	r2, r0
 800867c:	4b23      	ldr	r3, [pc, #140]	@ (800870c <__d2b+0xa8>)
 800867e:	4824      	ldr	r0, [pc, #144]	@ (8008710 <__d2b+0xac>)
 8008680:	f240 310f 	movw	r1, #783	@ 0x30f
 8008684:	f000 fa74 	bl	8008b70 <__assert_func>
 8008688:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800868c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008690:	b10d      	cbz	r5, 8008696 <__d2b+0x32>
 8008692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	f1b8 0300 	subs.w	r3, r8, #0
 800869c:	d023      	beq.n	80086e6 <__d2b+0x82>
 800869e:	4668      	mov	r0, sp
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	f7ff fd7c 	bl	800819e <__lo0bits>
 80086a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80086aa:	b1d0      	cbz	r0, 80086e2 <__d2b+0x7e>
 80086ac:	f1c0 0320 	rsb	r3, r0, #32
 80086b0:	fa02 f303 	lsl.w	r3, r2, r3
 80086b4:	430b      	orrs	r3, r1
 80086b6:	40c2      	lsrs	r2, r0
 80086b8:	6163      	str	r3, [r4, #20]
 80086ba:	9201      	str	r2, [sp, #4]
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	61a3      	str	r3, [r4, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	bf0c      	ite	eq
 80086c4:	2201      	moveq	r2, #1
 80086c6:	2202      	movne	r2, #2
 80086c8:	6122      	str	r2, [r4, #16]
 80086ca:	b1a5      	cbz	r5, 80086f6 <__d2b+0x92>
 80086cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086d0:	4405      	add	r5, r0
 80086d2:	603d      	str	r5, [r7, #0]
 80086d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086d8:	6030      	str	r0, [r6, #0]
 80086da:	4620      	mov	r0, r4
 80086dc:	b003      	add	sp, #12
 80086de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086e2:	6161      	str	r1, [r4, #20]
 80086e4:	e7ea      	b.n	80086bc <__d2b+0x58>
 80086e6:	a801      	add	r0, sp, #4
 80086e8:	f7ff fd59 	bl	800819e <__lo0bits>
 80086ec:	9b01      	ldr	r3, [sp, #4]
 80086ee:	6163      	str	r3, [r4, #20]
 80086f0:	3020      	adds	r0, #32
 80086f2:	2201      	movs	r2, #1
 80086f4:	e7e8      	b.n	80086c8 <__d2b+0x64>
 80086f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086fe:	6038      	str	r0, [r7, #0]
 8008700:	6918      	ldr	r0, [r3, #16]
 8008702:	f7ff fd2d 	bl	8008160 <__hi0bits>
 8008706:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800870a:	e7e5      	b.n	80086d8 <__d2b+0x74>
 800870c:	080096f8 	.word	0x080096f8
 8008710:	08009709 	.word	0x08009709

08008714 <__ssputs_r>:
 8008714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008718:	688e      	ldr	r6, [r1, #8]
 800871a:	461f      	mov	r7, r3
 800871c:	42be      	cmp	r6, r7
 800871e:	680b      	ldr	r3, [r1, #0]
 8008720:	4682      	mov	sl, r0
 8008722:	460c      	mov	r4, r1
 8008724:	4690      	mov	r8, r2
 8008726:	d82d      	bhi.n	8008784 <__ssputs_r+0x70>
 8008728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800872c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008730:	d026      	beq.n	8008780 <__ssputs_r+0x6c>
 8008732:	6965      	ldr	r5, [r4, #20]
 8008734:	6909      	ldr	r1, [r1, #16]
 8008736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800873a:	eba3 0901 	sub.w	r9, r3, r1
 800873e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008742:	1c7b      	adds	r3, r7, #1
 8008744:	444b      	add	r3, r9
 8008746:	106d      	asrs	r5, r5, #1
 8008748:	429d      	cmp	r5, r3
 800874a:	bf38      	it	cc
 800874c:	461d      	movcc	r5, r3
 800874e:	0553      	lsls	r3, r2, #21
 8008750:	d527      	bpl.n	80087a2 <__ssputs_r+0x8e>
 8008752:	4629      	mov	r1, r5
 8008754:	f7ff fbd0 	bl	8007ef8 <_malloc_r>
 8008758:	4606      	mov	r6, r0
 800875a:	b360      	cbz	r0, 80087b6 <__ssputs_r+0xa2>
 800875c:	6921      	ldr	r1, [r4, #16]
 800875e:	464a      	mov	r2, r9
 8008760:	f7fe fcfb 	bl	800715a <memcpy>
 8008764:	89a3      	ldrh	r3, [r4, #12]
 8008766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800876a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800876e:	81a3      	strh	r3, [r4, #12]
 8008770:	6126      	str	r6, [r4, #16]
 8008772:	6165      	str	r5, [r4, #20]
 8008774:	444e      	add	r6, r9
 8008776:	eba5 0509 	sub.w	r5, r5, r9
 800877a:	6026      	str	r6, [r4, #0]
 800877c:	60a5      	str	r5, [r4, #8]
 800877e:	463e      	mov	r6, r7
 8008780:	42be      	cmp	r6, r7
 8008782:	d900      	bls.n	8008786 <__ssputs_r+0x72>
 8008784:	463e      	mov	r6, r7
 8008786:	6820      	ldr	r0, [r4, #0]
 8008788:	4632      	mov	r2, r6
 800878a:	4641      	mov	r1, r8
 800878c:	f000 f9c6 	bl	8008b1c <memmove>
 8008790:	68a3      	ldr	r3, [r4, #8]
 8008792:	1b9b      	subs	r3, r3, r6
 8008794:	60a3      	str	r3, [r4, #8]
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	4433      	add	r3, r6
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	2000      	movs	r0, #0
 800879e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a2:	462a      	mov	r2, r5
 80087a4:	f000 fa28 	bl	8008bf8 <_realloc_r>
 80087a8:	4606      	mov	r6, r0
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d1e0      	bne.n	8008770 <__ssputs_r+0x5c>
 80087ae:	6921      	ldr	r1, [r4, #16]
 80087b0:	4650      	mov	r0, sl
 80087b2:	f7ff fb2d 	bl	8007e10 <_free_r>
 80087b6:	230c      	movs	r3, #12
 80087b8:	f8ca 3000 	str.w	r3, [sl]
 80087bc:	89a3      	ldrh	r3, [r4, #12]
 80087be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087c2:	81a3      	strh	r3, [r4, #12]
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	e7e9      	b.n	800879e <__ssputs_r+0x8a>
	...

080087cc <_svfiprintf_r>:
 80087cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d0:	4698      	mov	r8, r3
 80087d2:	898b      	ldrh	r3, [r1, #12]
 80087d4:	061b      	lsls	r3, r3, #24
 80087d6:	b09d      	sub	sp, #116	@ 0x74
 80087d8:	4607      	mov	r7, r0
 80087da:	460d      	mov	r5, r1
 80087dc:	4614      	mov	r4, r2
 80087de:	d510      	bpl.n	8008802 <_svfiprintf_r+0x36>
 80087e0:	690b      	ldr	r3, [r1, #16]
 80087e2:	b973      	cbnz	r3, 8008802 <_svfiprintf_r+0x36>
 80087e4:	2140      	movs	r1, #64	@ 0x40
 80087e6:	f7ff fb87 	bl	8007ef8 <_malloc_r>
 80087ea:	6028      	str	r0, [r5, #0]
 80087ec:	6128      	str	r0, [r5, #16]
 80087ee:	b930      	cbnz	r0, 80087fe <_svfiprintf_r+0x32>
 80087f0:	230c      	movs	r3, #12
 80087f2:	603b      	str	r3, [r7, #0]
 80087f4:	f04f 30ff 	mov.w	r0, #4294967295
 80087f8:	b01d      	add	sp, #116	@ 0x74
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	2340      	movs	r3, #64	@ 0x40
 8008800:	616b      	str	r3, [r5, #20]
 8008802:	2300      	movs	r3, #0
 8008804:	9309      	str	r3, [sp, #36]	@ 0x24
 8008806:	2320      	movs	r3, #32
 8008808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800880c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008810:	2330      	movs	r3, #48	@ 0x30
 8008812:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089b0 <_svfiprintf_r+0x1e4>
 8008816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800881a:	f04f 0901 	mov.w	r9, #1
 800881e:	4623      	mov	r3, r4
 8008820:	469a      	mov	sl, r3
 8008822:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008826:	b10a      	cbz	r2, 800882c <_svfiprintf_r+0x60>
 8008828:	2a25      	cmp	r2, #37	@ 0x25
 800882a:	d1f9      	bne.n	8008820 <_svfiprintf_r+0x54>
 800882c:	ebba 0b04 	subs.w	fp, sl, r4
 8008830:	d00b      	beq.n	800884a <_svfiprintf_r+0x7e>
 8008832:	465b      	mov	r3, fp
 8008834:	4622      	mov	r2, r4
 8008836:	4629      	mov	r1, r5
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff ff6b 	bl	8008714 <__ssputs_r>
 800883e:	3001      	adds	r0, #1
 8008840:	f000 80a7 	beq.w	8008992 <_svfiprintf_r+0x1c6>
 8008844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008846:	445a      	add	r2, fp
 8008848:	9209      	str	r2, [sp, #36]	@ 0x24
 800884a:	f89a 3000 	ldrb.w	r3, [sl]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f000 809f 	beq.w	8008992 <_svfiprintf_r+0x1c6>
 8008854:	2300      	movs	r3, #0
 8008856:	f04f 32ff 	mov.w	r2, #4294967295
 800885a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800885e:	f10a 0a01 	add.w	sl, sl, #1
 8008862:	9304      	str	r3, [sp, #16]
 8008864:	9307      	str	r3, [sp, #28]
 8008866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800886a:	931a      	str	r3, [sp, #104]	@ 0x68
 800886c:	4654      	mov	r4, sl
 800886e:	2205      	movs	r2, #5
 8008870:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008874:	484e      	ldr	r0, [pc, #312]	@ (80089b0 <_svfiprintf_r+0x1e4>)
 8008876:	f7f7 fcb3 	bl	80001e0 <memchr>
 800887a:	9a04      	ldr	r2, [sp, #16]
 800887c:	b9d8      	cbnz	r0, 80088b6 <_svfiprintf_r+0xea>
 800887e:	06d0      	lsls	r0, r2, #27
 8008880:	bf44      	itt	mi
 8008882:	2320      	movmi	r3, #32
 8008884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008888:	0711      	lsls	r1, r2, #28
 800888a:	bf44      	itt	mi
 800888c:	232b      	movmi	r3, #43	@ 0x2b
 800888e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008892:	f89a 3000 	ldrb.w	r3, [sl]
 8008896:	2b2a      	cmp	r3, #42	@ 0x2a
 8008898:	d015      	beq.n	80088c6 <_svfiprintf_r+0xfa>
 800889a:	9a07      	ldr	r2, [sp, #28]
 800889c:	4654      	mov	r4, sl
 800889e:	2000      	movs	r0, #0
 80088a0:	f04f 0c0a 	mov.w	ip, #10
 80088a4:	4621      	mov	r1, r4
 80088a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088aa:	3b30      	subs	r3, #48	@ 0x30
 80088ac:	2b09      	cmp	r3, #9
 80088ae:	d94b      	bls.n	8008948 <_svfiprintf_r+0x17c>
 80088b0:	b1b0      	cbz	r0, 80088e0 <_svfiprintf_r+0x114>
 80088b2:	9207      	str	r2, [sp, #28]
 80088b4:	e014      	b.n	80088e0 <_svfiprintf_r+0x114>
 80088b6:	eba0 0308 	sub.w	r3, r0, r8
 80088ba:	fa09 f303 	lsl.w	r3, r9, r3
 80088be:	4313      	orrs	r3, r2
 80088c0:	9304      	str	r3, [sp, #16]
 80088c2:	46a2      	mov	sl, r4
 80088c4:	e7d2      	b.n	800886c <_svfiprintf_r+0xa0>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	1d19      	adds	r1, r3, #4
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	9103      	str	r1, [sp, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	bfbb      	ittet	lt
 80088d2:	425b      	neglt	r3, r3
 80088d4:	f042 0202 	orrlt.w	r2, r2, #2
 80088d8:	9307      	strge	r3, [sp, #28]
 80088da:	9307      	strlt	r3, [sp, #28]
 80088dc:	bfb8      	it	lt
 80088de:	9204      	strlt	r2, [sp, #16]
 80088e0:	7823      	ldrb	r3, [r4, #0]
 80088e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80088e4:	d10a      	bne.n	80088fc <_svfiprintf_r+0x130>
 80088e6:	7863      	ldrb	r3, [r4, #1]
 80088e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ea:	d132      	bne.n	8008952 <_svfiprintf_r+0x186>
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	1d1a      	adds	r2, r3, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	9203      	str	r2, [sp, #12]
 80088f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088f8:	3402      	adds	r4, #2
 80088fa:	9305      	str	r3, [sp, #20]
 80088fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089c0 <_svfiprintf_r+0x1f4>
 8008900:	7821      	ldrb	r1, [r4, #0]
 8008902:	2203      	movs	r2, #3
 8008904:	4650      	mov	r0, sl
 8008906:	f7f7 fc6b 	bl	80001e0 <memchr>
 800890a:	b138      	cbz	r0, 800891c <_svfiprintf_r+0x150>
 800890c:	9b04      	ldr	r3, [sp, #16]
 800890e:	eba0 000a 	sub.w	r0, r0, sl
 8008912:	2240      	movs	r2, #64	@ 0x40
 8008914:	4082      	lsls	r2, r0
 8008916:	4313      	orrs	r3, r2
 8008918:	3401      	adds	r4, #1
 800891a:	9304      	str	r3, [sp, #16]
 800891c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008920:	4824      	ldr	r0, [pc, #144]	@ (80089b4 <_svfiprintf_r+0x1e8>)
 8008922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008926:	2206      	movs	r2, #6
 8008928:	f7f7 fc5a 	bl	80001e0 <memchr>
 800892c:	2800      	cmp	r0, #0
 800892e:	d036      	beq.n	800899e <_svfiprintf_r+0x1d2>
 8008930:	4b21      	ldr	r3, [pc, #132]	@ (80089b8 <_svfiprintf_r+0x1ec>)
 8008932:	bb1b      	cbnz	r3, 800897c <_svfiprintf_r+0x1b0>
 8008934:	9b03      	ldr	r3, [sp, #12]
 8008936:	3307      	adds	r3, #7
 8008938:	f023 0307 	bic.w	r3, r3, #7
 800893c:	3308      	adds	r3, #8
 800893e:	9303      	str	r3, [sp, #12]
 8008940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008942:	4433      	add	r3, r6
 8008944:	9309      	str	r3, [sp, #36]	@ 0x24
 8008946:	e76a      	b.n	800881e <_svfiprintf_r+0x52>
 8008948:	fb0c 3202 	mla	r2, ip, r2, r3
 800894c:	460c      	mov	r4, r1
 800894e:	2001      	movs	r0, #1
 8008950:	e7a8      	b.n	80088a4 <_svfiprintf_r+0xd8>
 8008952:	2300      	movs	r3, #0
 8008954:	3401      	adds	r4, #1
 8008956:	9305      	str	r3, [sp, #20]
 8008958:	4619      	mov	r1, r3
 800895a:	f04f 0c0a 	mov.w	ip, #10
 800895e:	4620      	mov	r0, r4
 8008960:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008964:	3a30      	subs	r2, #48	@ 0x30
 8008966:	2a09      	cmp	r2, #9
 8008968:	d903      	bls.n	8008972 <_svfiprintf_r+0x1a6>
 800896a:	2b00      	cmp	r3, #0
 800896c:	d0c6      	beq.n	80088fc <_svfiprintf_r+0x130>
 800896e:	9105      	str	r1, [sp, #20]
 8008970:	e7c4      	b.n	80088fc <_svfiprintf_r+0x130>
 8008972:	fb0c 2101 	mla	r1, ip, r1, r2
 8008976:	4604      	mov	r4, r0
 8008978:	2301      	movs	r3, #1
 800897a:	e7f0      	b.n	800895e <_svfiprintf_r+0x192>
 800897c:	ab03      	add	r3, sp, #12
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	462a      	mov	r2, r5
 8008982:	4b0e      	ldr	r3, [pc, #56]	@ (80089bc <_svfiprintf_r+0x1f0>)
 8008984:	a904      	add	r1, sp, #16
 8008986:	4638      	mov	r0, r7
 8008988:	f7fd fe8a 	bl	80066a0 <_printf_float>
 800898c:	1c42      	adds	r2, r0, #1
 800898e:	4606      	mov	r6, r0
 8008990:	d1d6      	bne.n	8008940 <_svfiprintf_r+0x174>
 8008992:	89ab      	ldrh	r3, [r5, #12]
 8008994:	065b      	lsls	r3, r3, #25
 8008996:	f53f af2d 	bmi.w	80087f4 <_svfiprintf_r+0x28>
 800899a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800899c:	e72c      	b.n	80087f8 <_svfiprintf_r+0x2c>
 800899e:	ab03      	add	r3, sp, #12
 80089a0:	9300      	str	r3, [sp, #0]
 80089a2:	462a      	mov	r2, r5
 80089a4:	4b05      	ldr	r3, [pc, #20]	@ (80089bc <_svfiprintf_r+0x1f0>)
 80089a6:	a904      	add	r1, sp, #16
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7fe f911 	bl	8006bd0 <_printf_i>
 80089ae:	e7ed      	b.n	800898c <_svfiprintf_r+0x1c0>
 80089b0:	08009860 	.word	0x08009860
 80089b4:	0800986a 	.word	0x0800986a
 80089b8:	080066a1 	.word	0x080066a1
 80089bc:	08008715 	.word	0x08008715
 80089c0:	08009866 	.word	0x08009866

080089c4 <__sflush_r>:
 80089c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089cc:	0716      	lsls	r6, r2, #28
 80089ce:	4605      	mov	r5, r0
 80089d0:	460c      	mov	r4, r1
 80089d2:	d454      	bmi.n	8008a7e <__sflush_r+0xba>
 80089d4:	684b      	ldr	r3, [r1, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dc02      	bgt.n	80089e0 <__sflush_r+0x1c>
 80089da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dd48      	ble.n	8008a72 <__sflush_r+0xae>
 80089e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d045      	beq.n	8008a72 <__sflush_r+0xae>
 80089e6:	2300      	movs	r3, #0
 80089e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089ec:	682f      	ldr	r7, [r5, #0]
 80089ee:	6a21      	ldr	r1, [r4, #32]
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	d030      	beq.n	8008a56 <__sflush_r+0x92>
 80089f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	0759      	lsls	r1, r3, #29
 80089fa:	d505      	bpl.n	8008a08 <__sflush_r+0x44>
 80089fc:	6863      	ldr	r3, [r4, #4]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a02:	b10b      	cbz	r3, 8008a08 <__sflush_r+0x44>
 8008a04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a0c:	6a21      	ldr	r1, [r4, #32]
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b0      	blx	r6
 8008a12:	1c43      	adds	r3, r0, #1
 8008a14:	89a3      	ldrh	r3, [r4, #12]
 8008a16:	d106      	bne.n	8008a26 <__sflush_r+0x62>
 8008a18:	6829      	ldr	r1, [r5, #0]
 8008a1a:	291d      	cmp	r1, #29
 8008a1c:	d82b      	bhi.n	8008a76 <__sflush_r+0xb2>
 8008a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008ac8 <__sflush_r+0x104>)
 8008a20:	410a      	asrs	r2, r1
 8008a22:	07d6      	lsls	r6, r2, #31
 8008a24:	d427      	bmi.n	8008a76 <__sflush_r+0xb2>
 8008a26:	2200      	movs	r2, #0
 8008a28:	6062      	str	r2, [r4, #4]
 8008a2a:	04d9      	lsls	r1, r3, #19
 8008a2c:	6922      	ldr	r2, [r4, #16]
 8008a2e:	6022      	str	r2, [r4, #0]
 8008a30:	d504      	bpl.n	8008a3c <__sflush_r+0x78>
 8008a32:	1c42      	adds	r2, r0, #1
 8008a34:	d101      	bne.n	8008a3a <__sflush_r+0x76>
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	b903      	cbnz	r3, 8008a3c <__sflush_r+0x78>
 8008a3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a3e:	602f      	str	r7, [r5, #0]
 8008a40:	b1b9      	cbz	r1, 8008a72 <__sflush_r+0xae>
 8008a42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a46:	4299      	cmp	r1, r3
 8008a48:	d002      	beq.n	8008a50 <__sflush_r+0x8c>
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7ff f9e0 	bl	8007e10 <_free_r>
 8008a50:	2300      	movs	r3, #0
 8008a52:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a54:	e00d      	b.n	8008a72 <__sflush_r+0xae>
 8008a56:	2301      	movs	r3, #1
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b0      	blx	r6
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	1c50      	adds	r0, r2, #1
 8008a60:	d1c9      	bne.n	80089f6 <__sflush_r+0x32>
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d0c6      	beq.n	80089f6 <__sflush_r+0x32>
 8008a68:	2b1d      	cmp	r3, #29
 8008a6a:	d001      	beq.n	8008a70 <__sflush_r+0xac>
 8008a6c:	2b16      	cmp	r3, #22
 8008a6e:	d11e      	bne.n	8008aae <__sflush_r+0xea>
 8008a70:	602f      	str	r7, [r5, #0]
 8008a72:	2000      	movs	r0, #0
 8008a74:	e022      	b.n	8008abc <__sflush_r+0xf8>
 8008a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a7a:	b21b      	sxth	r3, r3
 8008a7c:	e01b      	b.n	8008ab6 <__sflush_r+0xf2>
 8008a7e:	690f      	ldr	r7, [r1, #16]
 8008a80:	2f00      	cmp	r7, #0
 8008a82:	d0f6      	beq.n	8008a72 <__sflush_r+0xae>
 8008a84:	0793      	lsls	r3, r2, #30
 8008a86:	680e      	ldr	r6, [r1, #0]
 8008a88:	bf08      	it	eq
 8008a8a:	694b      	ldreq	r3, [r1, #20]
 8008a8c:	600f      	str	r7, [r1, #0]
 8008a8e:	bf18      	it	ne
 8008a90:	2300      	movne	r3, #0
 8008a92:	eba6 0807 	sub.w	r8, r6, r7
 8008a96:	608b      	str	r3, [r1, #8]
 8008a98:	f1b8 0f00 	cmp.w	r8, #0
 8008a9c:	dde9      	ble.n	8008a72 <__sflush_r+0xae>
 8008a9e:	6a21      	ldr	r1, [r4, #32]
 8008aa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008aa2:	4643      	mov	r3, r8
 8008aa4:	463a      	mov	r2, r7
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b0      	blx	r6
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	dc08      	bgt.n	8008ac0 <__sflush_r+0xfc>
 8008aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8008abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac0:	4407      	add	r7, r0
 8008ac2:	eba8 0800 	sub.w	r8, r8, r0
 8008ac6:	e7e7      	b.n	8008a98 <__sflush_r+0xd4>
 8008ac8:	dfbffffe 	.word	0xdfbffffe

08008acc <_fflush_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	690b      	ldr	r3, [r1, #16]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	b913      	cbnz	r3, 8008adc <_fflush_r+0x10>
 8008ad6:	2500      	movs	r5, #0
 8008ad8:	4628      	mov	r0, r5
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	b118      	cbz	r0, 8008ae6 <_fflush_r+0x1a>
 8008ade:	6a03      	ldr	r3, [r0, #32]
 8008ae0:	b90b      	cbnz	r3, 8008ae6 <_fflush_r+0x1a>
 8008ae2:	f7fe fa21 	bl	8006f28 <__sinit>
 8008ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0f3      	beq.n	8008ad6 <_fflush_r+0xa>
 8008aee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008af0:	07d0      	lsls	r0, r2, #31
 8008af2:	d404      	bmi.n	8008afe <_fflush_r+0x32>
 8008af4:	0599      	lsls	r1, r3, #22
 8008af6:	d402      	bmi.n	8008afe <_fflush_r+0x32>
 8008af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008afa:	f7fe fb2c 	bl	8007156 <__retarget_lock_acquire_recursive>
 8008afe:	4628      	mov	r0, r5
 8008b00:	4621      	mov	r1, r4
 8008b02:	f7ff ff5f 	bl	80089c4 <__sflush_r>
 8008b06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b08:	07da      	lsls	r2, r3, #31
 8008b0a:	4605      	mov	r5, r0
 8008b0c:	d4e4      	bmi.n	8008ad8 <_fflush_r+0xc>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	059b      	lsls	r3, r3, #22
 8008b12:	d4e1      	bmi.n	8008ad8 <_fflush_r+0xc>
 8008b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b16:	f7fe fb1f 	bl	8007158 <__retarget_lock_release_recursive>
 8008b1a:	e7dd      	b.n	8008ad8 <_fflush_r+0xc>

08008b1c <memmove>:
 8008b1c:	4288      	cmp	r0, r1
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	eb01 0402 	add.w	r4, r1, r2
 8008b24:	d902      	bls.n	8008b2c <memmove+0x10>
 8008b26:	4284      	cmp	r4, r0
 8008b28:	4623      	mov	r3, r4
 8008b2a:	d807      	bhi.n	8008b3c <memmove+0x20>
 8008b2c:	1e43      	subs	r3, r0, #1
 8008b2e:	42a1      	cmp	r1, r4
 8008b30:	d008      	beq.n	8008b44 <memmove+0x28>
 8008b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b3a:	e7f8      	b.n	8008b2e <memmove+0x12>
 8008b3c:	4402      	add	r2, r0
 8008b3e:	4601      	mov	r1, r0
 8008b40:	428a      	cmp	r2, r1
 8008b42:	d100      	bne.n	8008b46 <memmove+0x2a>
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b4e:	e7f7      	b.n	8008b40 <memmove+0x24>

08008b50 <_sbrk_r>:
 8008b50:	b538      	push	{r3, r4, r5, lr}
 8008b52:	4d06      	ldr	r5, [pc, #24]	@ (8008b6c <_sbrk_r+0x1c>)
 8008b54:	2300      	movs	r3, #0
 8008b56:	4604      	mov	r4, r0
 8008b58:	4608      	mov	r0, r1
 8008b5a:	602b      	str	r3, [r5, #0]
 8008b5c:	f7f9 fb72 	bl	8002244 <_sbrk>
 8008b60:	1c43      	adds	r3, r0, #1
 8008b62:	d102      	bne.n	8008b6a <_sbrk_r+0x1a>
 8008b64:	682b      	ldr	r3, [r5, #0]
 8008b66:	b103      	cbz	r3, 8008b6a <_sbrk_r+0x1a>
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	bd38      	pop	{r3, r4, r5, pc}
 8008b6c:	20000584 	.word	0x20000584

08008b70 <__assert_func>:
 8008b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b72:	4614      	mov	r4, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b09      	ldr	r3, [pc, #36]	@ (8008b9c <__assert_func+0x2c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	68d8      	ldr	r0, [r3, #12]
 8008b7e:	b954      	cbnz	r4, 8008b96 <__assert_func+0x26>
 8008b80:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <__assert_func+0x30>)
 8008b82:	461c      	mov	r4, r3
 8008b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b88:	9100      	str	r1, [sp, #0]
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	4905      	ldr	r1, [pc, #20]	@ (8008ba4 <__assert_func+0x34>)
 8008b8e:	f000 f86f 	bl	8008c70 <fiprintf>
 8008b92:	f000 f87f 	bl	8008c94 <abort>
 8008b96:	4b04      	ldr	r3, [pc, #16]	@ (8008ba8 <__assert_func+0x38>)
 8008b98:	e7f4      	b.n	8008b84 <__assert_func+0x14>
 8008b9a:	bf00      	nop
 8008b9c:	20000024 	.word	0x20000024
 8008ba0:	080098b6 	.word	0x080098b6
 8008ba4:	08009888 	.word	0x08009888
 8008ba8:	0800987b 	.word	0x0800987b

08008bac <_calloc_r>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	fba1 5402 	umull	r5, r4, r1, r2
 8008bb2:	b93c      	cbnz	r4, 8008bc4 <_calloc_r+0x18>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f7ff f99f 	bl	8007ef8 <_malloc_r>
 8008bba:	4606      	mov	r6, r0
 8008bbc:	b928      	cbnz	r0, 8008bca <_calloc_r+0x1e>
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	220c      	movs	r2, #12
 8008bc6:	6002      	str	r2, [r0, #0]
 8008bc8:	e7f9      	b.n	8008bbe <_calloc_r+0x12>
 8008bca:	462a      	mov	r2, r5
 8008bcc:	4621      	mov	r1, r4
 8008bce:	f7fe fa44 	bl	800705a <memset>
 8008bd2:	e7f5      	b.n	8008bc0 <_calloc_r+0x14>

08008bd4 <__ascii_mbtowc>:
 8008bd4:	b082      	sub	sp, #8
 8008bd6:	b901      	cbnz	r1, 8008bda <__ascii_mbtowc+0x6>
 8008bd8:	a901      	add	r1, sp, #4
 8008bda:	b142      	cbz	r2, 8008bee <__ascii_mbtowc+0x1a>
 8008bdc:	b14b      	cbz	r3, 8008bf2 <__ascii_mbtowc+0x1e>
 8008bde:	7813      	ldrb	r3, [r2, #0]
 8008be0:	600b      	str	r3, [r1, #0]
 8008be2:	7812      	ldrb	r2, [r2, #0]
 8008be4:	1e10      	subs	r0, r2, #0
 8008be6:	bf18      	it	ne
 8008be8:	2001      	movne	r0, #1
 8008bea:	b002      	add	sp, #8
 8008bec:	4770      	bx	lr
 8008bee:	4610      	mov	r0, r2
 8008bf0:	e7fb      	b.n	8008bea <__ascii_mbtowc+0x16>
 8008bf2:	f06f 0001 	mvn.w	r0, #1
 8008bf6:	e7f8      	b.n	8008bea <__ascii_mbtowc+0x16>

08008bf8 <_realloc_r>:
 8008bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	4615      	mov	r5, r2
 8008c00:	460c      	mov	r4, r1
 8008c02:	b921      	cbnz	r1, 8008c0e <_realloc_r+0x16>
 8008c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c08:	4611      	mov	r1, r2
 8008c0a:	f7ff b975 	b.w	8007ef8 <_malloc_r>
 8008c0e:	b92a      	cbnz	r2, 8008c1c <_realloc_r+0x24>
 8008c10:	f7ff f8fe 	bl	8007e10 <_free_r>
 8008c14:	2400      	movs	r4, #0
 8008c16:	4620      	mov	r0, r4
 8008c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c1c:	f000 f841 	bl	8008ca2 <_malloc_usable_size_r>
 8008c20:	4285      	cmp	r5, r0
 8008c22:	4606      	mov	r6, r0
 8008c24:	d802      	bhi.n	8008c2c <_realloc_r+0x34>
 8008c26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c2a:	d8f4      	bhi.n	8008c16 <_realloc_r+0x1e>
 8008c2c:	4629      	mov	r1, r5
 8008c2e:	4640      	mov	r0, r8
 8008c30:	f7ff f962 	bl	8007ef8 <_malloc_r>
 8008c34:	4607      	mov	r7, r0
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d0ec      	beq.n	8008c14 <_realloc_r+0x1c>
 8008c3a:	42b5      	cmp	r5, r6
 8008c3c:	462a      	mov	r2, r5
 8008c3e:	4621      	mov	r1, r4
 8008c40:	bf28      	it	cs
 8008c42:	4632      	movcs	r2, r6
 8008c44:	f7fe fa89 	bl	800715a <memcpy>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4640      	mov	r0, r8
 8008c4c:	f7ff f8e0 	bl	8007e10 <_free_r>
 8008c50:	463c      	mov	r4, r7
 8008c52:	e7e0      	b.n	8008c16 <_realloc_r+0x1e>

08008c54 <__ascii_wctomb>:
 8008c54:	4603      	mov	r3, r0
 8008c56:	4608      	mov	r0, r1
 8008c58:	b141      	cbz	r1, 8008c6c <__ascii_wctomb+0x18>
 8008c5a:	2aff      	cmp	r2, #255	@ 0xff
 8008c5c:	d904      	bls.n	8008c68 <__ascii_wctomb+0x14>
 8008c5e:	228a      	movs	r2, #138	@ 0x8a
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	f04f 30ff 	mov.w	r0, #4294967295
 8008c66:	4770      	bx	lr
 8008c68:	700a      	strb	r2, [r1, #0]
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	4770      	bx	lr
	...

08008c70 <fiprintf>:
 8008c70:	b40e      	push	{r1, r2, r3}
 8008c72:	b503      	push	{r0, r1, lr}
 8008c74:	4601      	mov	r1, r0
 8008c76:	ab03      	add	r3, sp, #12
 8008c78:	4805      	ldr	r0, [pc, #20]	@ (8008c90 <fiprintf+0x20>)
 8008c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c7e:	6800      	ldr	r0, [r0, #0]
 8008c80:	9301      	str	r3, [sp, #4]
 8008c82:	f000 f83f 	bl	8008d04 <_vfiprintf_r>
 8008c86:	b002      	add	sp, #8
 8008c88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c8c:	b003      	add	sp, #12
 8008c8e:	4770      	bx	lr
 8008c90:	20000024 	.word	0x20000024

08008c94 <abort>:
 8008c94:	b508      	push	{r3, lr}
 8008c96:	2006      	movs	r0, #6
 8008c98:	f000 fa08 	bl	80090ac <raise>
 8008c9c:	2001      	movs	r0, #1
 8008c9e:	f7f9 fa59 	bl	8002154 <_exit>

08008ca2 <_malloc_usable_size_r>:
 8008ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ca6:	1f18      	subs	r0, r3, #4
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	bfbc      	itt	lt
 8008cac:	580b      	ldrlt	r3, [r1, r0]
 8008cae:	18c0      	addlt	r0, r0, r3
 8008cb0:	4770      	bx	lr

08008cb2 <__sfputc_r>:
 8008cb2:	6893      	ldr	r3, [r2, #8]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	b410      	push	{r4}
 8008cba:	6093      	str	r3, [r2, #8]
 8008cbc:	da08      	bge.n	8008cd0 <__sfputc_r+0x1e>
 8008cbe:	6994      	ldr	r4, [r2, #24]
 8008cc0:	42a3      	cmp	r3, r4
 8008cc2:	db01      	blt.n	8008cc8 <__sfputc_r+0x16>
 8008cc4:	290a      	cmp	r1, #10
 8008cc6:	d103      	bne.n	8008cd0 <__sfputc_r+0x1e>
 8008cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ccc:	f000 b932 	b.w	8008f34 <__swbuf_r>
 8008cd0:	6813      	ldr	r3, [r2, #0]
 8008cd2:	1c58      	adds	r0, r3, #1
 8008cd4:	6010      	str	r0, [r2, #0]
 8008cd6:	7019      	strb	r1, [r3, #0]
 8008cd8:	4608      	mov	r0, r1
 8008cda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <__sfputs_r>:
 8008ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	460f      	mov	r7, r1
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	18d5      	adds	r5, r2, r3
 8008cea:	42ac      	cmp	r4, r5
 8008cec:	d101      	bne.n	8008cf2 <__sfputs_r+0x12>
 8008cee:	2000      	movs	r0, #0
 8008cf0:	e007      	b.n	8008d02 <__sfputs_r+0x22>
 8008cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cf6:	463a      	mov	r2, r7
 8008cf8:	4630      	mov	r0, r6
 8008cfa:	f7ff ffda 	bl	8008cb2 <__sfputc_r>
 8008cfe:	1c43      	adds	r3, r0, #1
 8008d00:	d1f3      	bne.n	8008cea <__sfputs_r+0xa>
 8008d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d04 <_vfiprintf_r>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	460d      	mov	r5, r1
 8008d0a:	b09d      	sub	sp, #116	@ 0x74
 8008d0c:	4614      	mov	r4, r2
 8008d0e:	4698      	mov	r8, r3
 8008d10:	4606      	mov	r6, r0
 8008d12:	b118      	cbz	r0, 8008d1c <_vfiprintf_r+0x18>
 8008d14:	6a03      	ldr	r3, [r0, #32]
 8008d16:	b90b      	cbnz	r3, 8008d1c <_vfiprintf_r+0x18>
 8008d18:	f7fe f906 	bl	8006f28 <__sinit>
 8008d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d1e:	07d9      	lsls	r1, r3, #31
 8008d20:	d405      	bmi.n	8008d2e <_vfiprintf_r+0x2a>
 8008d22:	89ab      	ldrh	r3, [r5, #12]
 8008d24:	059a      	lsls	r2, r3, #22
 8008d26:	d402      	bmi.n	8008d2e <_vfiprintf_r+0x2a>
 8008d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d2a:	f7fe fa14 	bl	8007156 <__retarget_lock_acquire_recursive>
 8008d2e:	89ab      	ldrh	r3, [r5, #12]
 8008d30:	071b      	lsls	r3, r3, #28
 8008d32:	d501      	bpl.n	8008d38 <_vfiprintf_r+0x34>
 8008d34:	692b      	ldr	r3, [r5, #16]
 8008d36:	b99b      	cbnz	r3, 8008d60 <_vfiprintf_r+0x5c>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	f000 f938 	bl	8008fb0 <__swsetup_r>
 8008d40:	b170      	cbz	r0, 8008d60 <_vfiprintf_r+0x5c>
 8008d42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d44:	07dc      	lsls	r4, r3, #31
 8008d46:	d504      	bpl.n	8008d52 <_vfiprintf_r+0x4e>
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	b01d      	add	sp, #116	@ 0x74
 8008d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d52:	89ab      	ldrh	r3, [r5, #12]
 8008d54:	0598      	lsls	r0, r3, #22
 8008d56:	d4f7      	bmi.n	8008d48 <_vfiprintf_r+0x44>
 8008d58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d5a:	f7fe f9fd 	bl	8007158 <__retarget_lock_release_recursive>
 8008d5e:	e7f3      	b.n	8008d48 <_vfiprintf_r+0x44>
 8008d60:	2300      	movs	r3, #0
 8008d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d64:	2320      	movs	r3, #32
 8008d66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d6e:	2330      	movs	r3, #48	@ 0x30
 8008d70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f20 <_vfiprintf_r+0x21c>
 8008d74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d78:	f04f 0901 	mov.w	r9, #1
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	469a      	mov	sl, r3
 8008d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d84:	b10a      	cbz	r2, 8008d8a <_vfiprintf_r+0x86>
 8008d86:	2a25      	cmp	r2, #37	@ 0x25
 8008d88:	d1f9      	bne.n	8008d7e <_vfiprintf_r+0x7a>
 8008d8a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d8e:	d00b      	beq.n	8008da8 <_vfiprintf_r+0xa4>
 8008d90:	465b      	mov	r3, fp
 8008d92:	4622      	mov	r2, r4
 8008d94:	4629      	mov	r1, r5
 8008d96:	4630      	mov	r0, r6
 8008d98:	f7ff ffa2 	bl	8008ce0 <__sfputs_r>
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	f000 80a7 	beq.w	8008ef0 <_vfiprintf_r+0x1ec>
 8008da2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da4:	445a      	add	r2, fp
 8008da6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008da8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 809f 	beq.w	8008ef0 <_vfiprintf_r+0x1ec>
 8008db2:	2300      	movs	r3, #0
 8008db4:	f04f 32ff 	mov.w	r2, #4294967295
 8008db8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dbc:	f10a 0a01 	add.w	sl, sl, #1
 8008dc0:	9304      	str	r3, [sp, #16]
 8008dc2:	9307      	str	r3, [sp, #28]
 8008dc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dc8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dca:	4654      	mov	r4, sl
 8008dcc:	2205      	movs	r2, #5
 8008dce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd2:	4853      	ldr	r0, [pc, #332]	@ (8008f20 <_vfiprintf_r+0x21c>)
 8008dd4:	f7f7 fa04 	bl	80001e0 <memchr>
 8008dd8:	9a04      	ldr	r2, [sp, #16]
 8008dda:	b9d8      	cbnz	r0, 8008e14 <_vfiprintf_r+0x110>
 8008ddc:	06d1      	lsls	r1, r2, #27
 8008dde:	bf44      	itt	mi
 8008de0:	2320      	movmi	r3, #32
 8008de2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de6:	0713      	lsls	r3, r2, #28
 8008de8:	bf44      	itt	mi
 8008dea:	232b      	movmi	r3, #43	@ 0x2b
 8008dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df0:	f89a 3000 	ldrb.w	r3, [sl]
 8008df4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df6:	d015      	beq.n	8008e24 <_vfiprintf_r+0x120>
 8008df8:	9a07      	ldr	r2, [sp, #28]
 8008dfa:	4654      	mov	r4, sl
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f04f 0c0a 	mov.w	ip, #10
 8008e02:	4621      	mov	r1, r4
 8008e04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e08:	3b30      	subs	r3, #48	@ 0x30
 8008e0a:	2b09      	cmp	r3, #9
 8008e0c:	d94b      	bls.n	8008ea6 <_vfiprintf_r+0x1a2>
 8008e0e:	b1b0      	cbz	r0, 8008e3e <_vfiprintf_r+0x13a>
 8008e10:	9207      	str	r2, [sp, #28]
 8008e12:	e014      	b.n	8008e3e <_vfiprintf_r+0x13a>
 8008e14:	eba0 0308 	sub.w	r3, r0, r8
 8008e18:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	9304      	str	r3, [sp, #16]
 8008e20:	46a2      	mov	sl, r4
 8008e22:	e7d2      	b.n	8008dca <_vfiprintf_r+0xc6>
 8008e24:	9b03      	ldr	r3, [sp, #12]
 8008e26:	1d19      	adds	r1, r3, #4
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	9103      	str	r1, [sp, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bfbb      	ittet	lt
 8008e30:	425b      	neglt	r3, r3
 8008e32:	f042 0202 	orrlt.w	r2, r2, #2
 8008e36:	9307      	strge	r3, [sp, #28]
 8008e38:	9307      	strlt	r3, [sp, #28]
 8008e3a:	bfb8      	it	lt
 8008e3c:	9204      	strlt	r2, [sp, #16]
 8008e3e:	7823      	ldrb	r3, [r4, #0]
 8008e40:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e42:	d10a      	bne.n	8008e5a <_vfiprintf_r+0x156>
 8008e44:	7863      	ldrb	r3, [r4, #1]
 8008e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e48:	d132      	bne.n	8008eb0 <_vfiprintf_r+0x1ac>
 8008e4a:	9b03      	ldr	r3, [sp, #12]
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	9203      	str	r2, [sp, #12]
 8008e52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e56:	3402      	adds	r4, #2
 8008e58:	9305      	str	r3, [sp, #20]
 8008e5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f30 <_vfiprintf_r+0x22c>
 8008e5e:	7821      	ldrb	r1, [r4, #0]
 8008e60:	2203      	movs	r2, #3
 8008e62:	4650      	mov	r0, sl
 8008e64:	f7f7 f9bc 	bl	80001e0 <memchr>
 8008e68:	b138      	cbz	r0, 8008e7a <_vfiprintf_r+0x176>
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	eba0 000a 	sub.w	r0, r0, sl
 8008e70:	2240      	movs	r2, #64	@ 0x40
 8008e72:	4082      	lsls	r2, r0
 8008e74:	4313      	orrs	r3, r2
 8008e76:	3401      	adds	r4, #1
 8008e78:	9304      	str	r3, [sp, #16]
 8008e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e7e:	4829      	ldr	r0, [pc, #164]	@ (8008f24 <_vfiprintf_r+0x220>)
 8008e80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e84:	2206      	movs	r2, #6
 8008e86:	f7f7 f9ab 	bl	80001e0 <memchr>
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d03f      	beq.n	8008f0e <_vfiprintf_r+0x20a>
 8008e8e:	4b26      	ldr	r3, [pc, #152]	@ (8008f28 <_vfiprintf_r+0x224>)
 8008e90:	bb1b      	cbnz	r3, 8008eda <_vfiprintf_r+0x1d6>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	3307      	adds	r3, #7
 8008e96:	f023 0307 	bic.w	r3, r3, #7
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	9303      	str	r3, [sp, #12]
 8008e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea0:	443b      	add	r3, r7
 8008ea2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea4:	e76a      	b.n	8008d7c <_vfiprintf_r+0x78>
 8008ea6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eaa:	460c      	mov	r4, r1
 8008eac:	2001      	movs	r0, #1
 8008eae:	e7a8      	b.n	8008e02 <_vfiprintf_r+0xfe>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	3401      	adds	r4, #1
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	f04f 0c0a 	mov.w	ip, #10
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec2:	3a30      	subs	r2, #48	@ 0x30
 8008ec4:	2a09      	cmp	r2, #9
 8008ec6:	d903      	bls.n	8008ed0 <_vfiprintf_r+0x1cc>
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0c6      	beq.n	8008e5a <_vfiprintf_r+0x156>
 8008ecc:	9105      	str	r1, [sp, #20]
 8008ece:	e7c4      	b.n	8008e5a <_vfiprintf_r+0x156>
 8008ed0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e7f0      	b.n	8008ebc <_vfiprintf_r+0x1b8>
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4b12      	ldr	r3, [pc, #72]	@ (8008f2c <_vfiprintf_r+0x228>)
 8008ee2:	a904      	add	r1, sp, #16
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7fd fbdb 	bl	80066a0 <_printf_float>
 8008eea:	4607      	mov	r7, r0
 8008eec:	1c78      	adds	r0, r7, #1
 8008eee:	d1d6      	bne.n	8008e9e <_vfiprintf_r+0x19a>
 8008ef0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ef2:	07d9      	lsls	r1, r3, #31
 8008ef4:	d405      	bmi.n	8008f02 <_vfiprintf_r+0x1fe>
 8008ef6:	89ab      	ldrh	r3, [r5, #12]
 8008ef8:	059a      	lsls	r2, r3, #22
 8008efa:	d402      	bmi.n	8008f02 <_vfiprintf_r+0x1fe>
 8008efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008efe:	f7fe f92b 	bl	8007158 <__retarget_lock_release_recursive>
 8008f02:	89ab      	ldrh	r3, [r5, #12]
 8008f04:	065b      	lsls	r3, r3, #25
 8008f06:	f53f af1f 	bmi.w	8008d48 <_vfiprintf_r+0x44>
 8008f0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f0c:	e71e      	b.n	8008d4c <_vfiprintf_r+0x48>
 8008f0e:	ab03      	add	r3, sp, #12
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	462a      	mov	r2, r5
 8008f14:	4b05      	ldr	r3, [pc, #20]	@ (8008f2c <_vfiprintf_r+0x228>)
 8008f16:	a904      	add	r1, sp, #16
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f7fd fe59 	bl	8006bd0 <_printf_i>
 8008f1e:	e7e4      	b.n	8008eea <_vfiprintf_r+0x1e6>
 8008f20:	08009860 	.word	0x08009860
 8008f24:	0800986a 	.word	0x0800986a
 8008f28:	080066a1 	.word	0x080066a1
 8008f2c:	08008ce1 	.word	0x08008ce1
 8008f30:	08009866 	.word	0x08009866

08008f34 <__swbuf_r>:
 8008f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f36:	460e      	mov	r6, r1
 8008f38:	4614      	mov	r4, r2
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	b118      	cbz	r0, 8008f46 <__swbuf_r+0x12>
 8008f3e:	6a03      	ldr	r3, [r0, #32]
 8008f40:	b90b      	cbnz	r3, 8008f46 <__swbuf_r+0x12>
 8008f42:	f7fd fff1 	bl	8006f28 <__sinit>
 8008f46:	69a3      	ldr	r3, [r4, #24]
 8008f48:	60a3      	str	r3, [r4, #8]
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	071a      	lsls	r2, r3, #28
 8008f4e:	d501      	bpl.n	8008f54 <__swbuf_r+0x20>
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	b943      	cbnz	r3, 8008f66 <__swbuf_r+0x32>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f82a 	bl	8008fb0 <__swsetup_r>
 8008f5c:	b118      	cbz	r0, 8008f66 <__swbuf_r+0x32>
 8008f5e:	f04f 37ff 	mov.w	r7, #4294967295
 8008f62:	4638      	mov	r0, r7
 8008f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f66:	6823      	ldr	r3, [r4, #0]
 8008f68:	6922      	ldr	r2, [r4, #16]
 8008f6a:	1a98      	subs	r0, r3, r2
 8008f6c:	6963      	ldr	r3, [r4, #20]
 8008f6e:	b2f6      	uxtb	r6, r6
 8008f70:	4283      	cmp	r3, r0
 8008f72:	4637      	mov	r7, r6
 8008f74:	dc05      	bgt.n	8008f82 <__swbuf_r+0x4e>
 8008f76:	4621      	mov	r1, r4
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f7ff fda7 	bl	8008acc <_fflush_r>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d1ed      	bne.n	8008f5e <__swbuf_r+0x2a>
 8008f82:	68a3      	ldr	r3, [r4, #8]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	60a3      	str	r3, [r4, #8]
 8008f88:	6823      	ldr	r3, [r4, #0]
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	6022      	str	r2, [r4, #0]
 8008f8e:	701e      	strb	r6, [r3, #0]
 8008f90:	6962      	ldr	r2, [r4, #20]
 8008f92:	1c43      	adds	r3, r0, #1
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d004      	beq.n	8008fa2 <__swbuf_r+0x6e>
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	07db      	lsls	r3, r3, #31
 8008f9c:	d5e1      	bpl.n	8008f62 <__swbuf_r+0x2e>
 8008f9e:	2e0a      	cmp	r6, #10
 8008fa0:	d1df      	bne.n	8008f62 <__swbuf_r+0x2e>
 8008fa2:	4621      	mov	r1, r4
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	f7ff fd91 	bl	8008acc <_fflush_r>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	d0d9      	beq.n	8008f62 <__swbuf_r+0x2e>
 8008fae:	e7d6      	b.n	8008f5e <__swbuf_r+0x2a>

08008fb0 <__swsetup_r>:
 8008fb0:	b538      	push	{r3, r4, r5, lr}
 8008fb2:	4b29      	ldr	r3, [pc, #164]	@ (8009058 <__swsetup_r+0xa8>)
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	6818      	ldr	r0, [r3, #0]
 8008fb8:	460c      	mov	r4, r1
 8008fba:	b118      	cbz	r0, 8008fc4 <__swsetup_r+0x14>
 8008fbc:	6a03      	ldr	r3, [r0, #32]
 8008fbe:	b90b      	cbnz	r3, 8008fc4 <__swsetup_r+0x14>
 8008fc0:	f7fd ffb2 	bl	8006f28 <__sinit>
 8008fc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc8:	0719      	lsls	r1, r3, #28
 8008fca:	d422      	bmi.n	8009012 <__swsetup_r+0x62>
 8008fcc:	06da      	lsls	r2, r3, #27
 8008fce:	d407      	bmi.n	8008fe0 <__swsetup_r+0x30>
 8008fd0:	2209      	movs	r2, #9
 8008fd2:	602a      	str	r2, [r5, #0]
 8008fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd8:	81a3      	strh	r3, [r4, #12]
 8008fda:	f04f 30ff 	mov.w	r0, #4294967295
 8008fde:	e033      	b.n	8009048 <__swsetup_r+0x98>
 8008fe0:	0758      	lsls	r0, r3, #29
 8008fe2:	d512      	bpl.n	800900a <__swsetup_r+0x5a>
 8008fe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fe6:	b141      	cbz	r1, 8008ffa <__swsetup_r+0x4a>
 8008fe8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fec:	4299      	cmp	r1, r3
 8008fee:	d002      	beq.n	8008ff6 <__swsetup_r+0x46>
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f7fe ff0d 	bl	8007e10 <_free_r>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ffa:	89a3      	ldrh	r3, [r4, #12]
 8008ffc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009000:	81a3      	strh	r3, [r4, #12]
 8009002:	2300      	movs	r3, #0
 8009004:	6063      	str	r3, [r4, #4]
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	f043 0308 	orr.w	r3, r3, #8
 8009010:	81a3      	strh	r3, [r4, #12]
 8009012:	6923      	ldr	r3, [r4, #16]
 8009014:	b94b      	cbnz	r3, 800902a <__swsetup_r+0x7a>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800901c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009020:	d003      	beq.n	800902a <__swsetup_r+0x7a>
 8009022:	4621      	mov	r1, r4
 8009024:	4628      	mov	r0, r5
 8009026:	f000 f883 	bl	8009130 <__smakebuf_r>
 800902a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800902e:	f013 0201 	ands.w	r2, r3, #1
 8009032:	d00a      	beq.n	800904a <__swsetup_r+0x9a>
 8009034:	2200      	movs	r2, #0
 8009036:	60a2      	str	r2, [r4, #8]
 8009038:	6962      	ldr	r2, [r4, #20]
 800903a:	4252      	negs	r2, r2
 800903c:	61a2      	str	r2, [r4, #24]
 800903e:	6922      	ldr	r2, [r4, #16]
 8009040:	b942      	cbnz	r2, 8009054 <__swsetup_r+0xa4>
 8009042:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009046:	d1c5      	bne.n	8008fd4 <__swsetup_r+0x24>
 8009048:	bd38      	pop	{r3, r4, r5, pc}
 800904a:	0799      	lsls	r1, r3, #30
 800904c:	bf58      	it	pl
 800904e:	6962      	ldrpl	r2, [r4, #20]
 8009050:	60a2      	str	r2, [r4, #8]
 8009052:	e7f4      	b.n	800903e <__swsetup_r+0x8e>
 8009054:	2000      	movs	r0, #0
 8009056:	e7f7      	b.n	8009048 <__swsetup_r+0x98>
 8009058:	20000024 	.word	0x20000024

0800905c <_raise_r>:
 800905c:	291f      	cmp	r1, #31
 800905e:	b538      	push	{r3, r4, r5, lr}
 8009060:	4605      	mov	r5, r0
 8009062:	460c      	mov	r4, r1
 8009064:	d904      	bls.n	8009070 <_raise_r+0x14>
 8009066:	2316      	movs	r3, #22
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	f04f 30ff 	mov.w	r0, #4294967295
 800906e:	bd38      	pop	{r3, r4, r5, pc}
 8009070:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009072:	b112      	cbz	r2, 800907a <_raise_r+0x1e>
 8009074:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009078:	b94b      	cbnz	r3, 800908e <_raise_r+0x32>
 800907a:	4628      	mov	r0, r5
 800907c:	f000 f830 	bl	80090e0 <_getpid_r>
 8009080:	4622      	mov	r2, r4
 8009082:	4601      	mov	r1, r0
 8009084:	4628      	mov	r0, r5
 8009086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800908a:	f000 b817 	b.w	80090bc <_kill_r>
 800908e:	2b01      	cmp	r3, #1
 8009090:	d00a      	beq.n	80090a8 <_raise_r+0x4c>
 8009092:	1c59      	adds	r1, r3, #1
 8009094:	d103      	bne.n	800909e <_raise_r+0x42>
 8009096:	2316      	movs	r3, #22
 8009098:	6003      	str	r3, [r0, #0]
 800909a:	2001      	movs	r0, #1
 800909c:	e7e7      	b.n	800906e <_raise_r+0x12>
 800909e:	2100      	movs	r1, #0
 80090a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80090a4:	4620      	mov	r0, r4
 80090a6:	4798      	blx	r3
 80090a8:	2000      	movs	r0, #0
 80090aa:	e7e0      	b.n	800906e <_raise_r+0x12>

080090ac <raise>:
 80090ac:	4b02      	ldr	r3, [pc, #8]	@ (80090b8 <raise+0xc>)
 80090ae:	4601      	mov	r1, r0
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	f7ff bfd3 	b.w	800905c <_raise_r>
 80090b6:	bf00      	nop
 80090b8:	20000024 	.word	0x20000024

080090bc <_kill_r>:
 80090bc:	b538      	push	{r3, r4, r5, lr}
 80090be:	4d07      	ldr	r5, [pc, #28]	@ (80090dc <_kill_r+0x20>)
 80090c0:	2300      	movs	r3, #0
 80090c2:	4604      	mov	r4, r0
 80090c4:	4608      	mov	r0, r1
 80090c6:	4611      	mov	r1, r2
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	f7f9 f833 	bl	8002134 <_kill>
 80090ce:	1c43      	adds	r3, r0, #1
 80090d0:	d102      	bne.n	80090d8 <_kill_r+0x1c>
 80090d2:	682b      	ldr	r3, [r5, #0]
 80090d4:	b103      	cbz	r3, 80090d8 <_kill_r+0x1c>
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	bd38      	pop	{r3, r4, r5, pc}
 80090da:	bf00      	nop
 80090dc:	20000584 	.word	0x20000584

080090e0 <_getpid_r>:
 80090e0:	f7f9 b820 	b.w	8002124 <_getpid>

080090e4 <__swhatbuf_r>:
 80090e4:	b570      	push	{r4, r5, r6, lr}
 80090e6:	460c      	mov	r4, r1
 80090e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ec:	2900      	cmp	r1, #0
 80090ee:	b096      	sub	sp, #88	@ 0x58
 80090f0:	4615      	mov	r5, r2
 80090f2:	461e      	mov	r6, r3
 80090f4:	da0d      	bge.n	8009112 <__swhatbuf_r+0x2e>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090fc:	f04f 0100 	mov.w	r1, #0
 8009100:	bf14      	ite	ne
 8009102:	2340      	movne	r3, #64	@ 0x40
 8009104:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009108:	2000      	movs	r0, #0
 800910a:	6031      	str	r1, [r6, #0]
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	b016      	add	sp, #88	@ 0x58
 8009110:	bd70      	pop	{r4, r5, r6, pc}
 8009112:	466a      	mov	r2, sp
 8009114:	f000 f848 	bl	80091a8 <_fstat_r>
 8009118:	2800      	cmp	r0, #0
 800911a:	dbec      	blt.n	80090f6 <__swhatbuf_r+0x12>
 800911c:	9901      	ldr	r1, [sp, #4]
 800911e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009122:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009126:	4259      	negs	r1, r3
 8009128:	4159      	adcs	r1, r3
 800912a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800912e:	e7eb      	b.n	8009108 <__swhatbuf_r+0x24>

08009130 <__smakebuf_r>:
 8009130:	898b      	ldrh	r3, [r1, #12]
 8009132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009134:	079d      	lsls	r5, r3, #30
 8009136:	4606      	mov	r6, r0
 8009138:	460c      	mov	r4, r1
 800913a:	d507      	bpl.n	800914c <__smakebuf_r+0x1c>
 800913c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009140:	6023      	str	r3, [r4, #0]
 8009142:	6123      	str	r3, [r4, #16]
 8009144:	2301      	movs	r3, #1
 8009146:	6163      	str	r3, [r4, #20]
 8009148:	b003      	add	sp, #12
 800914a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800914c:	ab01      	add	r3, sp, #4
 800914e:	466a      	mov	r2, sp
 8009150:	f7ff ffc8 	bl	80090e4 <__swhatbuf_r>
 8009154:	9f00      	ldr	r7, [sp, #0]
 8009156:	4605      	mov	r5, r0
 8009158:	4639      	mov	r1, r7
 800915a:	4630      	mov	r0, r6
 800915c:	f7fe fecc 	bl	8007ef8 <_malloc_r>
 8009160:	b948      	cbnz	r0, 8009176 <__smakebuf_r+0x46>
 8009162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009166:	059a      	lsls	r2, r3, #22
 8009168:	d4ee      	bmi.n	8009148 <__smakebuf_r+0x18>
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	f043 0302 	orr.w	r3, r3, #2
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	e7e2      	b.n	800913c <__smakebuf_r+0xc>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	6020      	str	r0, [r4, #0]
 800917a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	9b01      	ldr	r3, [sp, #4]
 8009182:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009186:	b15b      	cbz	r3, 80091a0 <__smakebuf_r+0x70>
 8009188:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800918c:	4630      	mov	r0, r6
 800918e:	f000 f81d 	bl	80091cc <_isatty_r>
 8009192:	b128      	cbz	r0, 80091a0 <__smakebuf_r+0x70>
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	f043 0301 	orr.w	r3, r3, #1
 800919e:	81a3      	strh	r3, [r4, #12]
 80091a0:	89a3      	ldrh	r3, [r4, #12]
 80091a2:	431d      	orrs	r5, r3
 80091a4:	81a5      	strh	r5, [r4, #12]
 80091a6:	e7cf      	b.n	8009148 <__smakebuf_r+0x18>

080091a8 <_fstat_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d07      	ldr	r5, [pc, #28]	@ (80091c8 <_fstat_r+0x20>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	4611      	mov	r1, r2
 80091b4:	602b      	str	r3, [r5, #0]
 80091b6:	f7f9 f81d 	bl	80021f4 <_fstat>
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	d102      	bne.n	80091c4 <_fstat_r+0x1c>
 80091be:	682b      	ldr	r3, [r5, #0]
 80091c0:	b103      	cbz	r3, 80091c4 <_fstat_r+0x1c>
 80091c2:	6023      	str	r3, [r4, #0]
 80091c4:	bd38      	pop	{r3, r4, r5, pc}
 80091c6:	bf00      	nop
 80091c8:	20000584 	.word	0x20000584

080091cc <_isatty_r>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	4d06      	ldr	r5, [pc, #24]	@ (80091e8 <_isatty_r+0x1c>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	4604      	mov	r4, r0
 80091d4:	4608      	mov	r0, r1
 80091d6:	602b      	str	r3, [r5, #0]
 80091d8:	f7f9 f81c 	bl	8002214 <_isatty>
 80091dc:	1c43      	adds	r3, r0, #1
 80091de:	d102      	bne.n	80091e6 <_isatty_r+0x1a>
 80091e0:	682b      	ldr	r3, [r5, #0]
 80091e2:	b103      	cbz	r3, 80091e6 <_isatty_r+0x1a>
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	20000584 	.word	0x20000584

080091ec <atan2f>:
 80091ec:	f000 b800 	b.w	80091f0 <__ieee754_atan2f>

080091f0 <__ieee754_atan2f>:
 80091f0:	ee10 2a90 	vmov	r2, s1
 80091f4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80091f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80091fc:	b510      	push	{r4, lr}
 80091fe:	eef0 7a40 	vmov.f32	s15, s0
 8009202:	d806      	bhi.n	8009212 <__ieee754_atan2f+0x22>
 8009204:	ee10 0a10 	vmov	r0, s0
 8009208:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800920c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009210:	d904      	bls.n	800921c <__ieee754_atan2f+0x2c>
 8009212:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009216:	eeb0 0a67 	vmov.f32	s0, s15
 800921a:	bd10      	pop	{r4, pc}
 800921c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8009220:	d103      	bne.n	800922a <__ieee754_atan2f+0x3a>
 8009222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009226:	f000 b883 	b.w	8009330 <atanf>
 800922a:	1794      	asrs	r4, r2, #30
 800922c:	f004 0402 	and.w	r4, r4, #2
 8009230:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009234:	b943      	cbnz	r3, 8009248 <__ieee754_atan2f+0x58>
 8009236:	2c02      	cmp	r4, #2
 8009238:	d05e      	beq.n	80092f8 <__ieee754_atan2f+0x108>
 800923a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800930c <__ieee754_atan2f+0x11c>
 800923e:	2c03      	cmp	r4, #3
 8009240:	bf08      	it	eq
 8009242:	eef0 7a47 	vmoveq.f32	s15, s14
 8009246:	e7e6      	b.n	8009216 <__ieee754_atan2f+0x26>
 8009248:	b941      	cbnz	r1, 800925c <__ieee754_atan2f+0x6c>
 800924a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8009310 <__ieee754_atan2f+0x120>
 800924e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009314 <__ieee754_atan2f+0x124>
 8009252:	2800      	cmp	r0, #0
 8009254:	bfb8      	it	lt
 8009256:	eef0 7a47 	vmovlt.f32	s15, s14
 800925a:	e7dc      	b.n	8009216 <__ieee754_atan2f+0x26>
 800925c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009260:	d110      	bne.n	8009284 <__ieee754_atan2f+0x94>
 8009262:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009266:	f104 34ff 	add.w	r4, r4, #4294967295
 800926a:	d107      	bne.n	800927c <__ieee754_atan2f+0x8c>
 800926c:	2c02      	cmp	r4, #2
 800926e:	d846      	bhi.n	80092fe <__ieee754_atan2f+0x10e>
 8009270:	4b29      	ldr	r3, [pc, #164]	@ (8009318 <__ieee754_atan2f+0x128>)
 8009272:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009276:	edd3 7a00 	vldr	s15, [r3]
 800927a:	e7cc      	b.n	8009216 <__ieee754_atan2f+0x26>
 800927c:	2c02      	cmp	r4, #2
 800927e:	d841      	bhi.n	8009304 <__ieee754_atan2f+0x114>
 8009280:	4b26      	ldr	r3, [pc, #152]	@ (800931c <__ieee754_atan2f+0x12c>)
 8009282:	e7f6      	b.n	8009272 <__ieee754_atan2f+0x82>
 8009284:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009288:	d0df      	beq.n	800924a <__ieee754_atan2f+0x5a>
 800928a:	1a5b      	subs	r3, r3, r1
 800928c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8009290:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8009294:	da1a      	bge.n	80092cc <__ieee754_atan2f+0xdc>
 8009296:	2a00      	cmp	r2, #0
 8009298:	da01      	bge.n	800929e <__ieee754_atan2f+0xae>
 800929a:	313c      	adds	r1, #60	@ 0x3c
 800929c:	db19      	blt.n	80092d2 <__ieee754_atan2f+0xe2>
 800929e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80092a2:	f000 f919 	bl	80094d8 <fabsf>
 80092a6:	f000 f843 	bl	8009330 <atanf>
 80092aa:	eef0 7a40 	vmov.f32	s15, s0
 80092ae:	2c01      	cmp	r4, #1
 80092b0:	d012      	beq.n	80092d8 <__ieee754_atan2f+0xe8>
 80092b2:	2c02      	cmp	r4, #2
 80092b4:	d017      	beq.n	80092e6 <__ieee754_atan2f+0xf6>
 80092b6:	2c00      	cmp	r4, #0
 80092b8:	d0ad      	beq.n	8009216 <__ieee754_atan2f+0x26>
 80092ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009320 <__ieee754_atan2f+0x130>
 80092be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092c2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009324 <__ieee754_atan2f+0x134>
 80092c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092ca:	e7a4      	b.n	8009216 <__ieee754_atan2f+0x26>
 80092cc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009310 <__ieee754_atan2f+0x120>
 80092d0:	e7ed      	b.n	80092ae <__ieee754_atan2f+0xbe>
 80092d2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009328 <__ieee754_atan2f+0x138>
 80092d6:	e7ea      	b.n	80092ae <__ieee754_atan2f+0xbe>
 80092d8:	ee17 3a90 	vmov	r3, s15
 80092dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	e797      	b.n	8009216 <__ieee754_atan2f+0x26>
 80092e6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009320 <__ieee754_atan2f+0x130>
 80092ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009324 <__ieee754_atan2f+0x134>
 80092f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092f6:	e78e      	b.n	8009216 <__ieee754_atan2f+0x26>
 80092f8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009324 <__ieee754_atan2f+0x134>
 80092fc:	e78b      	b.n	8009216 <__ieee754_atan2f+0x26>
 80092fe:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800932c <__ieee754_atan2f+0x13c>
 8009302:	e788      	b.n	8009216 <__ieee754_atan2f+0x26>
 8009304:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009328 <__ieee754_atan2f+0x138>
 8009308:	e785      	b.n	8009216 <__ieee754_atan2f+0x26>
 800930a:	bf00      	nop
 800930c:	c0490fdb 	.word	0xc0490fdb
 8009310:	3fc90fdb 	.word	0x3fc90fdb
 8009314:	bfc90fdb 	.word	0xbfc90fdb
 8009318:	080099c4 	.word	0x080099c4
 800931c:	080099b8 	.word	0x080099b8
 8009320:	33bbbd2e 	.word	0x33bbbd2e
 8009324:	40490fdb 	.word	0x40490fdb
 8009328:	00000000 	.word	0x00000000
 800932c:	3f490fdb 	.word	0x3f490fdb

08009330 <atanf>:
 8009330:	b538      	push	{r3, r4, r5, lr}
 8009332:	ee10 5a10 	vmov	r5, s0
 8009336:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800933a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800933e:	eef0 7a40 	vmov.f32	s15, s0
 8009342:	d310      	bcc.n	8009366 <atanf+0x36>
 8009344:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009348:	d904      	bls.n	8009354 <atanf+0x24>
 800934a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800934e:	eeb0 0a67 	vmov.f32	s0, s15
 8009352:	bd38      	pop	{r3, r4, r5, pc}
 8009354:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800948c <atanf+0x15c>
 8009358:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8009490 <atanf+0x160>
 800935c:	2d00      	cmp	r5, #0
 800935e:	bfc8      	it	gt
 8009360:	eef0 7a47 	vmovgt.f32	s15, s14
 8009364:	e7f3      	b.n	800934e <atanf+0x1e>
 8009366:	4b4b      	ldr	r3, [pc, #300]	@ (8009494 <atanf+0x164>)
 8009368:	429c      	cmp	r4, r3
 800936a:	d810      	bhi.n	800938e <atanf+0x5e>
 800936c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8009370:	d20a      	bcs.n	8009388 <atanf+0x58>
 8009372:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8009498 <atanf+0x168>
 8009376:	ee30 7a07 	vadd.f32	s14, s0, s14
 800937a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800937e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8009382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009386:	dce2      	bgt.n	800934e <atanf+0x1e>
 8009388:	f04f 33ff 	mov.w	r3, #4294967295
 800938c:	e013      	b.n	80093b6 <atanf+0x86>
 800938e:	f000 f8a3 	bl	80094d8 <fabsf>
 8009392:	4b42      	ldr	r3, [pc, #264]	@ (800949c <atanf+0x16c>)
 8009394:	429c      	cmp	r4, r3
 8009396:	d84f      	bhi.n	8009438 <atanf+0x108>
 8009398:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800939c:	429c      	cmp	r4, r3
 800939e:	d841      	bhi.n	8009424 <atanf+0xf4>
 80093a0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80093a4:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80093a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80093ac:	2300      	movs	r3, #0
 80093ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80093b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80093bc:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80094a0 <atanf+0x170>
 80093c0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80094a4 <atanf+0x174>
 80093c4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80094a8 <atanf+0x178>
 80093c8:	ee66 6a06 	vmul.f32	s13, s12, s12
 80093cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 80093d0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80094ac <atanf+0x17c>
 80093d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80093d8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80094b0 <atanf+0x180>
 80093dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80093e0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80094b4 <atanf+0x184>
 80093e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80093e8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80094b8 <atanf+0x188>
 80093ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 80093f0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80094bc <atanf+0x18c>
 80093f4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80093f8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80094c0 <atanf+0x190>
 80093fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009400:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80094c4 <atanf+0x194>
 8009404:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009408:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80094c8 <atanf+0x198>
 800940c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009410:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009414:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009418:	ee27 7a87 	vmul.f32	s14, s15, s14
 800941c:	d121      	bne.n	8009462 <atanf+0x132>
 800941e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009422:	e794      	b.n	800934e <atanf+0x1e>
 8009424:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009428:	ee30 7a67 	vsub.f32	s14, s0, s15
 800942c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009430:	2301      	movs	r3, #1
 8009432:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009436:	e7be      	b.n	80093b6 <atanf+0x86>
 8009438:	4b24      	ldr	r3, [pc, #144]	@ (80094cc <atanf+0x19c>)
 800943a:	429c      	cmp	r4, r3
 800943c:	d80b      	bhi.n	8009456 <atanf+0x126>
 800943e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8009442:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009446:	eea0 7a27 	vfma.f32	s14, s0, s15
 800944a:	2302      	movs	r3, #2
 800944c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8009450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009454:	e7af      	b.n	80093b6 <atanf+0x86>
 8009456:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800945a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800945e:	2303      	movs	r3, #3
 8009460:	e7a9      	b.n	80093b6 <atanf+0x86>
 8009462:	4a1b      	ldr	r2, [pc, #108]	@ (80094d0 <atanf+0x1a0>)
 8009464:	491b      	ldr	r1, [pc, #108]	@ (80094d4 <atanf+0x1a4>)
 8009466:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800946a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800946e:	edd3 6a00 	vldr	s13, [r3]
 8009472:	ee37 7a66 	vsub.f32	s14, s14, s13
 8009476:	2d00      	cmp	r5, #0
 8009478:	ee37 7a67 	vsub.f32	s14, s14, s15
 800947c:	edd2 7a00 	vldr	s15, [r2]
 8009480:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009484:	bfb8      	it	lt
 8009486:	eef1 7a67 	vneglt.f32	s15, s15
 800948a:	e760      	b.n	800934e <atanf+0x1e>
 800948c:	bfc90fdb 	.word	0xbfc90fdb
 8009490:	3fc90fdb 	.word	0x3fc90fdb
 8009494:	3edfffff 	.word	0x3edfffff
 8009498:	7149f2ca 	.word	0x7149f2ca
 800949c:	3f97ffff 	.word	0x3f97ffff
 80094a0:	3c8569d7 	.word	0x3c8569d7
 80094a4:	3d4bda59 	.word	0x3d4bda59
 80094a8:	bd6ef16b 	.word	0xbd6ef16b
 80094ac:	3d886b35 	.word	0x3d886b35
 80094b0:	3dba2e6e 	.word	0x3dba2e6e
 80094b4:	3e124925 	.word	0x3e124925
 80094b8:	3eaaaaab 	.word	0x3eaaaaab
 80094bc:	bd15a221 	.word	0xbd15a221
 80094c0:	bd9d8795 	.word	0xbd9d8795
 80094c4:	bde38e38 	.word	0xbde38e38
 80094c8:	be4ccccd 	.word	0xbe4ccccd
 80094cc:	401bffff 	.word	0x401bffff
 80094d0:	080099e0 	.word	0x080099e0
 80094d4:	080099d0 	.word	0x080099d0

080094d8 <fabsf>:
 80094d8:	ee10 3a10 	vmov	r3, s0
 80094dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094e0:	ee00 3a10 	vmov	s0, r3
 80094e4:	4770      	bx	lr
	...

080094e8 <_init>:
 80094e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ea:	bf00      	nop
 80094ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094ee:	bc08      	pop	{r3}
 80094f0:	469e      	mov	lr, r3
 80094f2:	4770      	bx	lr

080094f4 <_fini>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr
